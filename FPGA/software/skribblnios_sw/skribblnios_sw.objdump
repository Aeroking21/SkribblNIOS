
skribblnios_sw.elf:     file format elf32-littlenios2
skribblnios_sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010248

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000051f8 memsz 0x000051f8 flags r-x
    LOAD off    0x00006218 vaddr 0x00015218 paddr 0x00016cb0 align 2**12
         filesz 0x00001a98 memsz 0x00001a98 flags rw-
    LOAD off    0x00008748 vaddr 0x00018748 paddr 0x00018748 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004f64  00010248  00010248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000006c  000151ac  000151ac  000061ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a98  00015218  00016cb0  00006218  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  00018748  00018748  00008748  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000188a4  000188a4  00007cb0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00007cb0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000009f8  00000000  00000000  00007cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00016200  00000000  00000000  000086d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005f74  00000000  00000000  0001e8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006707  00000000  00000000  00024844  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001598  00000000  00000000  0002af4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002631  00000000  00000000  0002c4e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002fd9  00000000  00000000  0002eb15  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00031af0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000004d0  00000000  00000000  00031b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000345aa  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000345ad  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000345b0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000345b1  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000345b2  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000345bb  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000345c4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  000345cd  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000049  00000000  00000000  000345d7  2**0
                  CONTENTS, READONLY
 26 .jdi          00004ddf  00000000  00000000  00034620  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006dc7c  00000000  00000000  000393ff  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010248 l    d  .text	00000000 .text
000151ac l    d  .rodata	00000000 .rodata
00015218 l    d  .rwdata	00000000 .rwdata
00018748 l    d  .bss	00000000 .bss
000188a4 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../skribblnios_sw_bsp//obj/HAL/src/crt0.o
00010290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 skribblmain.c
00000000 l    df *ABS*	00000000 alt_load.c
00010368 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010738 l     F .text	00000034 alt_dev_reg
00015218 l     O .rwdata	00001060 jtag_uart
00016278 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00010a28 l     F .text	00000210 altera_avalon_jtag_uart_irq
00010c38 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00011270 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0001183c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011990 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000119bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00011c20 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00011ee0 l     F .text	0000003c alt_get_errno
00011f1c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0001644c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00013234 l     F .text	00000008 __fp_unlock
00013248 l     F .text	0000019c __sinit.part.1
000133e4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00014b6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00014c58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00014d38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00014e90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00016cac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00015078 l     F .text	0000003c alt_get_errno
00018768 g     O .bss	00000004 alt_instruction_exception_handler
00014a24 g     F .text	00000054 _isatty_r
00010454 g     F .text	0000007c alt_main
00010294 g     F .text	00000038 led_write
000187a4 g     O .bss	00000100 alt_irq
00014a78 g     F .text	00000060 _lseek_r
00016cb0 g       *ABS*	00000000 __flash_rwdata_start
000188a4 g       *ABS*	00000000 __alt_heap_start
000147ac g     F .text	0000005c __sseek
00013584 g     F .text	00000010 __sinit
00012a48 g     F .text	00000140 __swbuf_r
000133ec g     F .text	00000068 __sfmoreglue
00014e6c g     F .text	00000024 __malloc_unlock
0001356c g     F .text	00000018 _cleanup
0001233c g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000001c __reset
000114ac g     F .text	000000cc alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
000149c8 g     F .text	0000005c _fstat_r
0001876c g     O .bss	00000004 errno
00014728 g     F .text	00000008 __seofread
00018754 g     O .bss	00000004 alt_argv
0001ec78 g       *ABS*	00000000 _gp
000162cc g     O .rwdata	00000180 alt_fd_list
00011b5c g     F .text	00000090 alt_find_dev
00012700 g     F .text	00000148 memcpy
0001323c g     F .text	0000000c _cleanup_r
00011ce4 g     F .text	0000007c alt_io_redirect
000151ac g       *ABS*	00000000 __DTOR_END__
0001259c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00010e30 g     F .text	0000021c altera_avalon_jtag_uart_read
00014c94 g     F .text	000000a4 isatty
0001250c g     F .text	00000090 alt_icache_flush
00018778 g     O .bss	00000004 __malloc_top_pad
00014680 g     F .text	00000054 _sbrk_r
00014ad8 g     F .text	00000060 _read_r
00016c88 g     O .rwdata	00000004 alt_max_fd
000148c4 g     F .text	000000f0 _fclose_r
00013204 g     F .text	00000030 fflush
00018774 g     O .bss	00000004 __malloc_max_sbrked_mem
00011d60 g     F .text	00000180 alt_irq_register
00014d74 g     F .text	000000d4 lseek
00016c9c g     O .rwdata	00000004 _global_impure_ptr
000188a4 g       *ABS*	00000000 __bss_end
00012234 g     F .text	00000108 alt_tick
000135a4 g     F .text	00000018 __fp_lock_all
00012198 g     F .text	0000009c alt_alarm_stop
0001875c g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d8 alt_irq_handler
000162a4 g     O .rwdata	00000028 alt_dev_null
00011948 g     F .text	00000048 alt_dcache_flush_all
00016cb0 g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00016c80 g     O .rwdata	00000008 alt_dev_list
000150b4 g     F .text	000000f8 write
00012848 g     F .text	000000a0 _putc_r
00015218 g       *ABS*	00000000 __ram_rodata_end
00014ba8 g     F .text	000000b0 fstat
00018748 g     O .bss	00000001 led
000188a4 g       *ABS*	00000000 end
00010974 g     F .text	000000b4 altera_avalon_jtag_uart_init
000101d4 g     F .exceptions	00000074 alt_instruction_exception_entry
000151ac g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
000112ec g     F .text	00000074 alt_avalon_timer_sc_init
0001104c g     F .text	00000224 altera_avalon_jtag_uart_write
00013594 g     F .text	00000004 __sfp_lock_acquire
000136f8 g     F .text	00000310 _free_r
000104d0 g     F .text	0000022c alt_printf
00012e0c g     F .text	00000180 __call_exitprocs
00016ca4 g     O .rwdata	00000004 __malloc_sbrk_base
00010248 g     F .text	0000004c _start
0001874c g     O .bss	00000004 level
00018760 g     O .bss	00000004 _alt_tick_rate
00018764 g     O .bss	00000004 _alt_nticks
00014ecc g     F .text	000000fc read
000107a4 g     F .text	0000006c alt_sys_init
0001139c g     F .text	00000044 alt_up_accelerometer_spi_read_address_register
00012cf4 g     F .text	00000118 __register_exitproc
00010cd8 g     F .text	00000068 altera_avalon_jtag_uart_close
00015218 g       *ABS*	00000000 __ram_rwdata_start
000151ac g       *ABS*	00000000 __ram_rodata_start
0001877c g     O .bss	00000028 __malloc_current_mallinfo
00010810 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00012468 g     F .text	000000a4 alt_get_fd
00011578 g     F .text	000000cc alt_up_accelerometer_spi_read_y_axis
00014870 g     F .text	00000054 _close_r
00012684 g     F .text	0000007c memcmp
000108d0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000188a4 g       *ABS*	00000000 __alt_stack_base
00010920 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00012ba0 g     F .text	00000154 __swsetup_r
00013454 g     F .text	00000118 __sfp
00016870 g     O .rwdata	00000408 __malloc_av_
000135a0 g     F .text	00000004 __sinit_lock_release
000146d4 g     F .text	00000054 __sread
00012360 g     F .text	00000108 alt_find_file
000119f8 g     F .text	000000a4 alt_dev_llist_insert
00014e48 g     F .text	00000024 __malloc_lock
00014fc8 g     F .text	000000b0 sbrk
000131a8 g     F .text	0000005c _fflush_r
00018748 g       *ABS*	00000000 __bss_start
00014558 g     F .text	00000128 memset
000102cc g     F .text	0000009c main
00018758 g     O .bss	00000004 alt_envp
00018770 g     O .bss	00000004 __malloc_max_total_mem
00010870 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00012b88 g     F .text	00000018 __swbuf
00014808 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
000149b4 g     F .text	00000014 fclose
00013d4c g     F .text	0000080c _malloc_r
00016c8c g     O .rwdata	00000004 alt_errno
00013a08 g     F .text	000000c4 _fwalk
000128e8 g     F .text	000000c8 putc
000135d4 g     F .text	00000124 _malloc_trim_r
000151ac g       *ABS*	00000000 __CTOR_END__
000151ac g       *ABS*	00000000 __flash_rodata_start
000151ac g       *ABS*	00000000 __DTOR_LIST__
0001076c g     F .text	00000038 alt_irq_init
00012134 g     F .text	00000064 alt_release_fd
00012638 g     F .text	00000014 atexit
00014810 g     F .text	00000060 _write_r
00016ca0 g     O .rwdata	00000004 _impure_ptr
00018750 g     O .bss	00000004 alt_argc
00012f8c g     F .text	0000021c __sflush_r
00011afc g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
000135bc g     F .text	00000018 __fp_unlock_all
00016c78 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00011360 g     F .text	0000003c alt_up_accelerometer_spi_open_dev
00016cb0 g       *ABS*	00000000 _edata
000188a4 g       *ABS*	00000000 _end
00010248 g       *ABS*	00000000 __ram_exceptions_end
00010d40 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00014730 g     F .text	0000007c __swrite
00016ca8 g     O .rwdata	00000004 __malloc_trim_threshold
0001264c g     F .text	00000038 exit
00013acc g     F .text	000000c4 _fwalk_reent
00011644 g     F .text	000000cc alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00013598 g     F .text	00000004 __sfp_lock_release
00014b38 g     F .text	00000034 _exit
00011710 g     F .text	0000012c alt_alarm_start
000113e0 g     F .text	00000068 alt_up_accelerometer_spi_read
00011448 g     F .text	00000064 alt_up_accelerometer_spi_write
00013b90 g     F .text	000001bc __smakebuf_r
000129b0 g     F .text	00000098 strlen
00011fe0 g     F .text	00000154 open
000106fc g     F .text	0000003c alt_putchar
00011bec g     F .text	00000034 alt_icache_flush_all
00016c90 g     O .rwdata	00000004 alt_priority_mask
00016c94 g     O .rwdata	00000008 alt_alarm_list
00011a9c g     F .text	00000060 _do_ctors
00011878 g     F .text	000000d0 close
000103d0 g     F .text	00000084 alt_load
0001359c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__alt_data_end+0xffff0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08409214 	ori	at,at,584
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_onchip_memory-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d40 	call	101d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001526 	beq	r2,zero,10190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a1e904 	addi	r2,r2,-30812
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a1e904 	addi	r2,r2,-30812
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	e17ffd17 	ldw	r5,-12(fp)
   10174:	1009883a 	mov	r4,r2
   10178:	183ee83a 	callr	r3
#endif
        break;
   1017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10180:	0005313a 	rdctl	r2,ipending
   10184:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10188:	e0bfff17 	ldw	r2,-4(fp)
   1018c:	00000706 	br	101ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
   10190:	e0bffc17 	ldw	r2,-16(fp)
   10194:	1085883a 	add	r2,r2,r2
   10198:	e0bffc15 	stw	r2,-16(fp)
      i++;
   1019c:	e0bffd17 	ldw	r2,-12(fp)
   101a0:	10800044 	addi	r2,r2,1
   101a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a8:	003fe006 	br	1012c <__alt_data_end+0xffff012c>

    active = alt_irq_pending ();
   101ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101b0:	e0bffb17 	ldw	r2,-20(fp)
   101b4:	103fda1e 	bne	r2,zero,10120 <__alt_data_end+0xffff0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b8:	0001883a 	nop
}
   101bc:	0001883a 	nop
   101c0:	e037883a 	mov	sp,fp
   101c4:	dfc00117 	ldw	ra,4(sp)
   101c8:	df000017 	ldw	fp,0(sp)
   101cc:	dec00204 	addi	sp,sp,8
   101d0:	f800283a 	ret

000101d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d4:	defffb04 	addi	sp,sp,-20
   101d8:	dfc00415 	stw	ra,16(sp)
   101dc:	df000315 	stw	fp,12(sp)
   101e0:	df000304 	addi	fp,sp,12
   101e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   101e8:	000531fa 	rdctl	r2,exception
   101ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   101f0:	e0bffd17 	ldw	r2,-12(fp)
   101f4:	10801f0c 	andi	r2,r2,124
   101f8:	1004d0ba 	srli	r2,r2,2
   101fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   10200:	0005333a 	rdctl	r2,badaddr
   10204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   10208:	d0a6bc17 	ldw	r2,-25872(gp)
   1020c:	10000726 	beq	r2,zero,1022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10210:	d0a6bc17 	ldw	r2,-25872(gp)
   10214:	e0fffd17 	ldw	r3,-12(fp)
   10218:	e1bffe17 	ldw	r6,-8(fp)
   1021c:	e17fff17 	ldw	r5,-4(fp)
   10220:	1809883a 	mov	r4,r3
   10224:	103ee83a 	callr	r2
   10228:	00000206 	br	10234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   1022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10230:	0005883a 	mov	r2,zero
}
   10234:	e037883a 	mov	sp,fp
   10238:	dfc00117 	ldw	ra,4(sp)
   1023c:	df000017 	ldw	fp,0(sp)
   10240:	dec00204 	addi	sp,sp,8
   10244:	f800283a 	ret

Disassembly of section .text:

00010248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   10248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   1024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   10250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   10254:	00bffd16 	blt	zero,r2,1024c <__alt_data_end+0xffff024c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10258:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   1025c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10260:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10264:	d6bb1e14 	ori	gp,gp,60536
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10268:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   1026c:	10a1d214 	ori	r2,r2,34632

    movhi r3, %hi(__bss_end)
   10270:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10274:	18e22914 	ori	r3,r3,34980

    beq r2, r3, 1f
   10278:	10c00326 	beq	r2,r3,10288 <_start+0x40>

0:
    stw zero, (r2)
   1027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10284:	10fffd36 	bltu	r2,r3,1027c <__alt_data_end+0xffff027c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10288:	00103d00 	call	103d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   1028c:	00104540 	call	10454 <alt_main>

00010290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10290:	003fff06 	br	10290 <__alt_data_end+0xffff0290>

00010294 <led_write>:
#include <pthread.h>

alt_u8 led;
int level;

void led_write(alt_u8 led_pattern) {
   10294:	defffe04 	addi	sp,sp,-8
   10298:	df000115 	stw	fp,4(sp)
   1029c:	df000104 	addi	fp,sp,4
   102a0:	2005883a 	mov	r2,r4
   102a4:	e0bfff05 	stb	r2,-4(fp)
    IOWR(LED_BASE, 0, led_pattern);
   102a8:	e0ffff03 	ldbu	r3,-4(fp)
   102ac:	008000b4 	movhi	r2,2
   102b0:	10842804 	addi	r2,r2,4256
   102b4:	10c00035 	stwio	r3,0(r2)
}
   102b8:	0001883a 	nop
   102bc:	e037883a 	mov	sp,fp
   102c0:	df000017 	ldw	fp,0(sp)
   102c4:	dec00104 	addi	sp,sp,4
   102c8:	f800283a 	ret

000102cc <main>:

int main() {
   102cc:	defffa04 	addi	sp,sp,-24
   102d0:	dfc00515 	stw	ra,20(sp)
   102d4:	df000415 	stw	fp,16(sp)
   102d8:	df000404 	addi	fp,sp,16
    alt_32 x_read;
    alt_32 y_read;
    alt_32 z_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   102dc:	01000074 	movhi	r4,1
   102e0:	21146b04 	addi	r4,r4,20908
   102e4:	00113600 	call	11360 <alt_up_accelerometer_spi_open_dev>
   102e8:	e0bffc15 	stw	r2,-16(fp)
    if (acc_dev == NULL) {
   102ec:	e0bffc17 	ldw	r2,-16(fp)
   102f0:	1000021e 	bne	r2,zero,102fc <main+0x30>
    	// if return 1, check if the spi ip name is "accelerometer_spi"
        return 1;
   102f4:	00800044 	movi	r2,1
   102f8:	00001606 	br	10354 <main+0x88>
    }

    while (1) {
    	//Obtain values
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   102fc:	e0bffd04 	addi	r2,fp,-12
   10300:	100b883a 	mov	r5,r2
   10304:	e13ffc17 	ldw	r4,-16(fp)
   10308:	00114ac0 	call	114ac <alt_up_accelerometer_spi_read_x_axis>
        alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
   1030c:	e0bffe04 	addi	r2,fp,-8
   10310:	100b883a 	mov	r5,r2
   10314:	e13ffc17 	ldw	r4,-16(fp)
   10318:	00115780 	call	11578 <alt_up_accelerometer_spi_read_y_axis>
        alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);
   1031c:	e0bfff04 	addi	r2,fp,-4
   10320:	100b883a 	mov	r5,r2
   10324:	e13ffc17 	ldw	r4,-16(fp)
   10328:	00116440 	call	11644 <alt_up_accelerometer_spi_read_z_axis>
        alt_printf("%x %x %x\n", x_read, y_read, z_read);
   1032c:	e0bffd17 	ldw	r2,-12(fp)
   10330:	e0fffe17 	ldw	r3,-8(fp)
   10334:	e13fff17 	ldw	r4,-4(fp)
   10338:	200f883a 	mov	r7,r4
   1033c:	180d883a 	mov	r6,r3
   10340:	100b883a 	mov	r5,r2
   10344:	01000074 	movhi	r4,1
   10348:	21147104 	addi	r4,r4,20932
   1034c:	00104d00 	call	104d0 <alt_printf>
    }
   10350:	003fea06 	br	102fc <__alt_data_end+0xffff02fc>

    return 0;
}
   10354:	e037883a 	mov	sp,fp
   10358:	dfc00117 	ldw	ra,4(sp)
   1035c:	df000017 	ldw	fp,0(sp)
   10360:	dec00204 	addi	sp,sp,8
   10364:	f800283a 	ret

00010368 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10368:	defffc04 	addi	sp,sp,-16
   1036c:	df000315 	stw	fp,12(sp)
   10370:	df000304 	addi	fp,sp,12
   10374:	e13ffd15 	stw	r4,-12(fp)
   10378:	e17ffe15 	stw	r5,-8(fp)
   1037c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10380:	e0fffe17 	ldw	r3,-8(fp)
   10384:	e0bffd17 	ldw	r2,-12(fp)
   10388:	18800c26 	beq	r3,r2,103bc <alt_load_section+0x54>
  {
    while( to != end )
   1038c:	00000806 	br	103b0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   10390:	e0bffe17 	ldw	r2,-8(fp)
   10394:	10c00104 	addi	r3,r2,4
   10398:	e0fffe15 	stw	r3,-8(fp)
   1039c:	e0fffd17 	ldw	r3,-12(fp)
   103a0:	19000104 	addi	r4,r3,4
   103a4:	e13ffd15 	stw	r4,-12(fp)
   103a8:	18c00017 	ldw	r3,0(r3)
   103ac:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   103b0:	e0fffe17 	ldw	r3,-8(fp)
   103b4:	e0bfff17 	ldw	r2,-4(fp)
   103b8:	18bff51e 	bne	r3,r2,10390 <__alt_data_end+0xffff0390>
    {
      *to++ = *from++;
    }
  }
}
   103bc:	0001883a 	nop
   103c0:	e037883a 	mov	sp,fp
   103c4:	df000017 	ldw	fp,0(sp)
   103c8:	dec00104 	addi	sp,sp,4
   103cc:	f800283a 	ret

000103d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   103d0:	defffe04 	addi	sp,sp,-8
   103d4:	dfc00115 	stw	ra,4(sp)
   103d8:	df000015 	stw	fp,0(sp)
   103dc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   103e0:	01800074 	movhi	r6,1
   103e4:	319b2c04 	addi	r6,r6,27824
   103e8:	01400074 	movhi	r5,1
   103ec:	29548604 	addi	r5,r5,21016
   103f0:	01000074 	movhi	r4,1
   103f4:	211b2c04 	addi	r4,r4,27824
   103f8:	00103680 	call	10368 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   103fc:	01800074 	movhi	r6,1
   10400:	31809204 	addi	r6,r6,584
   10404:	01400074 	movhi	r5,1
   10408:	29400804 	addi	r5,r5,32
   1040c:	01000074 	movhi	r4,1
   10410:	21000804 	addi	r4,r4,32
   10414:	00103680 	call	10368 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10418:	01800074 	movhi	r6,1
   1041c:	31948604 	addi	r6,r6,21016
   10420:	01400074 	movhi	r5,1
   10424:	29546b04 	addi	r5,r5,20908
   10428:	01000074 	movhi	r4,1
   1042c:	21146b04 	addi	r4,r4,20908
   10430:	00103680 	call	10368 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10434:	00119480 	call	11948 <alt_dcache_flush_all>
  alt_icache_flush_all();
   10438:	0011bec0 	call	11bec <alt_icache_flush_all>
}
   1043c:	0001883a 	nop
   10440:	e037883a 	mov	sp,fp
   10444:	dfc00117 	ldw	ra,4(sp)
   10448:	df000017 	ldw	fp,0(sp)
   1044c:	dec00204 	addi	sp,sp,8
   10450:	f800283a 	ret

00010454 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10454:	defffd04 	addi	sp,sp,-12
   10458:	dfc00215 	stw	ra,8(sp)
   1045c:	df000115 	stw	fp,4(sp)
   10460:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10464:	0009883a 	mov	r4,zero
   10468:	001076c0 	call	1076c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1046c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10470:	00107a40 	call	107a4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10474:	01800074 	movhi	r6,1
   10478:	31947404 	addi	r6,r6,20944
   1047c:	01400074 	movhi	r5,1
   10480:	29547404 	addi	r5,r5,20944
   10484:	01000074 	movhi	r4,1
   10488:	21147404 	addi	r4,r4,20944
   1048c:	0011ce40 	call	11ce4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   10490:	0011a9c0 	call	11a9c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   10494:	01000074 	movhi	r4,1
   10498:	2106bf04 	addi	r4,r4,6908
   1049c:	00126380 	call	12638 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   104a0:	d0a6b617 	ldw	r2,-25896(gp)
   104a4:	d0e6b717 	ldw	r3,-25892(gp)
   104a8:	d126b817 	ldw	r4,-25888(gp)
   104ac:	200d883a 	mov	r6,r4
   104b0:	180b883a 	mov	r5,r3
   104b4:	1009883a 	mov	r4,r2
   104b8:	00102cc0 	call	102cc <main>
   104bc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   104c0:	01000044 	movi	r4,1
   104c4:	00118780 	call	11878 <close>
  exit (result);
   104c8:	e13fff17 	ldw	r4,-4(fp)
   104cc:	001264c0 	call	1264c <exit>

000104d0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   104d0:	defff204 	addi	sp,sp,-56
   104d4:	dfc00a15 	stw	ra,40(sp)
   104d8:	df000915 	stw	fp,36(sp)
   104dc:	df000904 	addi	fp,sp,36
   104e0:	e13fff15 	stw	r4,-4(fp)
   104e4:	e1400215 	stw	r5,8(fp)
   104e8:	e1800315 	stw	r6,12(fp)
   104ec:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   104f0:	e0800204 	addi	r2,fp,8
   104f4:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   104f8:	e0bfff17 	ldw	r2,-4(fp)
   104fc:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   10500:	00006f06 	br	106c0 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   10504:	e0bff807 	ldb	r2,-32(fp)
   10508:	10800960 	cmpeqi	r2,r2,37
   1050c:	1000041e 	bne	r2,zero,10520 <alt_printf+0x50>
        {
            alt_putchar(c);
   10510:	e0bff807 	ldb	r2,-32(fp)
   10514:	1009883a 	mov	r4,r2
   10518:	00106fc0 	call	106fc <alt_putchar>
   1051c:	00006806 	br	106c0 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   10520:	e0bff717 	ldw	r2,-36(fp)
   10524:	10c00044 	addi	r3,r2,1
   10528:	e0fff715 	stw	r3,-36(fp)
   1052c:	10800003 	ldbu	r2,0(r2)
   10530:	e0bff805 	stb	r2,-32(fp)
   10534:	e0bff807 	ldb	r2,-32(fp)
   10538:	10006926 	beq	r2,zero,106e0 <alt_printf+0x210>
            {
                if (c == '%')
   1053c:	e0bff807 	ldb	r2,-32(fp)
   10540:	10800958 	cmpnei	r2,r2,37
   10544:	1000041e 	bne	r2,zero,10558 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   10548:	e0bff807 	ldb	r2,-32(fp)
   1054c:	1009883a 	mov	r4,r2
   10550:	00106fc0 	call	106fc <alt_putchar>
   10554:	00005a06 	br	106c0 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   10558:	e0bff807 	ldb	r2,-32(fp)
   1055c:	108018d8 	cmpnei	r2,r2,99
   10560:	1000081e 	bne	r2,zero,10584 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   10564:	e0bffe17 	ldw	r2,-8(fp)
   10568:	10c00104 	addi	r3,r2,4
   1056c:	e0fffe15 	stw	r3,-8(fp)
   10570:	10800017 	ldw	r2,0(r2)
   10574:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   10578:	e13ffd17 	ldw	r4,-12(fp)
   1057c:	00106fc0 	call	106fc <alt_putchar>
   10580:	00004f06 	br	106c0 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   10584:	e0bff807 	ldb	r2,-32(fp)
   10588:	10801e18 	cmpnei	r2,r2,120
   1058c:	1000341e 	bne	r2,zero,10660 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   10590:	e0bffe17 	ldw	r2,-8(fp)
   10594:	10c00104 	addi	r3,r2,4
   10598:	e0fffe15 	stw	r3,-8(fp)
   1059c:	10800017 	ldw	r2,0(r2)
   105a0:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   105a4:	e0bffb17 	ldw	r2,-20(fp)
   105a8:	1000031e 	bne	r2,zero,105b8 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   105ac:	01000c04 	movi	r4,48
   105b0:	00106fc0 	call	106fc <alt_putchar>
                        continue;
   105b4:	00004206 	br	106c0 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   105b8:	00800704 	movi	r2,28
   105bc:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   105c0:	00000306 	br	105d0 <alt_printf+0x100>
                        digit_shift -= 4;
   105c4:	e0bff917 	ldw	r2,-28(fp)
   105c8:	10bfff04 	addi	r2,r2,-4
   105cc:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   105d0:	00c003c4 	movi	r3,15
   105d4:	e0bff917 	ldw	r2,-28(fp)
   105d8:	1884983a 	sll	r2,r3,r2
   105dc:	1007883a 	mov	r3,r2
   105e0:	e0bffb17 	ldw	r2,-20(fp)
   105e4:	1884703a 	and	r2,r3,r2
   105e8:	103ff626 	beq	r2,zero,105c4 <__alt_data_end+0xffff05c4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   105ec:	00001906 	br	10654 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   105f0:	00c003c4 	movi	r3,15
   105f4:	e0bff917 	ldw	r2,-28(fp)
   105f8:	1884983a 	sll	r2,r3,r2
   105fc:	1007883a 	mov	r3,r2
   10600:	e0bffb17 	ldw	r2,-20(fp)
   10604:	1886703a 	and	r3,r3,r2
   10608:	e0bff917 	ldw	r2,-28(fp)
   1060c:	1884d83a 	srl	r2,r3,r2
   10610:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   10614:	e0bffc17 	ldw	r2,-16(fp)
   10618:	108002a8 	cmpgeui	r2,r2,10
   1061c:	1000041e 	bne	r2,zero,10630 <alt_printf+0x160>
                            c = '0' + digit;
   10620:	e0bffc17 	ldw	r2,-16(fp)
   10624:	10800c04 	addi	r2,r2,48
   10628:	e0bff805 	stb	r2,-32(fp)
   1062c:	00000306 	br	1063c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   10630:	e0bffc17 	ldw	r2,-16(fp)
   10634:	108015c4 	addi	r2,r2,87
   10638:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   1063c:	e0bff807 	ldb	r2,-32(fp)
   10640:	1009883a 	mov	r4,r2
   10644:	00106fc0 	call	106fc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   10648:	e0bff917 	ldw	r2,-28(fp)
   1064c:	10bfff04 	addi	r2,r2,-4
   10650:	e0bff915 	stw	r2,-28(fp)
   10654:	e0bff917 	ldw	r2,-28(fp)
   10658:	103fe50e 	bge	r2,zero,105f0 <__alt_data_end+0xffff05f0>
   1065c:	00001806 	br	106c0 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   10660:	e0bff807 	ldb	r2,-32(fp)
   10664:	10801cd8 	cmpnei	r2,r2,115
   10668:	1000151e 	bne	r2,zero,106c0 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   1066c:	e0bffe17 	ldw	r2,-8(fp)
   10670:	10c00104 	addi	r3,r2,4
   10674:	e0fffe15 	stw	r3,-8(fp)
   10678:	10800017 	ldw	r2,0(r2)
   1067c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   10680:	00000906 	br	106a8 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   10684:	e0bffa17 	ldw	r2,-24(fp)
   10688:	10c00044 	addi	r3,r2,1
   1068c:	e0fffa15 	stw	r3,-24(fp)
   10690:	10800003 	ldbu	r2,0(r2)
   10694:	10803fcc 	andi	r2,r2,255
   10698:	1080201c 	xori	r2,r2,128
   1069c:	10bfe004 	addi	r2,r2,-128
   106a0:	1009883a 	mov	r4,r2
   106a4:	00106fc0 	call	106fc <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   106a8:	e0bffa17 	ldw	r2,-24(fp)
   106ac:	10800003 	ldbu	r2,0(r2)
   106b0:	10803fcc 	andi	r2,r2,255
   106b4:	1080201c 	xori	r2,r2,128
   106b8:	10bfe004 	addi	r2,r2,-128
   106bc:	103ff11e 	bne	r2,zero,10684 <__alt_data_end+0xffff0684>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   106c0:	e0bff717 	ldw	r2,-36(fp)
   106c4:	10c00044 	addi	r3,r2,1
   106c8:	e0fff715 	stw	r3,-36(fp)
   106cc:	10800003 	ldbu	r2,0(r2)
   106d0:	e0bff805 	stb	r2,-32(fp)
   106d4:	e0bff807 	ldb	r2,-32(fp)
   106d8:	103f8a1e 	bne	r2,zero,10504 <__alt_data_end+0xffff0504>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   106dc:	00000106 	br	106e4 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   106e0:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   106e4:	0001883a 	nop
   106e8:	e037883a 	mov	sp,fp
   106ec:	dfc00117 	ldw	ra,4(sp)
   106f0:	df000017 	ldw	fp,0(sp)
   106f4:	dec00504 	addi	sp,sp,20
   106f8:	f800283a 	ret

000106fc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   106fc:	defffd04 	addi	sp,sp,-12
   10700:	dfc00215 	stw	ra,8(sp)
   10704:	df000115 	stw	fp,4(sp)
   10708:	df000104 	addi	fp,sp,4
   1070c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   10710:	d0a00a17 	ldw	r2,-32728(gp)
   10714:	10800217 	ldw	r2,8(r2)
   10718:	100b883a 	mov	r5,r2
   1071c:	e13fff17 	ldw	r4,-4(fp)
   10720:	00128e80 	call	128e8 <putc>
#endif
#endif
}
   10724:	e037883a 	mov	sp,fp
   10728:	dfc00117 	ldw	ra,4(sp)
   1072c:	df000017 	ldw	fp,0(sp)
   10730:	dec00204 	addi	sp,sp,8
   10734:	f800283a 	ret

00010738 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10738:	defffd04 	addi	sp,sp,-12
   1073c:	dfc00215 	stw	ra,8(sp)
   10740:	df000115 	stw	fp,4(sp)
   10744:	df000104 	addi	fp,sp,4
   10748:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1074c:	d1600204 	addi	r5,gp,-32760
   10750:	e13fff17 	ldw	r4,-4(fp)
   10754:	00119f80 	call	119f8 <alt_dev_llist_insert>
}
   10758:	e037883a 	mov	sp,fp
   1075c:	dfc00117 	ldw	ra,4(sp)
   10760:	df000017 	ldw	fp,0(sp)
   10764:	dec00204 	addi	sp,sp,8
   10768:	f800283a 	ret

0001076c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1076c:	defffd04 	addi	sp,sp,-12
   10770:	dfc00215 	stw	ra,8(sp)
   10774:	df000115 	stw	fp,4(sp)
   10778:	df000104 	addi	fp,sp,4
   1077c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   10780:	001233c0 	call	1233c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10784:	00800044 	movi	r2,1
   10788:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1078c:	0001883a 	nop
   10790:	e037883a 	mov	sp,fp
   10794:	dfc00117 	ldw	ra,4(sp)
   10798:	df000017 	ldw	fp,0(sp)
   1079c:	dec00204 	addi	sp,sp,8
   107a0:	f800283a 	ret

000107a4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   107a4:	defffe04 	addi	sp,sp,-8
   107a8:	dfc00115 	stw	ra,4(sp)
   107ac:	df000015 	stw	fp,0(sp)
   107b0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   107b4:	01c0fa04 	movi	r7,1000
   107b8:	01800084 	movi	r6,2
   107bc:	000b883a 	mov	r5,zero
   107c0:	010000b4 	movhi	r4,2
   107c4:	21040004 	addi	r4,r4,4096
   107c8:	00112ec0 	call	112ec <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   107cc:	000d883a 	mov	r6,zero
   107d0:	000b883a 	mov	r5,zero
   107d4:	01000074 	movhi	r4,1
   107d8:	21149004 	addi	r4,r4,21056
   107dc:	00109740 	call	10974 <altera_avalon_jtag_uart_init>
   107e0:	01000074 	movhi	r4,1
   107e4:	21148604 	addi	r4,r4,21016
   107e8:	00107380 	call	10738 <alt_dev_reg>
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
   107ec:	01000074 	movhi	r4,1
   107f0:	21189e04 	addi	r4,r4,25208
   107f4:	00107380 	call	10738 <alt_dev_reg>
}
   107f8:	0001883a 	nop
   107fc:	e037883a 	mov	sp,fp
   10800:	dfc00117 	ldw	ra,4(sp)
   10804:	df000017 	ldw	fp,0(sp)
   10808:	dec00204 	addi	sp,sp,8
   1080c:	f800283a 	ret

00010810 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   10810:	defffa04 	addi	sp,sp,-24
   10814:	dfc00515 	stw	ra,20(sp)
   10818:	df000415 	stw	fp,16(sp)
   1081c:	df000404 	addi	fp,sp,16
   10820:	e13ffd15 	stw	r4,-12(fp)
   10824:	e17ffe15 	stw	r5,-8(fp)
   10828:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1082c:	e0bffd17 	ldw	r2,-12(fp)
   10830:	10800017 	ldw	r2,0(r2)
   10834:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10838:	e0bffc17 	ldw	r2,-16(fp)
   1083c:	10c00a04 	addi	r3,r2,40
   10840:	e0bffd17 	ldw	r2,-12(fp)
   10844:	10800217 	ldw	r2,8(r2)
   10848:	100f883a 	mov	r7,r2
   1084c:	e1bfff17 	ldw	r6,-4(fp)
   10850:	e17ffe17 	ldw	r5,-8(fp)
   10854:	1809883a 	mov	r4,r3
   10858:	0010e300 	call	10e30 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1085c:	e037883a 	mov	sp,fp
   10860:	dfc00117 	ldw	ra,4(sp)
   10864:	df000017 	ldw	fp,0(sp)
   10868:	dec00204 	addi	sp,sp,8
   1086c:	f800283a 	ret

00010870 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10870:	defffa04 	addi	sp,sp,-24
   10874:	dfc00515 	stw	ra,20(sp)
   10878:	df000415 	stw	fp,16(sp)
   1087c:	df000404 	addi	fp,sp,16
   10880:	e13ffd15 	stw	r4,-12(fp)
   10884:	e17ffe15 	stw	r5,-8(fp)
   10888:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1088c:	e0bffd17 	ldw	r2,-12(fp)
   10890:	10800017 	ldw	r2,0(r2)
   10894:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10898:	e0bffc17 	ldw	r2,-16(fp)
   1089c:	10c00a04 	addi	r3,r2,40
   108a0:	e0bffd17 	ldw	r2,-12(fp)
   108a4:	10800217 	ldw	r2,8(r2)
   108a8:	100f883a 	mov	r7,r2
   108ac:	e1bfff17 	ldw	r6,-4(fp)
   108b0:	e17ffe17 	ldw	r5,-8(fp)
   108b4:	1809883a 	mov	r4,r3
   108b8:	001104c0 	call	1104c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   108bc:	e037883a 	mov	sp,fp
   108c0:	dfc00117 	ldw	ra,4(sp)
   108c4:	df000017 	ldw	fp,0(sp)
   108c8:	dec00204 	addi	sp,sp,8
   108cc:	f800283a 	ret

000108d0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   108d0:	defffc04 	addi	sp,sp,-16
   108d4:	dfc00315 	stw	ra,12(sp)
   108d8:	df000215 	stw	fp,8(sp)
   108dc:	df000204 	addi	fp,sp,8
   108e0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   108e4:	e0bfff17 	ldw	r2,-4(fp)
   108e8:	10800017 	ldw	r2,0(r2)
   108ec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   108f0:	e0bffe17 	ldw	r2,-8(fp)
   108f4:	10c00a04 	addi	r3,r2,40
   108f8:	e0bfff17 	ldw	r2,-4(fp)
   108fc:	10800217 	ldw	r2,8(r2)
   10900:	100b883a 	mov	r5,r2
   10904:	1809883a 	mov	r4,r3
   10908:	0010cd80 	call	10cd8 <altera_avalon_jtag_uart_close>
}
   1090c:	e037883a 	mov	sp,fp
   10910:	dfc00117 	ldw	ra,4(sp)
   10914:	df000017 	ldw	fp,0(sp)
   10918:	dec00204 	addi	sp,sp,8
   1091c:	f800283a 	ret

00010920 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   10920:	defffa04 	addi	sp,sp,-24
   10924:	dfc00515 	stw	ra,20(sp)
   10928:	df000415 	stw	fp,16(sp)
   1092c:	df000404 	addi	fp,sp,16
   10930:	e13ffd15 	stw	r4,-12(fp)
   10934:	e17ffe15 	stw	r5,-8(fp)
   10938:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1093c:	e0bffd17 	ldw	r2,-12(fp)
   10940:	10800017 	ldw	r2,0(r2)
   10944:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   10948:	e0bffc17 	ldw	r2,-16(fp)
   1094c:	10800a04 	addi	r2,r2,40
   10950:	e1bfff17 	ldw	r6,-4(fp)
   10954:	e17ffe17 	ldw	r5,-8(fp)
   10958:	1009883a 	mov	r4,r2
   1095c:	0010d400 	call	10d40 <altera_avalon_jtag_uart_ioctl>
}
   10960:	e037883a 	mov	sp,fp
   10964:	dfc00117 	ldw	ra,4(sp)
   10968:	df000017 	ldw	fp,0(sp)
   1096c:	dec00204 	addi	sp,sp,8
   10970:	f800283a 	ret

00010974 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   10974:	defffb04 	addi	sp,sp,-20
   10978:	dfc00415 	stw	ra,16(sp)
   1097c:	df000315 	stw	fp,12(sp)
   10980:	df000304 	addi	fp,sp,12
   10984:	e13ffd15 	stw	r4,-12(fp)
   10988:	e17ffe15 	stw	r5,-8(fp)
   1098c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10990:	e0bffd17 	ldw	r2,-12(fp)
   10994:	00c00044 	movi	r3,1
   10998:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1099c:	e0bffd17 	ldw	r2,-12(fp)
   109a0:	10800017 	ldw	r2,0(r2)
   109a4:	10800104 	addi	r2,r2,4
   109a8:	1007883a 	mov	r3,r2
   109ac:	e0bffd17 	ldw	r2,-12(fp)
   109b0:	10800817 	ldw	r2,32(r2)
   109b4:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   109b8:	e0bfff17 	ldw	r2,-4(fp)
   109bc:	01800074 	movhi	r6,1
   109c0:	31828a04 	addi	r6,r6,2600
   109c4:	e17ffd17 	ldw	r5,-12(fp)
   109c8:	1009883a 	mov	r4,r2
   109cc:	0011d600 	call	11d60 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   109d0:	e0bffd17 	ldw	r2,-12(fp)
   109d4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   109d8:	e0bffd17 	ldw	r2,-12(fp)
   109dc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   109e0:	d0e6ba17 	ldw	r3,-25880(gp)
   109e4:	e1fffd17 	ldw	r7,-12(fp)
   109e8:	01800074 	movhi	r6,1
   109ec:	31830e04 	addi	r6,r6,3128
   109f0:	180b883a 	mov	r5,r3
   109f4:	1009883a 	mov	r4,r2
   109f8:	00117100 	call	11710 <alt_alarm_start>
   109fc:	1000040e 	bge	r2,zero,10a10 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   10a00:	e0fffd17 	ldw	r3,-12(fp)
   10a04:	00a00034 	movhi	r2,32768
   10a08:	10bfffc4 	addi	r2,r2,-1
   10a0c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   10a10:	0001883a 	nop
   10a14:	e037883a 	mov	sp,fp
   10a18:	dfc00117 	ldw	ra,4(sp)
   10a1c:	df000017 	ldw	fp,0(sp)
   10a20:	dec00204 	addi	sp,sp,8
   10a24:	f800283a 	ret

00010a28 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   10a28:	defff704 	addi	sp,sp,-36
   10a2c:	df000815 	stw	fp,32(sp)
   10a30:	df000804 	addi	fp,sp,32
   10a34:	e13ffe15 	stw	r4,-8(fp)
   10a38:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   10a3c:	e0bffe17 	ldw	r2,-8(fp)
   10a40:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   10a44:	e0bffa17 	ldw	r2,-24(fp)
   10a48:	10800017 	ldw	r2,0(r2)
   10a4c:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10a50:	e0bffb17 	ldw	r2,-20(fp)
   10a54:	10800104 	addi	r2,r2,4
   10a58:	10800037 	ldwio	r2,0(r2)
   10a5c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10a60:	e0bffc17 	ldw	r2,-16(fp)
   10a64:	1080c00c 	andi	r2,r2,768
   10a68:	10006d26 	beq	r2,zero,10c20 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10a6c:	e0bffc17 	ldw	r2,-16(fp)
   10a70:	1080400c 	andi	r2,r2,256
   10a74:	10003526 	beq	r2,zero,10b4c <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   10a78:	00800074 	movhi	r2,1
   10a7c:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10a80:	e0bffa17 	ldw	r2,-24(fp)
   10a84:	10800a17 	ldw	r2,40(r2)
   10a88:	10800044 	addi	r2,r2,1
   10a8c:	1081ffcc 	andi	r2,r2,2047
   10a90:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   10a94:	e0bffa17 	ldw	r2,-24(fp)
   10a98:	10c00b17 	ldw	r3,44(r2)
   10a9c:	e0bffd17 	ldw	r2,-12(fp)
   10aa0:	18801526 	beq	r3,r2,10af8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10aa4:	e0bffb17 	ldw	r2,-20(fp)
   10aa8:	10800037 	ldwio	r2,0(r2)
   10aac:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   10ab0:	e0bff817 	ldw	r2,-32(fp)
   10ab4:	10a0000c 	andi	r2,r2,32768
   10ab8:	10001126 	beq	r2,zero,10b00 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   10abc:	e0bffa17 	ldw	r2,-24(fp)
   10ac0:	10800a17 	ldw	r2,40(r2)
   10ac4:	e0fff817 	ldw	r3,-32(fp)
   10ac8:	1809883a 	mov	r4,r3
   10acc:	e0fffa17 	ldw	r3,-24(fp)
   10ad0:	1885883a 	add	r2,r3,r2
   10ad4:	10800e04 	addi	r2,r2,56
   10ad8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10adc:	e0bffa17 	ldw	r2,-24(fp)
   10ae0:	10800a17 	ldw	r2,40(r2)
   10ae4:	10800044 	addi	r2,r2,1
   10ae8:	10c1ffcc 	andi	r3,r2,2047
   10aec:	e0bffa17 	ldw	r2,-24(fp)
   10af0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   10af4:	003fe206 	br	10a80 <__alt_data_end+0xffff0a80>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   10af8:	0001883a 	nop
   10afc:	00000106 	br	10b04 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   10b00:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   10b04:	e0bff817 	ldw	r2,-32(fp)
   10b08:	10bfffec 	andhi	r2,r2,65535
   10b0c:	10000f26 	beq	r2,zero,10b4c <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10b10:	e0bffa17 	ldw	r2,-24(fp)
   10b14:	10c00817 	ldw	r3,32(r2)
   10b18:	00bfff84 	movi	r2,-2
   10b1c:	1886703a 	and	r3,r3,r2
   10b20:	e0bffa17 	ldw	r2,-24(fp)
   10b24:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10b28:	e0bffb17 	ldw	r2,-20(fp)
   10b2c:	10800104 	addi	r2,r2,4
   10b30:	1007883a 	mov	r3,r2
   10b34:	e0bffa17 	ldw	r2,-24(fp)
   10b38:	10800817 	ldw	r2,32(r2)
   10b3c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10b40:	e0bffb17 	ldw	r2,-20(fp)
   10b44:	10800104 	addi	r2,r2,4
   10b48:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10b4c:	e0bffc17 	ldw	r2,-16(fp)
   10b50:	1080800c 	andi	r2,r2,512
   10b54:	103fbe26 	beq	r2,zero,10a50 <__alt_data_end+0xffff0a50>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10b58:	e0bffc17 	ldw	r2,-16(fp)
   10b5c:	1004d43a 	srli	r2,r2,16
   10b60:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   10b64:	00001406 	br	10bb8 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10b68:	e0bffb17 	ldw	r2,-20(fp)
   10b6c:	e0fffa17 	ldw	r3,-24(fp)
   10b70:	18c00d17 	ldw	r3,52(r3)
   10b74:	e13ffa17 	ldw	r4,-24(fp)
   10b78:	20c7883a 	add	r3,r4,r3
   10b7c:	18c20e04 	addi	r3,r3,2104
   10b80:	18c00003 	ldbu	r3,0(r3)
   10b84:	18c03fcc 	andi	r3,r3,255
   10b88:	18c0201c 	xori	r3,r3,128
   10b8c:	18ffe004 	addi	r3,r3,-128
   10b90:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10b94:	e0bffa17 	ldw	r2,-24(fp)
   10b98:	10800d17 	ldw	r2,52(r2)
   10b9c:	10800044 	addi	r2,r2,1
   10ba0:	10c1ffcc 	andi	r3,r2,2047
   10ba4:	e0bffa17 	ldw	r2,-24(fp)
   10ba8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   10bac:	e0bff917 	ldw	r2,-28(fp)
   10bb0:	10bfffc4 	addi	r2,r2,-1
   10bb4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   10bb8:	e0bff917 	ldw	r2,-28(fp)
   10bbc:	10000526 	beq	r2,zero,10bd4 <altera_avalon_jtag_uart_irq+0x1ac>
   10bc0:	e0bffa17 	ldw	r2,-24(fp)
   10bc4:	10c00d17 	ldw	r3,52(r2)
   10bc8:	e0bffa17 	ldw	r2,-24(fp)
   10bcc:	10800c17 	ldw	r2,48(r2)
   10bd0:	18bfe51e 	bne	r3,r2,10b68 <__alt_data_end+0xffff0b68>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   10bd4:	e0bff917 	ldw	r2,-28(fp)
   10bd8:	103f9d26 	beq	r2,zero,10a50 <__alt_data_end+0xffff0a50>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10bdc:	e0bffa17 	ldw	r2,-24(fp)
   10be0:	10c00817 	ldw	r3,32(r2)
   10be4:	00bfff44 	movi	r2,-3
   10be8:	1886703a 	and	r3,r3,r2
   10bec:	e0bffa17 	ldw	r2,-24(fp)
   10bf0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10bf4:	e0bffa17 	ldw	r2,-24(fp)
   10bf8:	10800017 	ldw	r2,0(r2)
   10bfc:	10800104 	addi	r2,r2,4
   10c00:	1007883a 	mov	r3,r2
   10c04:	e0bffa17 	ldw	r2,-24(fp)
   10c08:	10800817 	ldw	r2,32(r2)
   10c0c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10c10:	e0bffb17 	ldw	r2,-20(fp)
   10c14:	10800104 	addi	r2,r2,4
   10c18:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   10c1c:	003f8c06 	br	10a50 <__alt_data_end+0xffff0a50>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   10c20:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   10c24:	0001883a 	nop
   10c28:	e037883a 	mov	sp,fp
   10c2c:	df000017 	ldw	fp,0(sp)
   10c30:	dec00104 	addi	sp,sp,4
   10c34:	f800283a 	ret

00010c38 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10c38:	defff804 	addi	sp,sp,-32
   10c3c:	df000715 	stw	fp,28(sp)
   10c40:	df000704 	addi	fp,sp,28
   10c44:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   10c48:	e0bffb17 	ldw	r2,-20(fp)
   10c4c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   10c50:	e0bff917 	ldw	r2,-28(fp)
   10c54:	10800017 	ldw	r2,0(r2)
   10c58:	10800104 	addi	r2,r2,4
   10c5c:	10800037 	ldwio	r2,0(r2)
   10c60:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   10c64:	e0bffa17 	ldw	r2,-24(fp)
   10c68:	1081000c 	andi	r2,r2,1024
   10c6c:	10000b26 	beq	r2,zero,10c9c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   10c70:	e0bff917 	ldw	r2,-28(fp)
   10c74:	10800017 	ldw	r2,0(r2)
   10c78:	10800104 	addi	r2,r2,4
   10c7c:	1007883a 	mov	r3,r2
   10c80:	e0bff917 	ldw	r2,-28(fp)
   10c84:	10800817 	ldw	r2,32(r2)
   10c88:	10810014 	ori	r2,r2,1024
   10c8c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   10c90:	e0bff917 	ldw	r2,-28(fp)
   10c94:	10000915 	stw	zero,36(r2)
   10c98:	00000a06 	br	10cc4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   10c9c:	e0bff917 	ldw	r2,-28(fp)
   10ca0:	10c00917 	ldw	r3,36(r2)
   10ca4:	00a00034 	movhi	r2,32768
   10ca8:	10bfff04 	addi	r2,r2,-4
   10cac:	10c00536 	bltu	r2,r3,10cc4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   10cb0:	e0bff917 	ldw	r2,-28(fp)
   10cb4:	10800917 	ldw	r2,36(r2)
   10cb8:	10c00044 	addi	r3,r2,1
   10cbc:	e0bff917 	ldw	r2,-28(fp)
   10cc0:	10c00915 	stw	r3,36(r2)
   10cc4:	d0a6ba17 	ldw	r2,-25880(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   10cc8:	e037883a 	mov	sp,fp
   10ccc:	df000017 	ldw	fp,0(sp)
   10cd0:	dec00104 	addi	sp,sp,4
   10cd4:	f800283a 	ret

00010cd8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   10cd8:	defffd04 	addi	sp,sp,-12
   10cdc:	df000215 	stw	fp,8(sp)
   10ce0:	df000204 	addi	fp,sp,8
   10ce4:	e13ffe15 	stw	r4,-8(fp)
   10ce8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10cec:	00000506 	br	10d04 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   10cf0:	e0bfff17 	ldw	r2,-4(fp)
   10cf4:	1090000c 	andi	r2,r2,16384
   10cf8:	10000226 	beq	r2,zero,10d04 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   10cfc:	00bffd44 	movi	r2,-11
   10d00:	00000b06 	br	10d30 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10d04:	e0bffe17 	ldw	r2,-8(fp)
   10d08:	10c00d17 	ldw	r3,52(r2)
   10d0c:	e0bffe17 	ldw	r2,-8(fp)
   10d10:	10800c17 	ldw	r2,48(r2)
   10d14:	18800526 	beq	r3,r2,10d2c <altera_avalon_jtag_uart_close+0x54>
   10d18:	e0bffe17 	ldw	r2,-8(fp)
   10d1c:	10c00917 	ldw	r3,36(r2)
   10d20:	e0bffe17 	ldw	r2,-8(fp)
   10d24:	10800117 	ldw	r2,4(r2)
   10d28:	18bff136 	bltu	r3,r2,10cf0 <__alt_data_end+0xffff0cf0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   10d2c:	0005883a 	mov	r2,zero
}
   10d30:	e037883a 	mov	sp,fp
   10d34:	df000017 	ldw	fp,0(sp)
   10d38:	dec00104 	addi	sp,sp,4
   10d3c:	f800283a 	ret

00010d40 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   10d40:	defffa04 	addi	sp,sp,-24
   10d44:	df000515 	stw	fp,20(sp)
   10d48:	df000504 	addi	fp,sp,20
   10d4c:	e13ffd15 	stw	r4,-12(fp)
   10d50:	e17ffe15 	stw	r5,-8(fp)
   10d54:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   10d58:	00bff9c4 	movi	r2,-25
   10d5c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   10d60:	e0bffe17 	ldw	r2,-8(fp)
   10d64:	10da8060 	cmpeqi	r3,r2,27137
   10d68:	1800031e 	bne	r3,zero,10d78 <altera_avalon_jtag_uart_ioctl+0x38>
   10d6c:	109a80a0 	cmpeqi	r2,r2,27138
   10d70:	1000181e 	bne	r2,zero,10dd4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   10d74:	00002906 	br	10e1c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   10d78:	e0bffd17 	ldw	r2,-12(fp)
   10d7c:	10c00117 	ldw	r3,4(r2)
   10d80:	00a00034 	movhi	r2,32768
   10d84:	10bfffc4 	addi	r2,r2,-1
   10d88:	18802126 	beq	r3,r2,10e10 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   10d8c:	e0bfff17 	ldw	r2,-4(fp)
   10d90:	10800017 	ldw	r2,0(r2)
   10d94:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   10d98:	e0bffc17 	ldw	r2,-16(fp)
   10d9c:	10800090 	cmplti	r2,r2,2
   10da0:	1000061e 	bne	r2,zero,10dbc <altera_avalon_jtag_uart_ioctl+0x7c>
   10da4:	e0fffc17 	ldw	r3,-16(fp)
   10da8:	00a00034 	movhi	r2,32768
   10dac:	10bfffc4 	addi	r2,r2,-1
   10db0:	18800226 	beq	r3,r2,10dbc <altera_avalon_jtag_uart_ioctl+0x7c>
   10db4:	e0bffc17 	ldw	r2,-16(fp)
   10db8:	00000206 	br	10dc4 <altera_avalon_jtag_uart_ioctl+0x84>
   10dbc:	00a00034 	movhi	r2,32768
   10dc0:	10bfff84 	addi	r2,r2,-2
   10dc4:	e0fffd17 	ldw	r3,-12(fp)
   10dc8:	18800115 	stw	r2,4(r3)
      rc = 0;
   10dcc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10dd0:	00000f06 	br	10e10 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   10dd4:	e0bffd17 	ldw	r2,-12(fp)
   10dd8:	10c00117 	ldw	r3,4(r2)
   10ddc:	00a00034 	movhi	r2,32768
   10de0:	10bfffc4 	addi	r2,r2,-1
   10de4:	18800c26 	beq	r3,r2,10e18 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10de8:	e0bffd17 	ldw	r2,-12(fp)
   10dec:	10c00917 	ldw	r3,36(r2)
   10df0:	e0bffd17 	ldw	r2,-12(fp)
   10df4:	10800117 	ldw	r2,4(r2)
   10df8:	1885803a 	cmpltu	r2,r3,r2
   10dfc:	10c03fcc 	andi	r3,r2,255
   10e00:	e0bfff17 	ldw	r2,-4(fp)
   10e04:	10c00015 	stw	r3,0(r2)
      rc = 0;
   10e08:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10e0c:	00000206 	br	10e18 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   10e10:	0001883a 	nop
   10e14:	00000106 	br	10e1c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   10e18:	0001883a 	nop

  default:
    break;
  }

  return rc;
   10e1c:	e0bffb17 	ldw	r2,-20(fp)
}
   10e20:	e037883a 	mov	sp,fp
   10e24:	df000017 	ldw	fp,0(sp)
   10e28:	dec00104 	addi	sp,sp,4
   10e2c:	f800283a 	ret

00010e30 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10e30:	defff304 	addi	sp,sp,-52
   10e34:	dfc00c15 	stw	ra,48(sp)
   10e38:	df000b15 	stw	fp,44(sp)
   10e3c:	df000b04 	addi	fp,sp,44
   10e40:	e13ffc15 	stw	r4,-16(fp)
   10e44:	e17ffd15 	stw	r5,-12(fp)
   10e48:	e1bffe15 	stw	r6,-8(fp)
   10e4c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   10e50:	e0bffd17 	ldw	r2,-12(fp)
   10e54:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10e58:	00004706 	br	10f78 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10e5c:	e0bffc17 	ldw	r2,-16(fp)
   10e60:	10800a17 	ldw	r2,40(r2)
   10e64:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   10e68:	e0bffc17 	ldw	r2,-16(fp)
   10e6c:	10800b17 	ldw	r2,44(r2)
   10e70:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   10e74:	e0fff717 	ldw	r3,-36(fp)
   10e78:	e0bff817 	ldw	r2,-32(fp)
   10e7c:	18800536 	bltu	r3,r2,10e94 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10e80:	e0fff717 	ldw	r3,-36(fp)
   10e84:	e0bff817 	ldw	r2,-32(fp)
   10e88:	1885c83a 	sub	r2,r3,r2
   10e8c:	e0bff615 	stw	r2,-40(fp)
   10e90:	00000406 	br	10ea4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   10e94:	00c20004 	movi	r3,2048
   10e98:	e0bff817 	ldw	r2,-32(fp)
   10e9c:	1885c83a 	sub	r2,r3,r2
   10ea0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10ea4:	e0bff617 	ldw	r2,-40(fp)
   10ea8:	10001e26 	beq	r2,zero,10f24 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   10eac:	e0fffe17 	ldw	r3,-8(fp)
   10eb0:	e0bff617 	ldw	r2,-40(fp)
   10eb4:	1880022e 	bgeu	r3,r2,10ec0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   10eb8:	e0bffe17 	ldw	r2,-8(fp)
   10ebc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   10ec0:	e0bffc17 	ldw	r2,-16(fp)
   10ec4:	10c00e04 	addi	r3,r2,56
   10ec8:	e0bff817 	ldw	r2,-32(fp)
   10ecc:	1885883a 	add	r2,r3,r2
   10ed0:	e1bff617 	ldw	r6,-40(fp)
   10ed4:	100b883a 	mov	r5,r2
   10ed8:	e13ff517 	ldw	r4,-44(fp)
   10edc:	00127000 	call	12700 <memcpy>
      ptr   += n;
   10ee0:	e0fff517 	ldw	r3,-44(fp)
   10ee4:	e0bff617 	ldw	r2,-40(fp)
   10ee8:	1885883a 	add	r2,r3,r2
   10eec:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   10ef0:	e0fffe17 	ldw	r3,-8(fp)
   10ef4:	e0bff617 	ldw	r2,-40(fp)
   10ef8:	1885c83a 	sub	r2,r3,r2
   10efc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10f00:	e0fff817 	ldw	r3,-32(fp)
   10f04:	e0bff617 	ldw	r2,-40(fp)
   10f08:	1885883a 	add	r2,r3,r2
   10f0c:	10c1ffcc 	andi	r3,r2,2047
   10f10:	e0bffc17 	ldw	r2,-16(fp)
   10f14:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   10f18:	e0bffe17 	ldw	r2,-8(fp)
   10f1c:	00bfcf16 	blt	zero,r2,10e5c <__alt_data_end+0xffff0e5c>
   10f20:	00000106 	br	10f28 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   10f24:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   10f28:	e0fff517 	ldw	r3,-44(fp)
   10f2c:	e0bffd17 	ldw	r2,-12(fp)
   10f30:	1880141e 	bne	r3,r2,10f84 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   10f34:	e0bfff17 	ldw	r2,-4(fp)
   10f38:	1090000c 	andi	r2,r2,16384
   10f3c:	1000131e 	bne	r2,zero,10f8c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10f40:	0001883a 	nop
   10f44:	e0bffc17 	ldw	r2,-16(fp)
   10f48:	10c00a17 	ldw	r3,40(r2)
   10f4c:	e0bff717 	ldw	r2,-36(fp)
   10f50:	1880051e 	bne	r3,r2,10f68 <altera_avalon_jtag_uart_read+0x138>
   10f54:	e0bffc17 	ldw	r2,-16(fp)
   10f58:	10c00917 	ldw	r3,36(r2)
   10f5c:	e0bffc17 	ldw	r2,-16(fp)
   10f60:	10800117 	ldw	r2,4(r2)
   10f64:	18bff736 	bltu	r3,r2,10f44 <__alt_data_end+0xffff0f44>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   10f68:	e0bffc17 	ldw	r2,-16(fp)
   10f6c:	10c00a17 	ldw	r3,40(r2)
   10f70:	e0bff717 	ldw	r2,-36(fp)
   10f74:	18800726 	beq	r3,r2,10f94 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10f78:	e0bffe17 	ldw	r2,-8(fp)
   10f7c:	00bfb716 	blt	zero,r2,10e5c <__alt_data_end+0xffff0e5c>
   10f80:	00000506 	br	10f98 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   10f84:	0001883a 	nop
   10f88:	00000306 	br	10f98 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   10f8c:	0001883a 	nop
   10f90:	00000106 	br	10f98 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   10f94:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   10f98:	e0fff517 	ldw	r3,-44(fp)
   10f9c:	e0bffd17 	ldw	r2,-12(fp)
   10fa0:	18801826 	beq	r3,r2,11004 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10fa4:	0005303a 	rdctl	r2,status
   10fa8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10fac:	e0fffb17 	ldw	r3,-20(fp)
   10fb0:	00bfff84 	movi	r2,-2
   10fb4:	1884703a 	and	r2,r3,r2
   10fb8:	1001703a 	wrctl	status,r2
  
  return context;
   10fbc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   10fc0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10fc4:	e0bffc17 	ldw	r2,-16(fp)
   10fc8:	10800817 	ldw	r2,32(r2)
   10fcc:	10c00054 	ori	r3,r2,1
   10fd0:	e0bffc17 	ldw	r2,-16(fp)
   10fd4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10fd8:	e0bffc17 	ldw	r2,-16(fp)
   10fdc:	10800017 	ldw	r2,0(r2)
   10fe0:	10800104 	addi	r2,r2,4
   10fe4:	1007883a 	mov	r3,r2
   10fe8:	e0bffc17 	ldw	r2,-16(fp)
   10fec:	10800817 	ldw	r2,32(r2)
   10ff0:	18800035 	stwio	r2,0(r3)
   10ff4:	e0bffa17 	ldw	r2,-24(fp)
   10ff8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ffc:	e0bff917 	ldw	r2,-28(fp)
   11000:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   11004:	e0fff517 	ldw	r3,-44(fp)
   11008:	e0bffd17 	ldw	r2,-12(fp)
   1100c:	18800426 	beq	r3,r2,11020 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   11010:	e0fff517 	ldw	r3,-44(fp)
   11014:	e0bffd17 	ldw	r2,-12(fp)
   11018:	1885c83a 	sub	r2,r3,r2
   1101c:	00000606 	br	11038 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   11020:	e0bfff17 	ldw	r2,-4(fp)
   11024:	1090000c 	andi	r2,r2,16384
   11028:	10000226 	beq	r2,zero,11034 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   1102c:	00bffd44 	movi	r2,-11
   11030:	00000106 	br	11038 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   11034:	00bffec4 	movi	r2,-5
}
   11038:	e037883a 	mov	sp,fp
   1103c:	dfc00117 	ldw	ra,4(sp)
   11040:	df000017 	ldw	fp,0(sp)
   11044:	dec00204 	addi	sp,sp,8
   11048:	f800283a 	ret

0001104c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1104c:	defff304 	addi	sp,sp,-52
   11050:	dfc00c15 	stw	ra,48(sp)
   11054:	df000b15 	stw	fp,44(sp)
   11058:	df000b04 	addi	fp,sp,44
   1105c:	e13ffc15 	stw	r4,-16(fp)
   11060:	e17ffd15 	stw	r5,-12(fp)
   11064:	e1bffe15 	stw	r6,-8(fp)
   11068:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1106c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   11070:	e0bffd17 	ldw	r2,-12(fp)
   11074:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   11078:	00003706 	br	11158 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1107c:	e0bffc17 	ldw	r2,-16(fp)
   11080:	10800c17 	ldw	r2,48(r2)
   11084:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   11088:	e0bffc17 	ldw	r2,-16(fp)
   1108c:	10800d17 	ldw	r2,52(r2)
   11090:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   11094:	e0fff917 	ldw	r3,-28(fp)
   11098:	e0bff517 	ldw	r2,-44(fp)
   1109c:	1880062e 	bgeu	r3,r2,110b8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   110a0:	e0fff517 	ldw	r3,-44(fp)
   110a4:	e0bff917 	ldw	r2,-28(fp)
   110a8:	1885c83a 	sub	r2,r3,r2
   110ac:	10bfffc4 	addi	r2,r2,-1
   110b0:	e0bff615 	stw	r2,-40(fp)
   110b4:	00000b06 	br	110e4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   110b8:	e0bff517 	ldw	r2,-44(fp)
   110bc:	10000526 	beq	r2,zero,110d4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   110c0:	00c20004 	movi	r3,2048
   110c4:	e0bff917 	ldw	r2,-28(fp)
   110c8:	1885c83a 	sub	r2,r3,r2
   110cc:	e0bff615 	stw	r2,-40(fp)
   110d0:	00000406 	br	110e4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   110d4:	00c1ffc4 	movi	r3,2047
   110d8:	e0bff917 	ldw	r2,-28(fp)
   110dc:	1885c83a 	sub	r2,r3,r2
   110e0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   110e4:	e0bff617 	ldw	r2,-40(fp)
   110e8:	10001e26 	beq	r2,zero,11164 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   110ec:	e0fffe17 	ldw	r3,-8(fp)
   110f0:	e0bff617 	ldw	r2,-40(fp)
   110f4:	1880022e 	bgeu	r3,r2,11100 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   110f8:	e0bffe17 	ldw	r2,-8(fp)
   110fc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   11100:	e0bffc17 	ldw	r2,-16(fp)
   11104:	10c20e04 	addi	r3,r2,2104
   11108:	e0bff917 	ldw	r2,-28(fp)
   1110c:	1885883a 	add	r2,r3,r2
   11110:	e1bff617 	ldw	r6,-40(fp)
   11114:	e17ffd17 	ldw	r5,-12(fp)
   11118:	1009883a 	mov	r4,r2
   1111c:	00127000 	call	12700 <memcpy>
      ptr   += n;
   11120:	e0fffd17 	ldw	r3,-12(fp)
   11124:	e0bff617 	ldw	r2,-40(fp)
   11128:	1885883a 	add	r2,r3,r2
   1112c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   11130:	e0fffe17 	ldw	r3,-8(fp)
   11134:	e0bff617 	ldw	r2,-40(fp)
   11138:	1885c83a 	sub	r2,r3,r2
   1113c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11140:	e0fff917 	ldw	r3,-28(fp)
   11144:	e0bff617 	ldw	r2,-40(fp)
   11148:	1885883a 	add	r2,r3,r2
   1114c:	10c1ffcc 	andi	r3,r2,2047
   11150:	e0bffc17 	ldw	r2,-16(fp)
   11154:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   11158:	e0bffe17 	ldw	r2,-8(fp)
   1115c:	00bfc716 	blt	zero,r2,1107c <__alt_data_end+0xffff107c>
   11160:	00000106 	br	11168 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   11164:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11168:	0005303a 	rdctl	r2,status
   1116c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11170:	e0fffb17 	ldw	r3,-20(fp)
   11174:	00bfff84 	movi	r2,-2
   11178:	1884703a 	and	r2,r3,r2
   1117c:	1001703a 	wrctl	status,r2
  
  return context;
   11180:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   11184:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   11188:	e0bffc17 	ldw	r2,-16(fp)
   1118c:	10800817 	ldw	r2,32(r2)
   11190:	10c00094 	ori	r3,r2,2
   11194:	e0bffc17 	ldw	r2,-16(fp)
   11198:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1119c:	e0bffc17 	ldw	r2,-16(fp)
   111a0:	10800017 	ldw	r2,0(r2)
   111a4:	10800104 	addi	r2,r2,4
   111a8:	1007883a 	mov	r3,r2
   111ac:	e0bffc17 	ldw	r2,-16(fp)
   111b0:	10800817 	ldw	r2,32(r2)
   111b4:	18800035 	stwio	r2,0(r3)
   111b8:	e0bffa17 	ldw	r2,-24(fp)
   111bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   111c0:	e0bff817 	ldw	r2,-32(fp)
   111c4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   111c8:	e0bffe17 	ldw	r2,-8(fp)
   111cc:	0080100e 	bge	zero,r2,11210 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   111d0:	e0bfff17 	ldw	r2,-4(fp)
   111d4:	1090000c 	andi	r2,r2,16384
   111d8:	1000101e 	bne	r2,zero,1121c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   111dc:	0001883a 	nop
   111e0:	e0bffc17 	ldw	r2,-16(fp)
   111e4:	10c00d17 	ldw	r3,52(r2)
   111e8:	e0bff517 	ldw	r2,-44(fp)
   111ec:	1880051e 	bne	r3,r2,11204 <altera_avalon_jtag_uart_write+0x1b8>
   111f0:	e0bffc17 	ldw	r2,-16(fp)
   111f4:	10c00917 	ldw	r3,36(r2)
   111f8:	e0bffc17 	ldw	r2,-16(fp)
   111fc:	10800117 	ldw	r2,4(r2)
   11200:	18bff736 	bltu	r3,r2,111e0 <__alt_data_end+0xffff11e0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   11204:	e0bffc17 	ldw	r2,-16(fp)
   11208:	10800917 	ldw	r2,36(r2)
   1120c:	1000051e 	bne	r2,zero,11224 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   11210:	e0bffe17 	ldw	r2,-8(fp)
   11214:	00bfd016 	blt	zero,r2,11158 <__alt_data_end+0xffff1158>
   11218:	00000306 	br	11228 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1121c:	0001883a 	nop
   11220:	00000106 	br	11228 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   11224:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   11228:	e0fffd17 	ldw	r3,-12(fp)
   1122c:	e0bff717 	ldw	r2,-36(fp)
   11230:	18800426 	beq	r3,r2,11244 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   11234:	e0fffd17 	ldw	r3,-12(fp)
   11238:	e0bff717 	ldw	r2,-36(fp)
   1123c:	1885c83a 	sub	r2,r3,r2
   11240:	00000606 	br	1125c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   11244:	e0bfff17 	ldw	r2,-4(fp)
   11248:	1090000c 	andi	r2,r2,16384
   1124c:	10000226 	beq	r2,zero,11258 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   11250:	00bffd44 	movi	r2,-11
   11254:	00000106 	br	1125c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   11258:	00bffec4 	movi	r2,-5
}
   1125c:	e037883a 	mov	sp,fp
   11260:	dfc00117 	ldw	ra,4(sp)
   11264:	df000017 	ldw	fp,0(sp)
   11268:	dec00204 	addi	sp,sp,8
   1126c:	f800283a 	ret

00011270 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   11270:	defff904 	addi	sp,sp,-28
   11274:	dfc00615 	stw	ra,24(sp)
   11278:	df000515 	stw	fp,20(sp)
   1127c:	df000504 	addi	fp,sp,20
   11280:	e13ffe15 	stw	r4,-8(fp)
   11284:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   11288:	0007883a 	mov	r3,zero
   1128c:	e0bffe17 	ldw	r2,-8(fp)
   11290:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   11294:	e0bffe17 	ldw	r2,-8(fp)
   11298:	10800104 	addi	r2,r2,4
   1129c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   112a0:	0005303a 	rdctl	r2,status
   112a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   112a8:	e0fffc17 	ldw	r3,-16(fp)
   112ac:	00bfff84 	movi	r2,-2
   112b0:	1884703a 	and	r2,r3,r2
   112b4:	1001703a 	wrctl	status,r2
  
  return context;
   112b8:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   112bc:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   112c0:	00122340 	call	12234 <alt_tick>
   112c4:	e0bffb17 	ldw	r2,-20(fp)
   112c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   112cc:	e0bffd17 	ldw	r2,-12(fp)
   112d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   112d4:	0001883a 	nop
   112d8:	e037883a 	mov	sp,fp
   112dc:	dfc00117 	ldw	ra,4(sp)
   112e0:	df000017 	ldw	fp,0(sp)
   112e4:	dec00204 	addi	sp,sp,8
   112e8:	f800283a 	ret

000112ec <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   112ec:	defff904 	addi	sp,sp,-28
   112f0:	dfc00615 	stw	ra,24(sp)
   112f4:	df000515 	stw	fp,20(sp)
   112f8:	df000504 	addi	fp,sp,20
   112fc:	e13ffc15 	stw	r4,-16(fp)
   11300:	e17ffd15 	stw	r5,-12(fp)
   11304:	e1bffe15 	stw	r6,-8(fp)
   11308:	e1ffff15 	stw	r7,-4(fp)
   1130c:	e0bfff17 	ldw	r2,-4(fp)
   11310:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   11314:	d0a6ba17 	ldw	r2,-25880(gp)
   11318:	1000021e 	bne	r2,zero,11324 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   1131c:	e0bffb17 	ldw	r2,-20(fp)
   11320:	d0a6ba15 	stw	r2,-25880(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   11324:	e0bffc17 	ldw	r2,-16(fp)
   11328:	10800104 	addi	r2,r2,4
   1132c:	00c001c4 	movi	r3,7
   11330:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   11334:	01800074 	movhi	r6,1
   11338:	31849c04 	addi	r6,r6,4720
   1133c:	e17ffc17 	ldw	r5,-16(fp)
   11340:	e13ffe17 	ldw	r4,-8(fp)
   11344:	0011d600 	call	11d60 <alt_irq_register>
#endif  
}
   11348:	0001883a 	nop
   1134c:	e037883a 	mov	sp,fp
   11350:	dfc00117 	ldw	ra,4(sp)
   11354:	df000017 	ldw	fp,0(sp)
   11358:	dec00204 	addi	sp,sp,8
   1135c:	f800283a 	ret

00011360 <alt_up_accelerometer_spi_open_dev>:

#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_up_avalon_accelerometer_spi_regs.h"

alt_up_accelerometer_spi_dev* alt_up_accelerometer_spi_open_dev(const char* name)
{
   11360:	defffc04 	addi	sp,sp,-16
   11364:	dfc00315 	stw	ra,12(sp)
   11368:	df000215 	stw	fp,8(sp)
   1136c:	df000204 	addi	fp,sp,8
   11370:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   11374:	d1600204 	addi	r5,gp,-32760
   11378:	e13fff17 	ldw	r4,-4(fp)
   1137c:	0011b5c0 	call	11b5c <alt_find_dev>
   11380:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   11384:	e0bffe17 	ldw	r2,-8(fp)
}
   11388:	e037883a 	mov	sp,fp
   1138c:	dfc00117 	ldw	ra,4(sp)
   11390:	df000017 	ldw	fp,0(sp)
   11394:	dec00204 	addi	sp,sp,8
   11398:	f800283a 	ret

0001139c <alt_up_accelerometer_spi_read_address_register>:
 * @param addr -- a pointer to the location where the read address should be stored
 *
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
   1139c:	defffd04 	addi	sp,sp,-12
   113a0:	df000215 	stw	fp,8(sp)
   113a4:	df000204 	addi	fp,sp,8
   113a8:	e13ffe15 	stw	r4,-8(fp)
   113ac:	e17fff15 	stw	r5,-4(fp)
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   113b0:	e0bffe17 	ldw	r2,-8(fp)
   113b4:	10800a17 	ldw	r2,40(r2)
   113b8:	10800023 	ldbuio	r2,0(r2)
   113bc:	10803fcc 	andi	r2,r2,255
   113c0:	1007883a 	mov	r3,r2
   113c4:	e0bfff17 	ldw	r2,-4(fp)
   113c8:	10c00005 	stb	r3,0(r2)

	return 0;
   113cc:	0005883a 	mov	r2,zero
}
   113d0:	e037883a 	mov	sp,fp
   113d4:	df000017 	ldw	fp,0(sp)
   113d8:	dec00104 	addi	sp,sp,4
   113dc:	f800283a 	ret

000113e0 <alt_up_accelerometer_spi_read>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
   113e0:	defffc04 	addi	sp,sp,-16
   113e4:	df000315 	stw	fp,12(sp)
   113e8:	df000304 	addi	fp,sp,12
   113ec:	e13ffd15 	stw	r4,-12(fp)
   113f0:	2805883a 	mov	r2,r5
   113f4:	e1bfff15 	stw	r6,-4(fp)
   113f8:	e0bffe05 	stb	r2,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   113fc:	e0bffd17 	ldw	r2,-12(fp)
   11400:	10800a17 	ldw	r2,40(r2)
   11404:	1007883a 	mov	r3,r2
   11408:	e0bffe03 	ldbu	r2,-8(fp)
   1140c:	10800fcc 	andi	r2,r2,63
   11410:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11414:	e0bffd17 	ldw	r2,-12(fp)
   11418:	10800a17 	ldw	r2,40(r2)
   1141c:	10800044 	addi	r2,r2,1
   11420:	10800023 	ldbuio	r2,0(r2)
   11424:	10803fcc 	andi	r2,r2,255
   11428:	1007883a 	mov	r3,r2
   1142c:	e0bfff17 	ldw	r2,-4(fp)
   11430:	10c00005 	stb	r3,0(r2)

	return 0;
   11434:	0005883a 	mov	r2,zero
}
   11438:	e037883a 	mov	sp,fp
   1143c:	df000017 	ldw	fp,0(sp)
   11440:	dec00104 	addi	sp,sp,4
   11444:	f800283a 	ret

00011448 <alt_up_accelerometer_spi_write>:
 * @param data -- the data to be written
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
   11448:	defffc04 	addi	sp,sp,-16
   1144c:	df000315 	stw	fp,12(sp)
   11450:	df000304 	addi	fp,sp,12
   11454:	e13ffd15 	stw	r4,-12(fp)
   11458:	2807883a 	mov	r3,r5
   1145c:	3005883a 	mov	r2,r6
   11460:	e0fffe05 	stb	r3,-8(fp)
   11464:	e0bfff05 	stb	r2,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11468:	e0bffd17 	ldw	r2,-12(fp)
   1146c:	10800a17 	ldw	r2,40(r2)
   11470:	1007883a 	mov	r3,r2
   11474:	e0bffe03 	ldbu	r2,-8(fp)
   11478:	10800fcc 	andi	r2,r2,63
   1147c:	18800025 	stbio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   11480:	e0bffd17 	ldw	r2,-12(fp)
   11484:	10800a17 	ldw	r2,40(r2)
   11488:	10800044 	addi	r2,r2,1
   1148c:	1007883a 	mov	r3,r2
   11490:	e0bfff03 	ldbu	r2,-4(fp)
   11494:	18800025 	stbio	r2,0(r3)

	return 0;
   11498:	0005883a 	mov	r2,zero
}
   1149c:	e037883a 	mov	sp,fp
   114a0:	df000017 	ldw	fp,0(sp)
   114a4:	dec00104 	addi	sp,sp,4
   114a8:	f800283a 	ret

000114ac <alt_up_accelerometer_spi_read_x_axis>:
 * @param x_axis -- a pointer to the location where the x axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
   114ac:	defffd04 	addi	sp,sp,-12
   114b0:	df000215 	stw	fp,8(sp)
   114b4:	df000204 	addi	fp,sp,8
   114b8:	e13ffe15 	stw	r4,-8(fp)
   114bc:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   114c0:	e0bffe17 	ldw	r2,-8(fp)
   114c4:	10800a17 	ldw	r2,40(r2)
   114c8:	1007883a 	mov	r3,r2
   114cc:	00800c84 	movi	r2,50
   114d0:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   114d4:	e0bffe17 	ldw	r2,-8(fp)
   114d8:	10800a17 	ldw	r2,40(r2)
   114dc:	10800044 	addi	r2,r2,1
   114e0:	10800023 	ldbuio	r2,0(r2)
   114e4:	10803fcc 	andi	r2,r2,255
   114e8:	10ffffcc 	andi	r3,r2,65535
   114ec:	e0bfff17 	ldw	r2,-4(fp)
   114f0:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   114f4:	e0bffe17 	ldw	r2,-8(fp)
   114f8:	10800a17 	ldw	r2,40(r2)
   114fc:	1007883a 	mov	r3,r2
   11500:	00800cc4 	movi	r2,51
   11504:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11508:	e0bffe17 	ldw	r2,-8(fp)
   1150c:	10800a17 	ldw	r2,40(r2)
   11510:	10800044 	addi	r2,r2,1
   11514:	10800023 	ldbuio	r2,0(r2)
   11518:	10803fcc 	andi	r2,r2,255
   1151c:	10bfffcc 	andi	r2,r2,65535
   11520:	1004923a 	slli	r2,r2,8
   11524:	e0ffff17 	ldw	r3,-4(fp)
   11528:	18c00017 	ldw	r3,0(r3)
   1152c:	1885883a 	add	r2,r3,r2
   11530:	1007883a 	mov	r3,r2
   11534:	e0bfff17 	ldw	r2,-4(fp)
   11538:	10c00015 	stw	r3,0(r2)

	if (*(x_axis) & 0x00008000)
   1153c:	e0bfff17 	ldw	r2,-4(fp)
   11540:	10800017 	ldw	r2,0(r2)
   11544:	10a0000c 	andi	r2,r2,32768
   11548:	10000626 	beq	r2,zero,11564 <alt_up_accelerometer_spi_read_x_axis+0xb8>
	{
		*(x_axis) |= 0xFFFF0000;
   1154c:	e0bfff17 	ldw	r2,-4(fp)
   11550:	10800017 	ldw	r2,0(r2)
   11554:	10bffff4 	orhi	r2,r2,65535
   11558:	1007883a 	mov	r3,r2
   1155c:	e0bfff17 	ldw	r2,-4(fp)
   11560:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   11564:	0005883a 	mov	r2,zero
}
   11568:	e037883a 	mov	sp,fp
   1156c:	df000017 	ldw	fp,0(sp)
   11570:	dec00104 	addi	sp,sp,4
   11574:	f800283a 	ret

00011578 <alt_up_accelerometer_spi_read_y_axis>:
 * @param y_axis -- a pointer to the location where the y axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
   11578:	defffd04 	addi	sp,sp,-12
   1157c:	df000215 	stw	fp,8(sp)
   11580:	df000204 	addi	fp,sp,8
   11584:	e13ffe15 	stw	r4,-8(fp)
   11588:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1158c:	e0bffe17 	ldw	r2,-8(fp)
   11590:	10800a17 	ldw	r2,40(r2)
   11594:	1007883a 	mov	r3,r2
   11598:	00800d04 	movi	r2,52
   1159c:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   115a0:	e0bffe17 	ldw	r2,-8(fp)
   115a4:	10800a17 	ldw	r2,40(r2)
   115a8:	10800044 	addi	r2,r2,1
   115ac:	10800023 	ldbuio	r2,0(r2)
   115b0:	10803fcc 	andi	r2,r2,255
   115b4:	10ffffcc 	andi	r3,r2,65535
   115b8:	e0bfff17 	ldw	r2,-4(fp)
   115bc:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   115c0:	e0bffe17 	ldw	r2,-8(fp)
   115c4:	10800a17 	ldw	r2,40(r2)
   115c8:	1007883a 	mov	r3,r2
   115cc:	00800d44 	movi	r2,53
   115d0:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   115d4:	e0bffe17 	ldw	r2,-8(fp)
   115d8:	10800a17 	ldw	r2,40(r2)
   115dc:	10800044 	addi	r2,r2,1
   115e0:	10800023 	ldbuio	r2,0(r2)
   115e4:	10803fcc 	andi	r2,r2,255
   115e8:	10bfffcc 	andi	r2,r2,65535
   115ec:	1004923a 	slli	r2,r2,8
   115f0:	e0ffff17 	ldw	r3,-4(fp)
   115f4:	18c00017 	ldw	r3,0(r3)
   115f8:	1885883a 	add	r2,r3,r2
   115fc:	1007883a 	mov	r3,r2
   11600:	e0bfff17 	ldw	r2,-4(fp)
   11604:	10c00015 	stw	r3,0(r2)

	if (*(y_axis) & 0x00008000)
   11608:	e0bfff17 	ldw	r2,-4(fp)
   1160c:	10800017 	ldw	r2,0(r2)
   11610:	10a0000c 	andi	r2,r2,32768
   11614:	10000626 	beq	r2,zero,11630 <alt_up_accelerometer_spi_read_y_axis+0xb8>
	{
		*(y_axis) |= 0xFFFF0000;
   11618:	e0bfff17 	ldw	r2,-4(fp)
   1161c:	10800017 	ldw	r2,0(r2)
   11620:	10bffff4 	orhi	r2,r2,65535
   11624:	1007883a 	mov	r3,r2
   11628:	e0bfff17 	ldw	r2,-4(fp)
   1162c:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   11630:	0005883a 	mov	r2,zero
}
   11634:	e037883a 	mov	sp,fp
   11638:	df000017 	ldw	fp,0(sp)
   1163c:	dec00104 	addi	sp,sp,4
   11640:	f800283a 	ret

00011644 <alt_up_accelerometer_spi_read_z_axis>:
 * @param z_axis -- a pointer to the location where the z axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
   11644:	defffd04 	addi	sp,sp,-12
   11648:	df000215 	stw	fp,8(sp)
   1164c:	df000204 	addi	fp,sp,8
   11650:	e13ffe15 	stw	r4,-8(fp)
   11654:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11658:	e0bffe17 	ldw	r2,-8(fp)
   1165c:	10800a17 	ldw	r2,40(r2)
   11660:	1007883a 	mov	r3,r2
   11664:	00800d84 	movi	r2,54
   11668:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1166c:	e0bffe17 	ldw	r2,-8(fp)
   11670:	10800a17 	ldw	r2,40(r2)
   11674:	10800044 	addi	r2,r2,1
   11678:	10800023 	ldbuio	r2,0(r2)
   1167c:	10803fcc 	andi	r2,r2,255
   11680:	10ffffcc 	andi	r3,r2,65535
   11684:	e0bfff17 	ldw	r2,-4(fp)
   11688:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1168c:	e0bffe17 	ldw	r2,-8(fp)
   11690:	10800a17 	ldw	r2,40(r2)
   11694:	1007883a 	mov	r3,r2
   11698:	00800dc4 	movi	r2,55
   1169c:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   116a0:	e0bffe17 	ldw	r2,-8(fp)
   116a4:	10800a17 	ldw	r2,40(r2)
   116a8:	10800044 	addi	r2,r2,1
   116ac:	10800023 	ldbuio	r2,0(r2)
   116b0:	10803fcc 	andi	r2,r2,255
   116b4:	10bfffcc 	andi	r2,r2,65535
   116b8:	1004923a 	slli	r2,r2,8
   116bc:	e0ffff17 	ldw	r3,-4(fp)
   116c0:	18c00017 	ldw	r3,0(r3)
   116c4:	1885883a 	add	r2,r3,r2
   116c8:	1007883a 	mov	r3,r2
   116cc:	e0bfff17 	ldw	r2,-4(fp)
   116d0:	10c00015 	stw	r3,0(r2)

	if (*(z_axis) & 0x00008000)
   116d4:	e0bfff17 	ldw	r2,-4(fp)
   116d8:	10800017 	ldw	r2,0(r2)
   116dc:	10a0000c 	andi	r2,r2,32768
   116e0:	10000626 	beq	r2,zero,116fc <alt_up_accelerometer_spi_read_z_axis+0xb8>
	{
		*(z_axis) |= 0xFFFF0000;
   116e4:	e0bfff17 	ldw	r2,-4(fp)
   116e8:	10800017 	ldw	r2,0(r2)
   116ec:	10bffff4 	orhi	r2,r2,65535
   116f0:	1007883a 	mov	r3,r2
   116f4:	e0bfff17 	ldw	r2,-4(fp)
   116f8:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   116fc:	0005883a 	mov	r2,zero
}
   11700:	e037883a 	mov	sp,fp
   11704:	df000017 	ldw	fp,0(sp)
   11708:	dec00104 	addi	sp,sp,4
   1170c:	f800283a 	ret

00011710 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   11710:	defff504 	addi	sp,sp,-44
   11714:	df000a15 	stw	fp,40(sp)
   11718:	df000a04 	addi	fp,sp,40
   1171c:	e13ffc15 	stw	r4,-16(fp)
   11720:	e17ffd15 	stw	r5,-12(fp)
   11724:	e1bffe15 	stw	r6,-8(fp)
   11728:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1172c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   11730:	d0a6ba17 	ldw	r2,-25880(gp)
  
  if (alt_ticks_per_second ())
   11734:	10003c26 	beq	r2,zero,11828 <alt_alarm_start+0x118>
  {
    if (alarm)
   11738:	e0bffc17 	ldw	r2,-16(fp)
   1173c:	10003826 	beq	r2,zero,11820 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   11740:	e0bffc17 	ldw	r2,-16(fp)
   11744:	e0fffe17 	ldw	r3,-8(fp)
   11748:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1174c:	e0bffc17 	ldw	r2,-16(fp)
   11750:	e0ffff17 	ldw	r3,-4(fp)
   11754:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11758:	0005303a 	rdctl	r2,status
   1175c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11760:	e0fff917 	ldw	r3,-28(fp)
   11764:	00bfff84 	movi	r2,-2
   11768:	1884703a 	and	r2,r3,r2
   1176c:	1001703a 	wrctl	status,r2
  
  return context;
   11770:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   11774:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   11778:	d0a6bb17 	ldw	r2,-25876(gp)
      
      current_nticks = alt_nticks();
   1177c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   11780:	e0fffd17 	ldw	r3,-12(fp)
   11784:	e0bff617 	ldw	r2,-40(fp)
   11788:	1885883a 	add	r2,r3,r2
   1178c:	10c00044 	addi	r3,r2,1
   11790:	e0bffc17 	ldw	r2,-16(fp)
   11794:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   11798:	e0bffc17 	ldw	r2,-16(fp)
   1179c:	10c00217 	ldw	r3,8(r2)
   117a0:	e0bff617 	ldw	r2,-40(fp)
   117a4:	1880042e 	bgeu	r3,r2,117b8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   117a8:	e0bffc17 	ldw	r2,-16(fp)
   117ac:	00c00044 	movi	r3,1
   117b0:	10c00405 	stb	r3,16(r2)
   117b4:	00000206 	br	117c0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   117b8:	e0bffc17 	ldw	r2,-16(fp)
   117bc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   117c0:	e0bffc17 	ldw	r2,-16(fp)
   117c4:	d0e00704 	addi	r3,gp,-32740
   117c8:	e0fffa15 	stw	r3,-24(fp)
   117cc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   117d0:	e0bffb17 	ldw	r2,-20(fp)
   117d4:	e0fffa17 	ldw	r3,-24(fp)
   117d8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   117dc:	e0bffa17 	ldw	r2,-24(fp)
   117e0:	10c00017 	ldw	r3,0(r2)
   117e4:	e0bffb17 	ldw	r2,-20(fp)
   117e8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   117ec:	e0bffa17 	ldw	r2,-24(fp)
   117f0:	10800017 	ldw	r2,0(r2)
   117f4:	e0fffb17 	ldw	r3,-20(fp)
   117f8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   117fc:	e0bffa17 	ldw	r2,-24(fp)
   11800:	e0fffb17 	ldw	r3,-20(fp)
   11804:	10c00015 	stw	r3,0(r2)
   11808:	e0bff817 	ldw	r2,-32(fp)
   1180c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11810:	e0bff717 	ldw	r2,-36(fp)
   11814:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   11818:	0005883a 	mov	r2,zero
   1181c:	00000306 	br	1182c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   11820:	00bffa84 	movi	r2,-22
   11824:	00000106 	br	1182c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   11828:	00bfde84 	movi	r2,-134
  }
}
   1182c:	e037883a 	mov	sp,fp
   11830:	df000017 	ldw	fp,0(sp)
   11834:	dec00104 	addi	sp,sp,4
   11838:	f800283a 	ret

0001183c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1183c:	defffe04 	addi	sp,sp,-8
   11840:	dfc00115 	stw	ra,4(sp)
   11844:	df000015 	stw	fp,0(sp)
   11848:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1184c:	d0a00517 	ldw	r2,-32748(gp)
   11850:	10000326 	beq	r2,zero,11860 <alt_get_errno+0x24>
   11854:	d0a00517 	ldw	r2,-32748(gp)
   11858:	103ee83a 	callr	r2
   1185c:	00000106 	br	11864 <alt_get_errno+0x28>
   11860:	d0a6bd04 	addi	r2,gp,-25868
}
   11864:	e037883a 	mov	sp,fp
   11868:	dfc00117 	ldw	ra,4(sp)
   1186c:	df000017 	ldw	fp,0(sp)
   11870:	dec00204 	addi	sp,sp,8
   11874:	f800283a 	ret

00011878 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11878:	defffb04 	addi	sp,sp,-20
   1187c:	dfc00415 	stw	ra,16(sp)
   11880:	df000315 	stw	fp,12(sp)
   11884:	df000304 	addi	fp,sp,12
   11888:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1188c:	e0bfff17 	ldw	r2,-4(fp)
   11890:	10000616 	blt	r2,zero,118ac <close+0x34>
   11894:	e0bfff17 	ldw	r2,-4(fp)
   11898:	10c00324 	muli	r3,r2,12
   1189c:	00800074 	movhi	r2,1
   118a0:	1098b304 	addi	r2,r2,25292
   118a4:	1885883a 	add	r2,r3,r2
   118a8:	00000106 	br	118b0 <close+0x38>
   118ac:	0005883a 	mov	r2,zero
   118b0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   118b4:	e0bffd17 	ldw	r2,-12(fp)
   118b8:	10001926 	beq	r2,zero,11920 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   118bc:	e0bffd17 	ldw	r2,-12(fp)
   118c0:	10800017 	ldw	r2,0(r2)
   118c4:	10800417 	ldw	r2,16(r2)
   118c8:	10000626 	beq	r2,zero,118e4 <close+0x6c>
   118cc:	e0bffd17 	ldw	r2,-12(fp)
   118d0:	10800017 	ldw	r2,0(r2)
   118d4:	10800417 	ldw	r2,16(r2)
   118d8:	e13ffd17 	ldw	r4,-12(fp)
   118dc:	103ee83a 	callr	r2
   118e0:	00000106 	br	118e8 <close+0x70>
   118e4:	0005883a 	mov	r2,zero
   118e8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   118ec:	e13fff17 	ldw	r4,-4(fp)
   118f0:	00121340 	call	12134 <alt_release_fd>
    if (rval < 0)
   118f4:	e0bffe17 	ldw	r2,-8(fp)
   118f8:	1000070e 	bge	r2,zero,11918 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   118fc:	001183c0 	call	1183c <alt_get_errno>
   11900:	1007883a 	mov	r3,r2
   11904:	e0bffe17 	ldw	r2,-8(fp)
   11908:	0085c83a 	sub	r2,zero,r2
   1190c:	18800015 	stw	r2,0(r3)
      return -1;
   11910:	00bfffc4 	movi	r2,-1
   11914:	00000706 	br	11934 <close+0xbc>
    }
    return 0;
   11918:	0005883a 	mov	r2,zero
   1191c:	00000506 	br	11934 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11920:	001183c0 	call	1183c <alt_get_errno>
   11924:	1007883a 	mov	r3,r2
   11928:	00801444 	movi	r2,81
   1192c:	18800015 	stw	r2,0(r3)
    return -1;
   11930:	00bfffc4 	movi	r2,-1
  }
}
   11934:	e037883a 	mov	sp,fp
   11938:	dfc00117 	ldw	ra,4(sp)
   1193c:	df000017 	ldw	fp,0(sp)
   11940:	dec00204 	addi	sp,sp,8
   11944:	f800283a 	ret

00011948 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11948:	defffe04 	addi	sp,sp,-8
   1194c:	df000115 	stw	fp,4(sp)
   11950:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   11954:	e03fff15 	stw	zero,-4(fp)
   11958:	00000506 	br	11970 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   1195c:	e0bfff17 	ldw	r2,-4(fp)
   11960:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   11964:	e0bfff17 	ldw	r2,-4(fp)
   11968:	10800804 	addi	r2,r2,32
   1196c:	e0bfff15 	stw	r2,-4(fp)
   11970:	e0bfff17 	ldw	r2,-4(fp)
   11974:	10820030 	cmpltui	r2,r2,2048
   11978:	103ff81e 	bne	r2,zero,1195c <__alt_data_end+0xffff195c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1197c:	0001883a 	nop
   11980:	e037883a 	mov	sp,fp
   11984:	df000017 	ldw	fp,0(sp)
   11988:	dec00104 	addi	sp,sp,4
   1198c:	f800283a 	ret

00011990 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11990:	defffc04 	addi	sp,sp,-16
   11994:	df000315 	stw	fp,12(sp)
   11998:	df000304 	addi	fp,sp,12
   1199c:	e13ffd15 	stw	r4,-12(fp)
   119a0:	e17ffe15 	stw	r5,-8(fp)
   119a4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   119a8:	e0bfff17 	ldw	r2,-4(fp)
}
   119ac:	e037883a 	mov	sp,fp
   119b0:	df000017 	ldw	fp,0(sp)
   119b4:	dec00104 	addi	sp,sp,4
   119b8:	f800283a 	ret

000119bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   119bc:	defffe04 	addi	sp,sp,-8
   119c0:	dfc00115 	stw	ra,4(sp)
   119c4:	df000015 	stw	fp,0(sp)
   119c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   119cc:	d0a00517 	ldw	r2,-32748(gp)
   119d0:	10000326 	beq	r2,zero,119e0 <alt_get_errno+0x24>
   119d4:	d0a00517 	ldw	r2,-32748(gp)
   119d8:	103ee83a 	callr	r2
   119dc:	00000106 	br	119e4 <alt_get_errno+0x28>
   119e0:	d0a6bd04 	addi	r2,gp,-25868
}
   119e4:	e037883a 	mov	sp,fp
   119e8:	dfc00117 	ldw	ra,4(sp)
   119ec:	df000017 	ldw	fp,0(sp)
   119f0:	dec00204 	addi	sp,sp,8
   119f4:	f800283a 	ret

000119f8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   119f8:	defffa04 	addi	sp,sp,-24
   119fc:	dfc00515 	stw	ra,20(sp)
   11a00:	df000415 	stw	fp,16(sp)
   11a04:	df000404 	addi	fp,sp,16
   11a08:	e13ffe15 	stw	r4,-8(fp)
   11a0c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11a10:	e0bffe17 	ldw	r2,-8(fp)
   11a14:	10000326 	beq	r2,zero,11a24 <alt_dev_llist_insert+0x2c>
   11a18:	e0bffe17 	ldw	r2,-8(fp)
   11a1c:	10800217 	ldw	r2,8(r2)
   11a20:	1000061e 	bne	r2,zero,11a3c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   11a24:	00119bc0 	call	119bc <alt_get_errno>
   11a28:	1007883a 	mov	r3,r2
   11a2c:	00800584 	movi	r2,22
   11a30:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11a34:	00bffa84 	movi	r2,-22
   11a38:	00001306 	br	11a88 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   11a3c:	e0bffe17 	ldw	r2,-8(fp)
   11a40:	e0ffff17 	ldw	r3,-4(fp)
   11a44:	e0fffc15 	stw	r3,-16(fp)
   11a48:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11a4c:	e0bffd17 	ldw	r2,-12(fp)
   11a50:	e0fffc17 	ldw	r3,-16(fp)
   11a54:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11a58:	e0bffc17 	ldw	r2,-16(fp)
   11a5c:	10c00017 	ldw	r3,0(r2)
   11a60:	e0bffd17 	ldw	r2,-12(fp)
   11a64:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11a68:	e0bffc17 	ldw	r2,-16(fp)
   11a6c:	10800017 	ldw	r2,0(r2)
   11a70:	e0fffd17 	ldw	r3,-12(fp)
   11a74:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11a78:	e0bffc17 	ldw	r2,-16(fp)
   11a7c:	e0fffd17 	ldw	r3,-12(fp)
   11a80:	10c00015 	stw	r3,0(r2)

  return 0;  
   11a84:	0005883a 	mov	r2,zero
}
   11a88:	e037883a 	mov	sp,fp
   11a8c:	dfc00117 	ldw	ra,4(sp)
   11a90:	df000017 	ldw	fp,0(sp)
   11a94:	dec00204 	addi	sp,sp,8
   11a98:	f800283a 	ret

00011a9c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   11a9c:	defffd04 	addi	sp,sp,-12
   11aa0:	dfc00215 	stw	ra,8(sp)
   11aa4:	df000115 	stw	fp,4(sp)
   11aa8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11aac:	00800074 	movhi	r2,1
   11ab0:	10946a04 	addi	r2,r2,20904
   11ab4:	e0bfff15 	stw	r2,-4(fp)
   11ab8:	00000606 	br	11ad4 <_do_ctors+0x38>
        (*ctor) (); 
   11abc:	e0bfff17 	ldw	r2,-4(fp)
   11ac0:	10800017 	ldw	r2,0(r2)
   11ac4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11ac8:	e0bfff17 	ldw	r2,-4(fp)
   11acc:	10bfff04 	addi	r2,r2,-4
   11ad0:	e0bfff15 	stw	r2,-4(fp)
   11ad4:	e0ffff17 	ldw	r3,-4(fp)
   11ad8:	00800074 	movhi	r2,1
   11adc:	10946b04 	addi	r2,r2,20908
   11ae0:	18bff62e 	bgeu	r3,r2,11abc <__alt_data_end+0xffff1abc>
        (*ctor) (); 
}
   11ae4:	0001883a 	nop
   11ae8:	e037883a 	mov	sp,fp
   11aec:	dfc00117 	ldw	ra,4(sp)
   11af0:	df000017 	ldw	fp,0(sp)
   11af4:	dec00204 	addi	sp,sp,8
   11af8:	f800283a 	ret

00011afc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   11afc:	defffd04 	addi	sp,sp,-12
   11b00:	dfc00215 	stw	ra,8(sp)
   11b04:	df000115 	stw	fp,4(sp)
   11b08:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11b0c:	00800074 	movhi	r2,1
   11b10:	10946a04 	addi	r2,r2,20904
   11b14:	e0bfff15 	stw	r2,-4(fp)
   11b18:	00000606 	br	11b34 <_do_dtors+0x38>
        (*dtor) (); 
   11b1c:	e0bfff17 	ldw	r2,-4(fp)
   11b20:	10800017 	ldw	r2,0(r2)
   11b24:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11b28:	e0bfff17 	ldw	r2,-4(fp)
   11b2c:	10bfff04 	addi	r2,r2,-4
   11b30:	e0bfff15 	stw	r2,-4(fp)
   11b34:	e0ffff17 	ldw	r3,-4(fp)
   11b38:	00800074 	movhi	r2,1
   11b3c:	10946b04 	addi	r2,r2,20908
   11b40:	18bff62e 	bgeu	r3,r2,11b1c <__alt_data_end+0xffff1b1c>
        (*dtor) (); 
}
   11b44:	0001883a 	nop
   11b48:	e037883a 	mov	sp,fp
   11b4c:	dfc00117 	ldw	ra,4(sp)
   11b50:	df000017 	ldw	fp,0(sp)
   11b54:	dec00204 	addi	sp,sp,8
   11b58:	f800283a 	ret

00011b5c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11b5c:	defffa04 	addi	sp,sp,-24
   11b60:	dfc00515 	stw	ra,20(sp)
   11b64:	df000415 	stw	fp,16(sp)
   11b68:	df000404 	addi	fp,sp,16
   11b6c:	e13ffe15 	stw	r4,-8(fp)
   11b70:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11b74:	e0bfff17 	ldw	r2,-4(fp)
   11b78:	10800017 	ldw	r2,0(r2)
   11b7c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11b80:	e13ffe17 	ldw	r4,-8(fp)
   11b84:	00129b00 	call	129b0 <strlen>
   11b88:	10800044 	addi	r2,r2,1
   11b8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11b90:	00000d06 	br	11bc8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11b94:	e0bffc17 	ldw	r2,-16(fp)
   11b98:	10800217 	ldw	r2,8(r2)
   11b9c:	e0fffd17 	ldw	r3,-12(fp)
   11ba0:	180d883a 	mov	r6,r3
   11ba4:	e17ffe17 	ldw	r5,-8(fp)
   11ba8:	1009883a 	mov	r4,r2
   11bac:	00126840 	call	12684 <memcmp>
   11bb0:	1000021e 	bne	r2,zero,11bbc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11bb4:	e0bffc17 	ldw	r2,-16(fp)
   11bb8:	00000706 	br	11bd8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11bbc:	e0bffc17 	ldw	r2,-16(fp)
   11bc0:	10800017 	ldw	r2,0(r2)
   11bc4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11bc8:	e0fffc17 	ldw	r3,-16(fp)
   11bcc:	e0bfff17 	ldw	r2,-4(fp)
   11bd0:	18bff01e 	bne	r3,r2,11b94 <__alt_data_end+0xffff1b94>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11bd4:	0005883a 	mov	r2,zero
}
   11bd8:	e037883a 	mov	sp,fp
   11bdc:	dfc00117 	ldw	ra,4(sp)
   11be0:	df000017 	ldw	fp,0(sp)
   11be4:	dec00204 	addi	sp,sp,8
   11be8:	f800283a 	ret

00011bec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11bec:	defffe04 	addi	sp,sp,-8
   11bf0:	dfc00115 	stw	ra,4(sp)
   11bf4:	df000015 	stw	fp,0(sp)
   11bf8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   11bfc:	01440004 	movi	r5,4096
   11c00:	0009883a 	mov	r4,zero
   11c04:	001250c0 	call	1250c <alt_icache_flush>
#endif
}
   11c08:	0001883a 	nop
   11c0c:	e037883a 	mov	sp,fp
   11c10:	dfc00117 	ldw	ra,4(sp)
   11c14:	df000017 	ldw	fp,0(sp)
   11c18:	dec00204 	addi	sp,sp,8
   11c1c:	f800283a 	ret

00011c20 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   11c20:	defff904 	addi	sp,sp,-28
   11c24:	dfc00615 	stw	ra,24(sp)
   11c28:	df000515 	stw	fp,20(sp)
   11c2c:	df000504 	addi	fp,sp,20
   11c30:	e13ffc15 	stw	r4,-16(fp)
   11c34:	e17ffd15 	stw	r5,-12(fp)
   11c38:	e1bffe15 	stw	r6,-8(fp)
   11c3c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   11c40:	e1bfff17 	ldw	r6,-4(fp)
   11c44:	e17ffe17 	ldw	r5,-8(fp)
   11c48:	e13ffd17 	ldw	r4,-12(fp)
   11c4c:	0011fe00 	call	11fe0 <open>
   11c50:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   11c54:	e0bffb17 	ldw	r2,-20(fp)
   11c58:	10001c16 	blt	r2,zero,11ccc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   11c5c:	00800074 	movhi	r2,1
   11c60:	1098b304 	addi	r2,r2,25292
   11c64:	e0fffb17 	ldw	r3,-20(fp)
   11c68:	18c00324 	muli	r3,r3,12
   11c6c:	10c5883a 	add	r2,r2,r3
   11c70:	10c00017 	ldw	r3,0(r2)
   11c74:	e0bffc17 	ldw	r2,-16(fp)
   11c78:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11c7c:	00800074 	movhi	r2,1
   11c80:	1098b304 	addi	r2,r2,25292
   11c84:	e0fffb17 	ldw	r3,-20(fp)
   11c88:	18c00324 	muli	r3,r3,12
   11c8c:	10c5883a 	add	r2,r2,r3
   11c90:	10800104 	addi	r2,r2,4
   11c94:	10c00017 	ldw	r3,0(r2)
   11c98:	e0bffc17 	ldw	r2,-16(fp)
   11c9c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11ca0:	00800074 	movhi	r2,1
   11ca4:	1098b304 	addi	r2,r2,25292
   11ca8:	e0fffb17 	ldw	r3,-20(fp)
   11cac:	18c00324 	muli	r3,r3,12
   11cb0:	10c5883a 	add	r2,r2,r3
   11cb4:	10800204 	addi	r2,r2,8
   11cb8:	10c00017 	ldw	r3,0(r2)
   11cbc:	e0bffc17 	ldw	r2,-16(fp)
   11cc0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11cc4:	e13ffb17 	ldw	r4,-20(fp)
   11cc8:	00121340 	call	12134 <alt_release_fd>
  }
} 
   11ccc:	0001883a 	nop
   11cd0:	e037883a 	mov	sp,fp
   11cd4:	dfc00117 	ldw	ra,4(sp)
   11cd8:	df000017 	ldw	fp,0(sp)
   11cdc:	dec00204 	addi	sp,sp,8
   11ce0:	f800283a 	ret

00011ce4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11ce4:	defffb04 	addi	sp,sp,-20
   11ce8:	dfc00415 	stw	ra,16(sp)
   11cec:	df000315 	stw	fp,12(sp)
   11cf0:	df000304 	addi	fp,sp,12
   11cf4:	e13ffd15 	stw	r4,-12(fp)
   11cf8:	e17ffe15 	stw	r5,-8(fp)
   11cfc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11d00:	01c07fc4 	movi	r7,511
   11d04:	01800044 	movi	r6,1
   11d08:	e17ffd17 	ldw	r5,-12(fp)
   11d0c:	01000074 	movhi	r4,1
   11d10:	2118b604 	addi	r4,r4,25304
   11d14:	0011c200 	call	11c20 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11d18:	01c07fc4 	movi	r7,511
   11d1c:	000d883a 	mov	r6,zero
   11d20:	e17ffe17 	ldw	r5,-8(fp)
   11d24:	01000074 	movhi	r4,1
   11d28:	2118b304 	addi	r4,r4,25292
   11d2c:	0011c200 	call	11c20 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11d30:	01c07fc4 	movi	r7,511
   11d34:	01800044 	movi	r6,1
   11d38:	e17fff17 	ldw	r5,-4(fp)
   11d3c:	01000074 	movhi	r4,1
   11d40:	2118b904 	addi	r4,r4,25316
   11d44:	0011c200 	call	11c20 <alt_open_fd>
}  
   11d48:	0001883a 	nop
   11d4c:	e037883a 	mov	sp,fp
   11d50:	dfc00117 	ldw	ra,4(sp)
   11d54:	df000017 	ldw	fp,0(sp)
   11d58:	dec00204 	addi	sp,sp,8
   11d5c:	f800283a 	ret

00011d60 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   11d60:	defff004 	addi	sp,sp,-64
   11d64:	df000f15 	stw	fp,60(sp)
   11d68:	df000f04 	addi	fp,sp,60
   11d6c:	e13ffd15 	stw	r4,-12(fp)
   11d70:	e17ffe15 	stw	r5,-8(fp)
   11d74:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   11d78:	00bffa84 	movi	r2,-22
   11d7c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11d80:	e0bffd17 	ldw	r2,-12(fp)
   11d84:	10800828 	cmpgeui	r2,r2,32
   11d88:	1000501e 	bne	r2,zero,11ecc <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11d8c:	0005303a 	rdctl	r2,status
   11d90:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d94:	e0fff617 	ldw	r3,-40(fp)
   11d98:	00bfff84 	movi	r2,-2
   11d9c:	1884703a 	and	r2,r3,r2
   11da0:	1001703a 	wrctl	status,r2
  
  return context;
   11da4:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   11da8:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   11dac:	008000b4 	movhi	r2,2
   11db0:	10a1e904 	addi	r2,r2,-30812
   11db4:	e0fffd17 	ldw	r3,-12(fp)
   11db8:	180690fa 	slli	r3,r3,3
   11dbc:	10c5883a 	add	r2,r2,r3
   11dc0:	e0ffff17 	ldw	r3,-4(fp)
   11dc4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   11dc8:	008000b4 	movhi	r2,2
   11dcc:	10a1e904 	addi	r2,r2,-30812
   11dd0:	e0fffd17 	ldw	r3,-12(fp)
   11dd4:	180690fa 	slli	r3,r3,3
   11dd8:	10c5883a 	add	r2,r2,r3
   11ddc:	10800104 	addi	r2,r2,4
   11de0:	e0fffe17 	ldw	r3,-8(fp)
   11de4:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   11de8:	e0bfff17 	ldw	r2,-4(fp)
   11dec:	10001926 	beq	r2,zero,11e54 <alt_irq_register+0xf4>
   11df0:	e0bffd17 	ldw	r2,-12(fp)
   11df4:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11df8:	0005303a 	rdctl	r2,status
   11dfc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e00:	e0fff717 	ldw	r3,-36(fp)
   11e04:	00bfff84 	movi	r2,-2
   11e08:	1884703a 	and	r2,r3,r2
   11e0c:	1001703a 	wrctl	status,r2
  
  return context;
   11e10:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11e14:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   11e18:	00c00044 	movi	r3,1
   11e1c:	e0bff217 	ldw	r2,-56(fp)
   11e20:	1884983a 	sll	r2,r3,r2
   11e24:	1007883a 	mov	r3,r2
   11e28:	d0a6b917 	ldw	r2,-25884(gp)
   11e2c:	1884b03a 	or	r2,r3,r2
   11e30:	d0a6b915 	stw	r2,-25884(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11e34:	d0a6b917 	ldw	r2,-25884(gp)
   11e38:	100170fa 	wrctl	ienable,r2
   11e3c:	e0bff817 	ldw	r2,-32(fp)
   11e40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11e44:	e0bff917 	ldw	r2,-28(fp)
   11e48:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11e4c:	0005883a 	mov	r2,zero
   11e50:	00001906 	br	11eb8 <alt_irq_register+0x158>
   11e54:	e0bffd17 	ldw	r2,-12(fp)
   11e58:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11e5c:	0005303a 	rdctl	r2,status
   11e60:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e64:	e0fffa17 	ldw	r3,-24(fp)
   11e68:	00bfff84 	movi	r2,-2
   11e6c:	1884703a 	and	r2,r3,r2
   11e70:	1001703a 	wrctl	status,r2
  
  return context;
   11e74:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11e78:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   11e7c:	00c00044 	movi	r3,1
   11e80:	e0bff417 	ldw	r2,-48(fp)
   11e84:	1884983a 	sll	r2,r3,r2
   11e88:	0084303a 	nor	r2,zero,r2
   11e8c:	1007883a 	mov	r3,r2
   11e90:	d0a6b917 	ldw	r2,-25884(gp)
   11e94:	1884703a 	and	r2,r3,r2
   11e98:	d0a6b915 	stw	r2,-25884(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11e9c:	d0a6b917 	ldw	r2,-25884(gp)
   11ea0:	100170fa 	wrctl	ienable,r2
   11ea4:	e0bffb17 	ldw	r2,-20(fp)
   11ea8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11eac:	e0bffc17 	ldw	r2,-16(fp)
   11eb0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11eb4:	0005883a 	mov	r2,zero
   11eb8:	e0bff115 	stw	r2,-60(fp)
   11ebc:	e0bff317 	ldw	r2,-52(fp)
   11ec0:	e0bff515 	stw	r2,-44(fp)
   11ec4:	e0bff517 	ldw	r2,-44(fp)
   11ec8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   11ecc:	e0bff117 	ldw	r2,-60(fp)
}
   11ed0:	e037883a 	mov	sp,fp
   11ed4:	df000017 	ldw	fp,0(sp)
   11ed8:	dec00104 	addi	sp,sp,4
   11edc:	f800283a 	ret

00011ee0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11ee0:	defffe04 	addi	sp,sp,-8
   11ee4:	dfc00115 	stw	ra,4(sp)
   11ee8:	df000015 	stw	fp,0(sp)
   11eec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11ef0:	d0a00517 	ldw	r2,-32748(gp)
   11ef4:	10000326 	beq	r2,zero,11f04 <alt_get_errno+0x24>
   11ef8:	d0a00517 	ldw	r2,-32748(gp)
   11efc:	103ee83a 	callr	r2
   11f00:	00000106 	br	11f08 <alt_get_errno+0x28>
   11f04:	d0a6bd04 	addi	r2,gp,-25868
}
   11f08:	e037883a 	mov	sp,fp
   11f0c:	dfc00117 	ldw	ra,4(sp)
   11f10:	df000017 	ldw	fp,0(sp)
   11f14:	dec00204 	addi	sp,sp,8
   11f18:	f800283a 	ret

00011f1c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11f1c:	defffd04 	addi	sp,sp,-12
   11f20:	df000215 	stw	fp,8(sp)
   11f24:	df000204 	addi	fp,sp,8
   11f28:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11f2c:	e0bfff17 	ldw	r2,-4(fp)
   11f30:	10800217 	ldw	r2,8(r2)
   11f34:	10d00034 	orhi	r3,r2,16384
   11f38:	e0bfff17 	ldw	r2,-4(fp)
   11f3c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11f40:	e03ffe15 	stw	zero,-8(fp)
   11f44:	00001d06 	br	11fbc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11f48:	00800074 	movhi	r2,1
   11f4c:	1098b304 	addi	r2,r2,25292
   11f50:	e0fffe17 	ldw	r3,-8(fp)
   11f54:	18c00324 	muli	r3,r3,12
   11f58:	10c5883a 	add	r2,r2,r3
   11f5c:	10c00017 	ldw	r3,0(r2)
   11f60:	e0bfff17 	ldw	r2,-4(fp)
   11f64:	10800017 	ldw	r2,0(r2)
   11f68:	1880111e 	bne	r3,r2,11fb0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11f6c:	00800074 	movhi	r2,1
   11f70:	1098b304 	addi	r2,r2,25292
   11f74:	e0fffe17 	ldw	r3,-8(fp)
   11f78:	18c00324 	muli	r3,r3,12
   11f7c:	10c5883a 	add	r2,r2,r3
   11f80:	10800204 	addi	r2,r2,8
   11f84:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11f88:	1000090e 	bge	r2,zero,11fb0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   11f8c:	e0bffe17 	ldw	r2,-8(fp)
   11f90:	10c00324 	muli	r3,r2,12
   11f94:	00800074 	movhi	r2,1
   11f98:	1098b304 	addi	r2,r2,25292
   11f9c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11fa0:	e0bfff17 	ldw	r2,-4(fp)
   11fa4:	18800226 	beq	r3,r2,11fb0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11fa8:	00bffcc4 	movi	r2,-13
   11fac:	00000806 	br	11fd0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11fb0:	e0bffe17 	ldw	r2,-8(fp)
   11fb4:	10800044 	addi	r2,r2,1
   11fb8:	e0bffe15 	stw	r2,-8(fp)
   11fbc:	d0a00417 	ldw	r2,-32752(gp)
   11fc0:	1007883a 	mov	r3,r2
   11fc4:	e0bffe17 	ldw	r2,-8(fp)
   11fc8:	18bfdf2e 	bgeu	r3,r2,11f48 <__alt_data_end+0xffff1f48>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11fcc:	0005883a 	mov	r2,zero
}
   11fd0:	e037883a 	mov	sp,fp
   11fd4:	df000017 	ldw	fp,0(sp)
   11fd8:	dec00104 	addi	sp,sp,4
   11fdc:	f800283a 	ret

00011fe0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11fe0:	defff604 	addi	sp,sp,-40
   11fe4:	dfc00915 	stw	ra,36(sp)
   11fe8:	df000815 	stw	fp,32(sp)
   11fec:	df000804 	addi	fp,sp,32
   11ff0:	e13ffd15 	stw	r4,-12(fp)
   11ff4:	e17ffe15 	stw	r5,-8(fp)
   11ff8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11ffc:	00bfffc4 	movi	r2,-1
   12000:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   12004:	00bffb44 	movi	r2,-19
   12008:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1200c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   12010:	d1600204 	addi	r5,gp,-32760
   12014:	e13ffd17 	ldw	r4,-12(fp)
   12018:	0011b5c0 	call	11b5c <alt_find_dev>
   1201c:	e0bff815 	stw	r2,-32(fp)
   12020:	e0bff817 	ldw	r2,-32(fp)
   12024:	1000051e 	bne	r2,zero,1203c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   12028:	e13ffd17 	ldw	r4,-12(fp)
   1202c:	00123600 	call	12360 <alt_find_file>
   12030:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   12034:	00800044 	movi	r2,1
   12038:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1203c:	e0bff817 	ldw	r2,-32(fp)
   12040:	10002926 	beq	r2,zero,120e8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   12044:	e13ff817 	ldw	r4,-32(fp)
   12048:	00124680 	call	12468 <alt_get_fd>
   1204c:	e0bff915 	stw	r2,-28(fp)
   12050:	e0bff917 	ldw	r2,-28(fp)
   12054:	1000030e 	bge	r2,zero,12064 <open+0x84>
    {
      status = index;
   12058:	e0bff917 	ldw	r2,-28(fp)
   1205c:	e0bffa15 	stw	r2,-24(fp)
   12060:	00002306 	br	120f0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   12064:	e0bff917 	ldw	r2,-28(fp)
   12068:	10c00324 	muli	r3,r2,12
   1206c:	00800074 	movhi	r2,1
   12070:	1098b304 	addi	r2,r2,25292
   12074:	1885883a 	add	r2,r3,r2
   12078:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1207c:	e0fffe17 	ldw	r3,-8(fp)
   12080:	00900034 	movhi	r2,16384
   12084:	10bfffc4 	addi	r2,r2,-1
   12088:	1886703a 	and	r3,r3,r2
   1208c:	e0bffc17 	ldw	r2,-16(fp)
   12090:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   12094:	e0bffb17 	ldw	r2,-20(fp)
   12098:	1000051e 	bne	r2,zero,120b0 <open+0xd0>
   1209c:	e13ffc17 	ldw	r4,-16(fp)
   120a0:	0011f1c0 	call	11f1c <alt_file_locked>
   120a4:	e0bffa15 	stw	r2,-24(fp)
   120a8:	e0bffa17 	ldw	r2,-24(fp)
   120ac:	10001016 	blt	r2,zero,120f0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   120b0:	e0bff817 	ldw	r2,-32(fp)
   120b4:	10800317 	ldw	r2,12(r2)
   120b8:	10000826 	beq	r2,zero,120dc <open+0xfc>
   120bc:	e0bff817 	ldw	r2,-32(fp)
   120c0:	10800317 	ldw	r2,12(r2)
   120c4:	e1ffff17 	ldw	r7,-4(fp)
   120c8:	e1bffe17 	ldw	r6,-8(fp)
   120cc:	e17ffd17 	ldw	r5,-12(fp)
   120d0:	e13ffc17 	ldw	r4,-16(fp)
   120d4:	103ee83a 	callr	r2
   120d8:	00000106 	br	120e0 <open+0x100>
   120dc:	0005883a 	mov	r2,zero
   120e0:	e0bffa15 	stw	r2,-24(fp)
   120e4:	00000206 	br	120f0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   120e8:	00bffb44 	movi	r2,-19
   120ec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   120f0:	e0bffa17 	ldw	r2,-24(fp)
   120f4:	1000090e 	bge	r2,zero,1211c <open+0x13c>
  {
    alt_release_fd (index);  
   120f8:	e13ff917 	ldw	r4,-28(fp)
   120fc:	00121340 	call	12134 <alt_release_fd>
    ALT_ERRNO = -status;
   12100:	0011ee00 	call	11ee0 <alt_get_errno>
   12104:	1007883a 	mov	r3,r2
   12108:	e0bffa17 	ldw	r2,-24(fp)
   1210c:	0085c83a 	sub	r2,zero,r2
   12110:	18800015 	stw	r2,0(r3)
    return -1;
   12114:	00bfffc4 	movi	r2,-1
   12118:	00000106 	br	12120 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   1211c:	e0bff917 	ldw	r2,-28(fp)
}
   12120:	e037883a 	mov	sp,fp
   12124:	dfc00117 	ldw	ra,4(sp)
   12128:	df000017 	ldw	fp,0(sp)
   1212c:	dec00204 	addi	sp,sp,8
   12130:	f800283a 	ret

00012134 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   12134:	defffe04 	addi	sp,sp,-8
   12138:	df000115 	stw	fp,4(sp)
   1213c:	df000104 	addi	fp,sp,4
   12140:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   12144:	e0bfff17 	ldw	r2,-4(fp)
   12148:	108000d0 	cmplti	r2,r2,3
   1214c:	10000d1e 	bne	r2,zero,12184 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   12150:	00800074 	movhi	r2,1
   12154:	1098b304 	addi	r2,r2,25292
   12158:	e0ffff17 	ldw	r3,-4(fp)
   1215c:	18c00324 	muli	r3,r3,12
   12160:	10c5883a 	add	r2,r2,r3
   12164:	10800204 	addi	r2,r2,8
   12168:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1216c:	00800074 	movhi	r2,1
   12170:	1098b304 	addi	r2,r2,25292
   12174:	e0ffff17 	ldw	r3,-4(fp)
   12178:	18c00324 	muli	r3,r3,12
   1217c:	10c5883a 	add	r2,r2,r3
   12180:	10000015 	stw	zero,0(r2)
  }
}
   12184:	0001883a 	nop
   12188:	e037883a 	mov	sp,fp
   1218c:	df000017 	ldw	fp,0(sp)
   12190:	dec00104 	addi	sp,sp,4
   12194:	f800283a 	ret

00012198 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   12198:	defffa04 	addi	sp,sp,-24
   1219c:	df000515 	stw	fp,20(sp)
   121a0:	df000504 	addi	fp,sp,20
   121a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   121a8:	0005303a 	rdctl	r2,status
   121ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   121b0:	e0fffc17 	ldw	r3,-16(fp)
   121b4:	00bfff84 	movi	r2,-2
   121b8:	1884703a 	and	r2,r3,r2
   121bc:	1001703a 	wrctl	status,r2
  
  return context;
   121c0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   121c4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   121c8:	e0bfff17 	ldw	r2,-4(fp)
   121cc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   121d0:	e0bffd17 	ldw	r2,-12(fp)
   121d4:	10800017 	ldw	r2,0(r2)
   121d8:	e0fffd17 	ldw	r3,-12(fp)
   121dc:	18c00117 	ldw	r3,4(r3)
   121e0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   121e4:	e0bffd17 	ldw	r2,-12(fp)
   121e8:	10800117 	ldw	r2,4(r2)
   121ec:	e0fffd17 	ldw	r3,-12(fp)
   121f0:	18c00017 	ldw	r3,0(r3)
   121f4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   121f8:	e0bffd17 	ldw	r2,-12(fp)
   121fc:	e0fffd17 	ldw	r3,-12(fp)
   12200:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   12204:	e0bffd17 	ldw	r2,-12(fp)
   12208:	e0fffd17 	ldw	r3,-12(fp)
   1220c:	10c00015 	stw	r3,0(r2)
   12210:	e0bffb17 	ldw	r2,-20(fp)
   12214:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12218:	e0bffe17 	ldw	r2,-8(fp)
   1221c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   12220:	0001883a 	nop
   12224:	e037883a 	mov	sp,fp
   12228:	df000017 	ldw	fp,0(sp)
   1222c:	dec00104 	addi	sp,sp,4
   12230:	f800283a 	ret

00012234 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12234:	defffb04 	addi	sp,sp,-20
   12238:	dfc00415 	stw	ra,16(sp)
   1223c:	df000315 	stw	fp,12(sp)
   12240:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   12244:	d0a00717 	ldw	r2,-32740(gp)
   12248:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1224c:	d0a6bb17 	ldw	r2,-25876(gp)
   12250:	10800044 	addi	r2,r2,1
   12254:	d0a6bb15 	stw	r2,-25876(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12258:	00002e06 	br	12314 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1225c:	e0bffd17 	ldw	r2,-12(fp)
   12260:	10800017 	ldw	r2,0(r2)
   12264:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   12268:	e0bffd17 	ldw	r2,-12(fp)
   1226c:	10800403 	ldbu	r2,16(r2)
   12270:	10803fcc 	andi	r2,r2,255
   12274:	10000426 	beq	r2,zero,12288 <alt_tick+0x54>
   12278:	d0a6bb17 	ldw	r2,-25876(gp)
   1227c:	1000021e 	bne	r2,zero,12288 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   12280:	e0bffd17 	ldw	r2,-12(fp)
   12284:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   12288:	e0bffd17 	ldw	r2,-12(fp)
   1228c:	10800217 	ldw	r2,8(r2)
   12290:	d0e6bb17 	ldw	r3,-25876(gp)
   12294:	18801d36 	bltu	r3,r2,1230c <alt_tick+0xd8>
   12298:	e0bffd17 	ldw	r2,-12(fp)
   1229c:	10800403 	ldbu	r2,16(r2)
   122a0:	10803fcc 	andi	r2,r2,255
   122a4:	1000191e 	bne	r2,zero,1230c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   122a8:	e0bffd17 	ldw	r2,-12(fp)
   122ac:	10800317 	ldw	r2,12(r2)
   122b0:	e0fffd17 	ldw	r3,-12(fp)
   122b4:	18c00517 	ldw	r3,20(r3)
   122b8:	1809883a 	mov	r4,r3
   122bc:	103ee83a 	callr	r2
   122c0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   122c4:	e0bfff17 	ldw	r2,-4(fp)
   122c8:	1000031e 	bne	r2,zero,122d8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   122cc:	e13ffd17 	ldw	r4,-12(fp)
   122d0:	00121980 	call	12198 <alt_alarm_stop>
   122d4:	00000d06 	br	1230c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   122d8:	e0bffd17 	ldw	r2,-12(fp)
   122dc:	10c00217 	ldw	r3,8(r2)
   122e0:	e0bfff17 	ldw	r2,-4(fp)
   122e4:	1887883a 	add	r3,r3,r2
   122e8:	e0bffd17 	ldw	r2,-12(fp)
   122ec:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   122f0:	e0bffd17 	ldw	r2,-12(fp)
   122f4:	10c00217 	ldw	r3,8(r2)
   122f8:	d0a6bb17 	ldw	r2,-25876(gp)
   122fc:	1880032e 	bgeu	r3,r2,1230c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   12300:	e0bffd17 	ldw	r2,-12(fp)
   12304:	00c00044 	movi	r3,1
   12308:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1230c:	e0bffe17 	ldw	r2,-8(fp)
   12310:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12314:	e0fffd17 	ldw	r3,-12(fp)
   12318:	d0a00704 	addi	r2,gp,-32740
   1231c:	18bfcf1e 	bne	r3,r2,1225c <__alt_data_end+0xffff225c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   12320:	0001883a 	nop
}
   12324:	0001883a 	nop
   12328:	e037883a 	mov	sp,fp
   1232c:	dfc00117 	ldw	ra,4(sp)
   12330:	df000017 	ldw	fp,0(sp)
   12334:	dec00204 	addi	sp,sp,8
   12338:	f800283a 	ret

0001233c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1233c:	deffff04 	addi	sp,sp,-4
   12340:	df000015 	stw	fp,0(sp)
   12344:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   12348:	000170fa 	wrctl	ienable,zero
}
   1234c:	0001883a 	nop
   12350:	e037883a 	mov	sp,fp
   12354:	df000017 	ldw	fp,0(sp)
   12358:	dec00104 	addi	sp,sp,4
   1235c:	f800283a 	ret

00012360 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   12360:	defffb04 	addi	sp,sp,-20
   12364:	dfc00415 	stw	ra,16(sp)
   12368:	df000315 	stw	fp,12(sp)
   1236c:	df000304 	addi	fp,sp,12
   12370:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   12374:	d0a00017 	ldw	r2,-32768(gp)
   12378:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1237c:	00003106 	br	12444 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   12380:	e0bffd17 	ldw	r2,-12(fp)
   12384:	10800217 	ldw	r2,8(r2)
   12388:	1009883a 	mov	r4,r2
   1238c:	00129b00 	call	129b0 <strlen>
   12390:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   12394:	e0bffd17 	ldw	r2,-12(fp)
   12398:	10c00217 	ldw	r3,8(r2)
   1239c:	e0bffe17 	ldw	r2,-8(fp)
   123a0:	10bfffc4 	addi	r2,r2,-1
   123a4:	1885883a 	add	r2,r3,r2
   123a8:	10800003 	ldbu	r2,0(r2)
   123ac:	10803fcc 	andi	r2,r2,255
   123b0:	1080201c 	xori	r2,r2,128
   123b4:	10bfe004 	addi	r2,r2,-128
   123b8:	10800bd8 	cmpnei	r2,r2,47
   123bc:	1000031e 	bne	r2,zero,123cc <alt_find_file+0x6c>
    {
      len -= 1;
   123c0:	e0bffe17 	ldw	r2,-8(fp)
   123c4:	10bfffc4 	addi	r2,r2,-1
   123c8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   123cc:	e0bffe17 	ldw	r2,-8(fp)
   123d0:	e0ffff17 	ldw	r3,-4(fp)
   123d4:	1885883a 	add	r2,r3,r2
   123d8:	10800003 	ldbu	r2,0(r2)
   123dc:	10803fcc 	andi	r2,r2,255
   123e0:	1080201c 	xori	r2,r2,128
   123e4:	10bfe004 	addi	r2,r2,-128
   123e8:	10800be0 	cmpeqi	r2,r2,47
   123ec:	1000081e 	bne	r2,zero,12410 <alt_find_file+0xb0>
   123f0:	e0bffe17 	ldw	r2,-8(fp)
   123f4:	e0ffff17 	ldw	r3,-4(fp)
   123f8:	1885883a 	add	r2,r3,r2
   123fc:	10800003 	ldbu	r2,0(r2)
   12400:	10803fcc 	andi	r2,r2,255
   12404:	1080201c 	xori	r2,r2,128
   12408:	10bfe004 	addi	r2,r2,-128
   1240c:	10000a1e 	bne	r2,zero,12438 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   12410:	e0bffd17 	ldw	r2,-12(fp)
   12414:	10800217 	ldw	r2,8(r2)
   12418:	e0fffe17 	ldw	r3,-8(fp)
   1241c:	180d883a 	mov	r6,r3
   12420:	e17fff17 	ldw	r5,-4(fp)
   12424:	1009883a 	mov	r4,r2
   12428:	00126840 	call	12684 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1242c:	1000021e 	bne	r2,zero,12438 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   12430:	e0bffd17 	ldw	r2,-12(fp)
   12434:	00000706 	br	12454 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   12438:	e0bffd17 	ldw	r2,-12(fp)
   1243c:	10800017 	ldw	r2,0(r2)
   12440:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12444:	e0fffd17 	ldw	r3,-12(fp)
   12448:	d0a00004 	addi	r2,gp,-32768
   1244c:	18bfcc1e 	bne	r3,r2,12380 <__alt_data_end+0xffff2380>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   12450:	0005883a 	mov	r2,zero
}
   12454:	e037883a 	mov	sp,fp
   12458:	dfc00117 	ldw	ra,4(sp)
   1245c:	df000017 	ldw	fp,0(sp)
   12460:	dec00204 	addi	sp,sp,8
   12464:	f800283a 	ret

00012468 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   12468:	defffc04 	addi	sp,sp,-16
   1246c:	df000315 	stw	fp,12(sp)
   12470:	df000304 	addi	fp,sp,12
   12474:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   12478:	00bffa04 	movi	r2,-24
   1247c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12480:	e03ffd15 	stw	zero,-12(fp)
   12484:	00001906 	br	124ec <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   12488:	00800074 	movhi	r2,1
   1248c:	1098b304 	addi	r2,r2,25292
   12490:	e0fffd17 	ldw	r3,-12(fp)
   12494:	18c00324 	muli	r3,r3,12
   12498:	10c5883a 	add	r2,r2,r3
   1249c:	10800017 	ldw	r2,0(r2)
   124a0:	10000f1e 	bne	r2,zero,124e0 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   124a4:	00800074 	movhi	r2,1
   124a8:	1098b304 	addi	r2,r2,25292
   124ac:	e0fffd17 	ldw	r3,-12(fp)
   124b0:	18c00324 	muli	r3,r3,12
   124b4:	10c5883a 	add	r2,r2,r3
   124b8:	e0ffff17 	ldw	r3,-4(fp)
   124bc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   124c0:	d0e00417 	ldw	r3,-32752(gp)
   124c4:	e0bffd17 	ldw	r2,-12(fp)
   124c8:	1880020e 	bge	r3,r2,124d4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   124cc:	e0bffd17 	ldw	r2,-12(fp)
   124d0:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
   124d4:	e0bffd17 	ldw	r2,-12(fp)
   124d8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   124dc:	00000606 	br	124f8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   124e0:	e0bffd17 	ldw	r2,-12(fp)
   124e4:	10800044 	addi	r2,r2,1
   124e8:	e0bffd15 	stw	r2,-12(fp)
   124ec:	e0bffd17 	ldw	r2,-12(fp)
   124f0:	10800810 	cmplti	r2,r2,32
   124f4:	103fe41e 	bne	r2,zero,12488 <__alt_data_end+0xffff2488>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   124f8:	e0bffe17 	ldw	r2,-8(fp)
}
   124fc:	e037883a 	mov	sp,fp
   12500:	df000017 	ldw	fp,0(sp)
   12504:	dec00104 	addi	sp,sp,4
   12508:	f800283a 	ret

0001250c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1250c:	defffb04 	addi	sp,sp,-20
   12510:	df000415 	stw	fp,16(sp)
   12514:	df000404 	addi	fp,sp,16
   12518:	e13ffe15 	stw	r4,-8(fp)
   1251c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   12520:	e0bfff17 	ldw	r2,-4(fp)
   12524:	10840070 	cmpltui	r2,r2,4097
   12528:	1000021e 	bne	r2,zero,12534 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1252c:	00840004 	movi	r2,4096
   12530:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   12534:	e0fffe17 	ldw	r3,-8(fp)
   12538:	e0bfff17 	ldw	r2,-4(fp)
   1253c:	1885883a 	add	r2,r3,r2
   12540:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   12544:	e0bffe17 	ldw	r2,-8(fp)
   12548:	e0bffc15 	stw	r2,-16(fp)
   1254c:	00000506 	br	12564 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   12550:	e0bffc17 	ldw	r2,-16(fp)
   12554:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   12558:	e0bffc17 	ldw	r2,-16(fp)
   1255c:	10800804 	addi	r2,r2,32
   12560:	e0bffc15 	stw	r2,-16(fp)
   12564:	e0fffc17 	ldw	r3,-16(fp)
   12568:	e0bffd17 	ldw	r2,-12(fp)
   1256c:	18bff836 	bltu	r3,r2,12550 <__alt_data_end+0xffff2550>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   12570:	e0bffe17 	ldw	r2,-8(fp)
   12574:	108007cc 	andi	r2,r2,31
   12578:	10000226 	beq	r2,zero,12584 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1257c:	e0bffc17 	ldw	r2,-16(fp)
   12580:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   12584:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   12588:	0001883a 	nop
   1258c:	e037883a 	mov	sp,fp
   12590:	df000017 	ldw	fp,0(sp)
   12594:	dec00104 	addi	sp,sp,4
   12598:	f800283a 	ret

0001259c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1259c:	defffe04 	addi	sp,sp,-8
   125a0:	df000115 	stw	fp,4(sp)
   125a4:	df000104 	addi	fp,sp,4
   125a8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   125ac:	e0bfff17 	ldw	r2,-4(fp)
   125b0:	10bffe84 	addi	r2,r2,-6
   125b4:	10c00428 	cmpgeui	r3,r2,16
   125b8:	18001a1e 	bne	r3,zero,12624 <alt_exception_cause_generated_bad_addr+0x88>
   125bc:	100690ba 	slli	r3,r2,2
   125c0:	00800074 	movhi	r2,1
   125c4:	10897504 	addi	r2,r2,9684
   125c8:	1885883a 	add	r2,r3,r2
   125cc:	10800017 	ldw	r2,0(r2)
   125d0:	1000683a 	jmp	r2
   125d4:	00012614 	movui	zero,1176
   125d8:	00012614 	movui	zero,1176
   125dc:	00012624 	muli	zero,zero,1176
   125e0:	00012624 	muli	zero,zero,1176
   125e4:	00012624 	muli	zero,zero,1176
   125e8:	00012614 	movui	zero,1176
   125ec:	0001261c 	xori	zero,zero,1176
   125f0:	00012624 	muli	zero,zero,1176
   125f4:	00012614 	movui	zero,1176
   125f8:	00012614 	movui	zero,1176
   125fc:	00012624 	muli	zero,zero,1176
   12600:	00012614 	movui	zero,1176
   12604:	0001261c 	xori	zero,zero,1176
   12608:	00012624 	muli	zero,zero,1176
   1260c:	00012624 	muli	zero,zero,1176
   12610:	00012614 	movui	zero,1176
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   12614:	00800044 	movi	r2,1
   12618:	00000306 	br	12628 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1261c:	0005883a 	mov	r2,zero
   12620:	00000106 	br	12628 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   12624:	0005883a 	mov	r2,zero
  }
}
   12628:	e037883a 	mov	sp,fp
   1262c:	df000017 	ldw	fp,0(sp)
   12630:	dec00104 	addi	sp,sp,4
   12634:	f800283a 	ret

00012638 <atexit>:
   12638:	200b883a 	mov	r5,r4
   1263c:	000f883a 	mov	r7,zero
   12640:	000d883a 	mov	r6,zero
   12644:	0009883a 	mov	r4,zero
   12648:	0012cf41 	jmpi	12cf4 <__register_exitproc>

0001264c <exit>:
   1264c:	defffe04 	addi	sp,sp,-8
   12650:	000b883a 	mov	r5,zero
   12654:	dc000015 	stw	r16,0(sp)
   12658:	dfc00115 	stw	ra,4(sp)
   1265c:	2021883a 	mov	r16,r4
   12660:	0012e0c0 	call	12e0c <__call_exitprocs>
   12664:	00800074 	movhi	r2,1
   12668:	109b2704 	addi	r2,r2,27804
   1266c:	11000017 	ldw	r4,0(r2)
   12670:	20800f17 	ldw	r2,60(r4)
   12674:	10000126 	beq	r2,zero,1267c <exit+0x30>
   12678:	103ee83a 	callr	r2
   1267c:	8009883a 	mov	r4,r16
   12680:	0014b380 	call	14b38 <_exit>

00012684 <memcmp>:
   12684:	01c000c4 	movi	r7,3
   12688:	3980192e 	bgeu	r7,r6,126f0 <memcmp+0x6c>
   1268c:	2144b03a 	or	r2,r4,r5
   12690:	11c4703a 	and	r2,r2,r7
   12694:	10000f26 	beq	r2,zero,126d4 <memcmp+0x50>
   12698:	20800003 	ldbu	r2,0(r4)
   1269c:	28c00003 	ldbu	r3,0(r5)
   126a0:	10c0151e 	bne	r2,r3,126f8 <memcmp+0x74>
   126a4:	31bfff84 	addi	r6,r6,-2
   126a8:	01ffffc4 	movi	r7,-1
   126ac:	00000406 	br	126c0 <memcmp+0x3c>
   126b0:	20800003 	ldbu	r2,0(r4)
   126b4:	28c00003 	ldbu	r3,0(r5)
   126b8:	31bfffc4 	addi	r6,r6,-1
   126bc:	10c00e1e 	bne	r2,r3,126f8 <memcmp+0x74>
   126c0:	21000044 	addi	r4,r4,1
   126c4:	29400044 	addi	r5,r5,1
   126c8:	31fff91e 	bne	r6,r7,126b0 <__alt_data_end+0xffff26b0>
   126cc:	0005883a 	mov	r2,zero
   126d0:	f800283a 	ret
   126d4:	20c00017 	ldw	r3,0(r4)
   126d8:	28800017 	ldw	r2,0(r5)
   126dc:	18bfee1e 	bne	r3,r2,12698 <__alt_data_end+0xffff2698>
   126e0:	31bfff04 	addi	r6,r6,-4
   126e4:	21000104 	addi	r4,r4,4
   126e8:	29400104 	addi	r5,r5,4
   126ec:	39bff936 	bltu	r7,r6,126d4 <__alt_data_end+0xffff26d4>
   126f0:	303fe91e 	bne	r6,zero,12698 <__alt_data_end+0xffff2698>
   126f4:	003ff506 	br	126cc <__alt_data_end+0xffff26cc>
   126f8:	10c5c83a 	sub	r2,r2,r3
   126fc:	f800283a 	ret

00012700 <memcpy>:
   12700:	defffd04 	addi	sp,sp,-12
   12704:	dfc00215 	stw	ra,8(sp)
   12708:	dc400115 	stw	r17,4(sp)
   1270c:	dc000015 	stw	r16,0(sp)
   12710:	00c003c4 	movi	r3,15
   12714:	2005883a 	mov	r2,r4
   12718:	1980452e 	bgeu	r3,r6,12830 <memcpy+0x130>
   1271c:	2906b03a 	or	r3,r5,r4
   12720:	18c000cc 	andi	r3,r3,3
   12724:	1800441e 	bne	r3,zero,12838 <memcpy+0x138>
   12728:	347ffc04 	addi	r17,r6,-16
   1272c:	8822d13a 	srli	r17,r17,4
   12730:	28c00104 	addi	r3,r5,4
   12734:	23400104 	addi	r13,r4,4
   12738:	8820913a 	slli	r16,r17,4
   1273c:	2b000204 	addi	r12,r5,8
   12740:	22c00204 	addi	r11,r4,8
   12744:	84000504 	addi	r16,r16,20
   12748:	2a800304 	addi	r10,r5,12
   1274c:	22400304 	addi	r9,r4,12
   12750:	2c21883a 	add	r16,r5,r16
   12754:	2811883a 	mov	r8,r5
   12758:	200f883a 	mov	r7,r4
   1275c:	41000017 	ldw	r4,0(r8)
   12760:	1fc00017 	ldw	ra,0(r3)
   12764:	63c00017 	ldw	r15,0(r12)
   12768:	39000015 	stw	r4,0(r7)
   1276c:	53800017 	ldw	r14,0(r10)
   12770:	6fc00015 	stw	ra,0(r13)
   12774:	5bc00015 	stw	r15,0(r11)
   12778:	4b800015 	stw	r14,0(r9)
   1277c:	18c00404 	addi	r3,r3,16
   12780:	39c00404 	addi	r7,r7,16
   12784:	42000404 	addi	r8,r8,16
   12788:	6b400404 	addi	r13,r13,16
   1278c:	63000404 	addi	r12,r12,16
   12790:	5ac00404 	addi	r11,r11,16
   12794:	52800404 	addi	r10,r10,16
   12798:	4a400404 	addi	r9,r9,16
   1279c:	1c3fef1e 	bne	r3,r16,1275c <__alt_data_end+0xffff275c>
   127a0:	89c00044 	addi	r7,r17,1
   127a4:	380e913a 	slli	r7,r7,4
   127a8:	310003cc 	andi	r4,r6,15
   127ac:	02c000c4 	movi	r11,3
   127b0:	11c7883a 	add	r3,r2,r7
   127b4:	29cb883a 	add	r5,r5,r7
   127b8:	5900212e 	bgeu	r11,r4,12840 <memcpy+0x140>
   127bc:	1813883a 	mov	r9,r3
   127c0:	2811883a 	mov	r8,r5
   127c4:	200f883a 	mov	r7,r4
   127c8:	42800017 	ldw	r10,0(r8)
   127cc:	4a400104 	addi	r9,r9,4
   127d0:	39ffff04 	addi	r7,r7,-4
   127d4:	4abfff15 	stw	r10,-4(r9)
   127d8:	42000104 	addi	r8,r8,4
   127dc:	59fffa36 	bltu	r11,r7,127c8 <__alt_data_end+0xffff27c8>
   127e0:	213fff04 	addi	r4,r4,-4
   127e4:	2008d0ba 	srli	r4,r4,2
   127e8:	318000cc 	andi	r6,r6,3
   127ec:	21000044 	addi	r4,r4,1
   127f0:	2109883a 	add	r4,r4,r4
   127f4:	2109883a 	add	r4,r4,r4
   127f8:	1907883a 	add	r3,r3,r4
   127fc:	290b883a 	add	r5,r5,r4
   12800:	30000626 	beq	r6,zero,1281c <memcpy+0x11c>
   12804:	198d883a 	add	r6,r3,r6
   12808:	29c00003 	ldbu	r7,0(r5)
   1280c:	18c00044 	addi	r3,r3,1
   12810:	29400044 	addi	r5,r5,1
   12814:	19ffffc5 	stb	r7,-1(r3)
   12818:	19bffb1e 	bne	r3,r6,12808 <__alt_data_end+0xffff2808>
   1281c:	dfc00217 	ldw	ra,8(sp)
   12820:	dc400117 	ldw	r17,4(sp)
   12824:	dc000017 	ldw	r16,0(sp)
   12828:	dec00304 	addi	sp,sp,12
   1282c:	f800283a 	ret
   12830:	2007883a 	mov	r3,r4
   12834:	003ff206 	br	12800 <__alt_data_end+0xffff2800>
   12838:	2007883a 	mov	r3,r4
   1283c:	003ff106 	br	12804 <__alt_data_end+0xffff2804>
   12840:	200d883a 	mov	r6,r4
   12844:	003fee06 	br	12800 <__alt_data_end+0xffff2800>

00012848 <_putc_r>:
   12848:	defffc04 	addi	sp,sp,-16
   1284c:	dc000215 	stw	r16,8(sp)
   12850:	dfc00315 	stw	ra,12(sp)
   12854:	2021883a 	mov	r16,r4
   12858:	20000226 	beq	r4,zero,12864 <_putc_r+0x1c>
   1285c:	20800e17 	ldw	r2,56(r4)
   12860:	10001b26 	beq	r2,zero,128d0 <_putc_r+0x88>
   12864:	30800217 	ldw	r2,8(r6)
   12868:	10bfffc4 	addi	r2,r2,-1
   1286c:	30800215 	stw	r2,8(r6)
   12870:	10000a16 	blt	r2,zero,1289c <_putc_r+0x54>
   12874:	30800017 	ldw	r2,0(r6)
   12878:	11400005 	stb	r5,0(r2)
   1287c:	30800017 	ldw	r2,0(r6)
   12880:	10c00044 	addi	r3,r2,1
   12884:	30c00015 	stw	r3,0(r6)
   12888:	10800003 	ldbu	r2,0(r2)
   1288c:	dfc00317 	ldw	ra,12(sp)
   12890:	dc000217 	ldw	r16,8(sp)
   12894:	dec00404 	addi	sp,sp,16
   12898:	f800283a 	ret
   1289c:	30c00617 	ldw	r3,24(r6)
   128a0:	10c00616 	blt	r2,r3,128bc <_putc_r+0x74>
   128a4:	30800017 	ldw	r2,0(r6)
   128a8:	00c00284 	movi	r3,10
   128ac:	11400005 	stb	r5,0(r2)
   128b0:	30800017 	ldw	r2,0(r6)
   128b4:	11400003 	ldbu	r5,0(r2)
   128b8:	28fff11e 	bne	r5,r3,12880 <__alt_data_end+0xffff2880>
   128bc:	8009883a 	mov	r4,r16
   128c0:	dfc00317 	ldw	ra,12(sp)
   128c4:	dc000217 	ldw	r16,8(sp)
   128c8:	dec00404 	addi	sp,sp,16
   128cc:	0012a481 	jmpi	12a48 <__swbuf_r>
   128d0:	d9400015 	stw	r5,0(sp)
   128d4:	d9800115 	stw	r6,4(sp)
   128d8:	00135840 	call	13584 <__sinit>
   128dc:	d9800117 	ldw	r6,4(sp)
   128e0:	d9400017 	ldw	r5,0(sp)
   128e4:	003fdf06 	br	12864 <__alt_data_end+0xffff2864>

000128e8 <putc>:
   128e8:	00800074 	movhi	r2,1
   128ec:	defffc04 	addi	sp,sp,-16
   128f0:	109b2804 	addi	r2,r2,27808
   128f4:	dc000115 	stw	r16,4(sp)
   128f8:	14000017 	ldw	r16,0(r2)
   128fc:	dc400215 	stw	r17,8(sp)
   12900:	dfc00315 	stw	ra,12(sp)
   12904:	2023883a 	mov	r17,r4
   12908:	80000226 	beq	r16,zero,12914 <putc+0x2c>
   1290c:	80800e17 	ldw	r2,56(r16)
   12910:	10001a26 	beq	r2,zero,1297c <putc+0x94>
   12914:	28800217 	ldw	r2,8(r5)
   12918:	10bfffc4 	addi	r2,r2,-1
   1291c:	28800215 	stw	r2,8(r5)
   12920:	10000b16 	blt	r2,zero,12950 <putc+0x68>
   12924:	28800017 	ldw	r2,0(r5)
   12928:	14400005 	stb	r17,0(r2)
   1292c:	28800017 	ldw	r2,0(r5)
   12930:	10c00044 	addi	r3,r2,1
   12934:	28c00015 	stw	r3,0(r5)
   12938:	10800003 	ldbu	r2,0(r2)
   1293c:	dfc00317 	ldw	ra,12(sp)
   12940:	dc400217 	ldw	r17,8(sp)
   12944:	dc000117 	ldw	r16,4(sp)
   12948:	dec00404 	addi	sp,sp,16
   1294c:	f800283a 	ret
   12950:	28c00617 	ldw	r3,24(r5)
   12954:	10c00e16 	blt	r2,r3,12990 <putc+0xa8>
   12958:	28800017 	ldw	r2,0(r5)
   1295c:	01000284 	movi	r4,10
   12960:	14400005 	stb	r17,0(r2)
   12964:	28800017 	ldw	r2,0(r5)
   12968:	10c00003 	ldbu	r3,0(r2)
   1296c:	193ff01e 	bne	r3,r4,12930 <__alt_data_end+0xffff2930>
   12970:	280d883a 	mov	r6,r5
   12974:	180b883a 	mov	r5,r3
   12978:	00000706 	br	12998 <putc+0xb0>
   1297c:	8009883a 	mov	r4,r16
   12980:	d9400015 	stw	r5,0(sp)
   12984:	00135840 	call	13584 <__sinit>
   12988:	d9400017 	ldw	r5,0(sp)
   1298c:	003fe106 	br	12914 <__alt_data_end+0xffff2914>
   12990:	280d883a 	mov	r6,r5
   12994:	880b883a 	mov	r5,r17
   12998:	8009883a 	mov	r4,r16
   1299c:	dfc00317 	ldw	ra,12(sp)
   129a0:	dc400217 	ldw	r17,8(sp)
   129a4:	dc000117 	ldw	r16,4(sp)
   129a8:	dec00404 	addi	sp,sp,16
   129ac:	0012a481 	jmpi	12a48 <__swbuf_r>

000129b0 <strlen>:
   129b0:	208000cc 	andi	r2,r4,3
   129b4:	10002026 	beq	r2,zero,12a38 <strlen+0x88>
   129b8:	20800007 	ldb	r2,0(r4)
   129bc:	10002026 	beq	r2,zero,12a40 <strlen+0x90>
   129c0:	2005883a 	mov	r2,r4
   129c4:	00000206 	br	129d0 <strlen+0x20>
   129c8:	10c00007 	ldb	r3,0(r2)
   129cc:	18001826 	beq	r3,zero,12a30 <strlen+0x80>
   129d0:	10800044 	addi	r2,r2,1
   129d4:	10c000cc 	andi	r3,r2,3
   129d8:	183ffb1e 	bne	r3,zero,129c8 <__alt_data_end+0xffff29c8>
   129dc:	10c00017 	ldw	r3,0(r2)
   129e0:	01ffbff4 	movhi	r7,65279
   129e4:	39ffbfc4 	addi	r7,r7,-257
   129e8:	00ca303a 	nor	r5,zero,r3
   129ec:	01a02074 	movhi	r6,32897
   129f0:	19c7883a 	add	r3,r3,r7
   129f4:	31a02004 	addi	r6,r6,-32640
   129f8:	1946703a 	and	r3,r3,r5
   129fc:	1986703a 	and	r3,r3,r6
   12a00:	1800091e 	bne	r3,zero,12a28 <strlen+0x78>
   12a04:	10800104 	addi	r2,r2,4
   12a08:	10c00017 	ldw	r3,0(r2)
   12a0c:	19cb883a 	add	r5,r3,r7
   12a10:	00c6303a 	nor	r3,zero,r3
   12a14:	28c6703a 	and	r3,r5,r3
   12a18:	1986703a 	and	r3,r3,r6
   12a1c:	183ff926 	beq	r3,zero,12a04 <__alt_data_end+0xffff2a04>
   12a20:	00000106 	br	12a28 <strlen+0x78>
   12a24:	10800044 	addi	r2,r2,1
   12a28:	10c00007 	ldb	r3,0(r2)
   12a2c:	183ffd1e 	bne	r3,zero,12a24 <__alt_data_end+0xffff2a24>
   12a30:	1105c83a 	sub	r2,r2,r4
   12a34:	f800283a 	ret
   12a38:	2005883a 	mov	r2,r4
   12a3c:	003fe706 	br	129dc <__alt_data_end+0xffff29dc>
   12a40:	0005883a 	mov	r2,zero
   12a44:	f800283a 	ret

00012a48 <__swbuf_r>:
   12a48:	defffb04 	addi	sp,sp,-20
   12a4c:	dcc00315 	stw	r19,12(sp)
   12a50:	dc800215 	stw	r18,8(sp)
   12a54:	dc000015 	stw	r16,0(sp)
   12a58:	dfc00415 	stw	ra,16(sp)
   12a5c:	dc400115 	stw	r17,4(sp)
   12a60:	2025883a 	mov	r18,r4
   12a64:	2827883a 	mov	r19,r5
   12a68:	3021883a 	mov	r16,r6
   12a6c:	20000226 	beq	r4,zero,12a78 <__swbuf_r+0x30>
   12a70:	20800e17 	ldw	r2,56(r4)
   12a74:	10004226 	beq	r2,zero,12b80 <__swbuf_r+0x138>
   12a78:	80800617 	ldw	r2,24(r16)
   12a7c:	8100030b 	ldhu	r4,12(r16)
   12a80:	80800215 	stw	r2,8(r16)
   12a84:	2080020c 	andi	r2,r4,8
   12a88:	10003626 	beq	r2,zero,12b64 <__swbuf_r+0x11c>
   12a8c:	80c00417 	ldw	r3,16(r16)
   12a90:	18003426 	beq	r3,zero,12b64 <__swbuf_r+0x11c>
   12a94:	2088000c 	andi	r2,r4,8192
   12a98:	9c403fcc 	andi	r17,r19,255
   12a9c:	10001a26 	beq	r2,zero,12b08 <__swbuf_r+0xc0>
   12aa0:	80800017 	ldw	r2,0(r16)
   12aa4:	81000517 	ldw	r4,20(r16)
   12aa8:	10c7c83a 	sub	r3,r2,r3
   12aac:	1900200e 	bge	r3,r4,12b30 <__swbuf_r+0xe8>
   12ab0:	18c00044 	addi	r3,r3,1
   12ab4:	81000217 	ldw	r4,8(r16)
   12ab8:	11400044 	addi	r5,r2,1
   12abc:	81400015 	stw	r5,0(r16)
   12ac0:	213fffc4 	addi	r4,r4,-1
   12ac4:	81000215 	stw	r4,8(r16)
   12ac8:	14c00005 	stb	r19,0(r2)
   12acc:	80800517 	ldw	r2,20(r16)
   12ad0:	10c01e26 	beq	r2,r3,12b4c <__swbuf_r+0x104>
   12ad4:	8080030b 	ldhu	r2,12(r16)
   12ad8:	1080004c 	andi	r2,r2,1
   12adc:	10000226 	beq	r2,zero,12ae8 <__swbuf_r+0xa0>
   12ae0:	00800284 	movi	r2,10
   12ae4:	88801926 	beq	r17,r2,12b4c <__swbuf_r+0x104>
   12ae8:	8805883a 	mov	r2,r17
   12aec:	dfc00417 	ldw	ra,16(sp)
   12af0:	dcc00317 	ldw	r19,12(sp)
   12af4:	dc800217 	ldw	r18,8(sp)
   12af8:	dc400117 	ldw	r17,4(sp)
   12afc:	dc000017 	ldw	r16,0(sp)
   12b00:	dec00504 	addi	sp,sp,20
   12b04:	f800283a 	ret
   12b08:	81401917 	ldw	r5,100(r16)
   12b0c:	00b7ffc4 	movi	r2,-8193
   12b10:	21080014 	ori	r4,r4,8192
   12b14:	2884703a 	and	r2,r5,r2
   12b18:	80801915 	stw	r2,100(r16)
   12b1c:	80800017 	ldw	r2,0(r16)
   12b20:	8100030d 	sth	r4,12(r16)
   12b24:	81000517 	ldw	r4,20(r16)
   12b28:	10c7c83a 	sub	r3,r2,r3
   12b2c:	193fe016 	blt	r3,r4,12ab0 <__alt_data_end+0xffff2ab0>
   12b30:	800b883a 	mov	r5,r16
   12b34:	9009883a 	mov	r4,r18
   12b38:	00131a80 	call	131a8 <_fflush_r>
   12b3c:	1000071e 	bne	r2,zero,12b5c <__swbuf_r+0x114>
   12b40:	80800017 	ldw	r2,0(r16)
   12b44:	00c00044 	movi	r3,1
   12b48:	003fda06 	br	12ab4 <__alt_data_end+0xffff2ab4>
   12b4c:	800b883a 	mov	r5,r16
   12b50:	9009883a 	mov	r4,r18
   12b54:	00131a80 	call	131a8 <_fflush_r>
   12b58:	103fe326 	beq	r2,zero,12ae8 <__alt_data_end+0xffff2ae8>
   12b5c:	00bfffc4 	movi	r2,-1
   12b60:	003fe206 	br	12aec <__alt_data_end+0xffff2aec>
   12b64:	800b883a 	mov	r5,r16
   12b68:	9009883a 	mov	r4,r18
   12b6c:	0012ba00 	call	12ba0 <__swsetup_r>
   12b70:	103ffa1e 	bne	r2,zero,12b5c <__alt_data_end+0xffff2b5c>
   12b74:	8100030b 	ldhu	r4,12(r16)
   12b78:	80c00417 	ldw	r3,16(r16)
   12b7c:	003fc506 	br	12a94 <__alt_data_end+0xffff2a94>
   12b80:	00135840 	call	13584 <__sinit>
   12b84:	003fbc06 	br	12a78 <__alt_data_end+0xffff2a78>

00012b88 <__swbuf>:
   12b88:	00800074 	movhi	r2,1
   12b8c:	109b2804 	addi	r2,r2,27808
   12b90:	280d883a 	mov	r6,r5
   12b94:	200b883a 	mov	r5,r4
   12b98:	11000017 	ldw	r4,0(r2)
   12b9c:	0012a481 	jmpi	12a48 <__swbuf_r>

00012ba0 <__swsetup_r>:
   12ba0:	00800074 	movhi	r2,1
   12ba4:	defffd04 	addi	sp,sp,-12
   12ba8:	109b2804 	addi	r2,r2,27808
   12bac:	dc400115 	stw	r17,4(sp)
   12bb0:	2023883a 	mov	r17,r4
   12bb4:	11000017 	ldw	r4,0(r2)
   12bb8:	dc000015 	stw	r16,0(sp)
   12bbc:	dfc00215 	stw	ra,8(sp)
   12bc0:	2821883a 	mov	r16,r5
   12bc4:	20000226 	beq	r4,zero,12bd0 <__swsetup_r+0x30>
   12bc8:	20800e17 	ldw	r2,56(r4)
   12bcc:	10003126 	beq	r2,zero,12c94 <__swsetup_r+0xf4>
   12bd0:	8080030b 	ldhu	r2,12(r16)
   12bd4:	10c0020c 	andi	r3,r2,8
   12bd8:	1009883a 	mov	r4,r2
   12bdc:	18000f26 	beq	r3,zero,12c1c <__swsetup_r+0x7c>
   12be0:	80c00417 	ldw	r3,16(r16)
   12be4:	18001526 	beq	r3,zero,12c3c <__swsetup_r+0x9c>
   12be8:	1100004c 	andi	r4,r2,1
   12bec:	20001c1e 	bne	r4,zero,12c60 <__swsetup_r+0xc0>
   12bf0:	1080008c 	andi	r2,r2,2
   12bf4:	1000291e 	bne	r2,zero,12c9c <__swsetup_r+0xfc>
   12bf8:	80800517 	ldw	r2,20(r16)
   12bfc:	80800215 	stw	r2,8(r16)
   12c00:	18001c26 	beq	r3,zero,12c74 <__swsetup_r+0xd4>
   12c04:	0005883a 	mov	r2,zero
   12c08:	dfc00217 	ldw	ra,8(sp)
   12c0c:	dc400117 	ldw	r17,4(sp)
   12c10:	dc000017 	ldw	r16,0(sp)
   12c14:	dec00304 	addi	sp,sp,12
   12c18:	f800283a 	ret
   12c1c:	2080040c 	andi	r2,r4,16
   12c20:	10002e26 	beq	r2,zero,12cdc <__swsetup_r+0x13c>
   12c24:	2080010c 	andi	r2,r4,4
   12c28:	10001e1e 	bne	r2,zero,12ca4 <__swsetup_r+0x104>
   12c2c:	80c00417 	ldw	r3,16(r16)
   12c30:	20800214 	ori	r2,r4,8
   12c34:	8080030d 	sth	r2,12(r16)
   12c38:	183feb1e 	bne	r3,zero,12be8 <__alt_data_end+0xffff2be8>
   12c3c:	1100a00c 	andi	r4,r2,640
   12c40:	01408004 	movi	r5,512
   12c44:	217fe826 	beq	r4,r5,12be8 <__alt_data_end+0xffff2be8>
   12c48:	800b883a 	mov	r5,r16
   12c4c:	8809883a 	mov	r4,r17
   12c50:	0013b900 	call	13b90 <__smakebuf_r>
   12c54:	8080030b 	ldhu	r2,12(r16)
   12c58:	80c00417 	ldw	r3,16(r16)
   12c5c:	003fe206 	br	12be8 <__alt_data_end+0xffff2be8>
   12c60:	80800517 	ldw	r2,20(r16)
   12c64:	80000215 	stw	zero,8(r16)
   12c68:	0085c83a 	sub	r2,zero,r2
   12c6c:	80800615 	stw	r2,24(r16)
   12c70:	183fe41e 	bne	r3,zero,12c04 <__alt_data_end+0xffff2c04>
   12c74:	80c0030b 	ldhu	r3,12(r16)
   12c78:	0005883a 	mov	r2,zero
   12c7c:	1900200c 	andi	r4,r3,128
   12c80:	203fe126 	beq	r4,zero,12c08 <__alt_data_end+0xffff2c08>
   12c84:	18c01014 	ori	r3,r3,64
   12c88:	80c0030d 	sth	r3,12(r16)
   12c8c:	00bfffc4 	movi	r2,-1
   12c90:	003fdd06 	br	12c08 <__alt_data_end+0xffff2c08>
   12c94:	00135840 	call	13584 <__sinit>
   12c98:	003fcd06 	br	12bd0 <__alt_data_end+0xffff2bd0>
   12c9c:	0005883a 	mov	r2,zero
   12ca0:	003fd606 	br	12bfc <__alt_data_end+0xffff2bfc>
   12ca4:	81400c17 	ldw	r5,48(r16)
   12ca8:	28000626 	beq	r5,zero,12cc4 <__swsetup_r+0x124>
   12cac:	80801004 	addi	r2,r16,64
   12cb0:	28800326 	beq	r5,r2,12cc0 <__swsetup_r+0x120>
   12cb4:	8809883a 	mov	r4,r17
   12cb8:	00136f80 	call	136f8 <_free_r>
   12cbc:	8100030b 	ldhu	r4,12(r16)
   12cc0:	80000c15 	stw	zero,48(r16)
   12cc4:	80c00417 	ldw	r3,16(r16)
   12cc8:	00bff6c4 	movi	r2,-37
   12ccc:	1108703a 	and	r4,r2,r4
   12cd0:	80000115 	stw	zero,4(r16)
   12cd4:	80c00015 	stw	r3,0(r16)
   12cd8:	003fd506 	br	12c30 <__alt_data_end+0xffff2c30>
   12cdc:	00800244 	movi	r2,9
   12ce0:	88800015 	stw	r2,0(r17)
   12ce4:	20801014 	ori	r2,r4,64
   12ce8:	8080030d 	sth	r2,12(r16)
   12cec:	00bfffc4 	movi	r2,-1
   12cf0:	003fc506 	br	12c08 <__alt_data_end+0xffff2c08>

00012cf4 <__register_exitproc>:
   12cf4:	defffa04 	addi	sp,sp,-24
   12cf8:	dc000315 	stw	r16,12(sp)
   12cfc:	04000074 	movhi	r16,1
   12d00:	841b2704 	addi	r16,r16,27804
   12d04:	80c00017 	ldw	r3,0(r16)
   12d08:	dc400415 	stw	r17,16(sp)
   12d0c:	dfc00515 	stw	ra,20(sp)
   12d10:	18805217 	ldw	r2,328(r3)
   12d14:	2023883a 	mov	r17,r4
   12d18:	10003726 	beq	r2,zero,12df8 <__register_exitproc+0x104>
   12d1c:	10c00117 	ldw	r3,4(r2)
   12d20:	010007c4 	movi	r4,31
   12d24:	20c00e16 	blt	r4,r3,12d60 <__register_exitproc+0x6c>
   12d28:	1a000044 	addi	r8,r3,1
   12d2c:	8800221e 	bne	r17,zero,12db8 <__register_exitproc+0xc4>
   12d30:	18c00084 	addi	r3,r3,2
   12d34:	18c7883a 	add	r3,r3,r3
   12d38:	18c7883a 	add	r3,r3,r3
   12d3c:	12000115 	stw	r8,4(r2)
   12d40:	10c7883a 	add	r3,r2,r3
   12d44:	19400015 	stw	r5,0(r3)
   12d48:	0005883a 	mov	r2,zero
   12d4c:	dfc00517 	ldw	ra,20(sp)
   12d50:	dc400417 	ldw	r17,16(sp)
   12d54:	dc000317 	ldw	r16,12(sp)
   12d58:	dec00604 	addi	sp,sp,24
   12d5c:	f800283a 	ret
   12d60:	00800034 	movhi	r2,0
   12d64:	10800004 	addi	r2,r2,0
   12d68:	10002626 	beq	r2,zero,12e04 <__register_exitproc+0x110>
   12d6c:	01006404 	movi	r4,400
   12d70:	d9400015 	stw	r5,0(sp)
   12d74:	d9800115 	stw	r6,4(sp)
   12d78:	d9c00215 	stw	r7,8(sp)
   12d7c:	00000000 	call	0 <__alt_mem_onchip_memory-0x10000>
   12d80:	d9400017 	ldw	r5,0(sp)
   12d84:	d9800117 	ldw	r6,4(sp)
   12d88:	d9c00217 	ldw	r7,8(sp)
   12d8c:	10001d26 	beq	r2,zero,12e04 <__register_exitproc+0x110>
   12d90:	81000017 	ldw	r4,0(r16)
   12d94:	10000115 	stw	zero,4(r2)
   12d98:	02000044 	movi	r8,1
   12d9c:	22405217 	ldw	r9,328(r4)
   12da0:	0007883a 	mov	r3,zero
   12da4:	12400015 	stw	r9,0(r2)
   12da8:	20805215 	stw	r2,328(r4)
   12dac:	10006215 	stw	zero,392(r2)
   12db0:	10006315 	stw	zero,396(r2)
   12db4:	883fde26 	beq	r17,zero,12d30 <__alt_data_end+0xffff2d30>
   12db8:	18c9883a 	add	r4,r3,r3
   12dbc:	2109883a 	add	r4,r4,r4
   12dc0:	1109883a 	add	r4,r2,r4
   12dc4:	21802215 	stw	r6,136(r4)
   12dc8:	01800044 	movi	r6,1
   12dcc:	12406217 	ldw	r9,392(r2)
   12dd0:	30cc983a 	sll	r6,r6,r3
   12dd4:	4992b03a 	or	r9,r9,r6
   12dd8:	12406215 	stw	r9,392(r2)
   12ddc:	21c04215 	stw	r7,264(r4)
   12de0:	01000084 	movi	r4,2
   12de4:	893fd21e 	bne	r17,r4,12d30 <__alt_data_end+0xffff2d30>
   12de8:	11006317 	ldw	r4,396(r2)
   12dec:	218cb03a 	or	r6,r4,r6
   12df0:	11806315 	stw	r6,396(r2)
   12df4:	003fce06 	br	12d30 <__alt_data_end+0xffff2d30>
   12df8:	18805304 	addi	r2,r3,332
   12dfc:	18805215 	stw	r2,328(r3)
   12e00:	003fc606 	br	12d1c <__alt_data_end+0xffff2d1c>
   12e04:	00bfffc4 	movi	r2,-1
   12e08:	003fd006 	br	12d4c <__alt_data_end+0xffff2d4c>

00012e0c <__call_exitprocs>:
   12e0c:	defff504 	addi	sp,sp,-44
   12e10:	df000915 	stw	fp,36(sp)
   12e14:	dd400615 	stw	r21,24(sp)
   12e18:	dc800315 	stw	r18,12(sp)
   12e1c:	dfc00a15 	stw	ra,40(sp)
   12e20:	ddc00815 	stw	r23,32(sp)
   12e24:	dd800715 	stw	r22,28(sp)
   12e28:	dd000515 	stw	r20,20(sp)
   12e2c:	dcc00415 	stw	r19,16(sp)
   12e30:	dc400215 	stw	r17,8(sp)
   12e34:	dc000115 	stw	r16,4(sp)
   12e38:	d9000015 	stw	r4,0(sp)
   12e3c:	2839883a 	mov	fp,r5
   12e40:	04800044 	movi	r18,1
   12e44:	057fffc4 	movi	r21,-1
   12e48:	00800074 	movhi	r2,1
   12e4c:	109b2704 	addi	r2,r2,27804
   12e50:	12000017 	ldw	r8,0(r2)
   12e54:	45005217 	ldw	r20,328(r8)
   12e58:	44c05204 	addi	r19,r8,328
   12e5c:	a0001c26 	beq	r20,zero,12ed0 <__call_exitprocs+0xc4>
   12e60:	a0800117 	ldw	r2,4(r20)
   12e64:	15ffffc4 	addi	r23,r2,-1
   12e68:	b8000d16 	blt	r23,zero,12ea0 <__call_exitprocs+0x94>
   12e6c:	14000044 	addi	r16,r2,1
   12e70:	8421883a 	add	r16,r16,r16
   12e74:	8421883a 	add	r16,r16,r16
   12e78:	84402004 	addi	r17,r16,128
   12e7c:	a463883a 	add	r17,r20,r17
   12e80:	a421883a 	add	r16,r20,r16
   12e84:	e0001e26 	beq	fp,zero,12f00 <__call_exitprocs+0xf4>
   12e88:	80804017 	ldw	r2,256(r16)
   12e8c:	e0801c26 	beq	fp,r2,12f00 <__call_exitprocs+0xf4>
   12e90:	bdffffc4 	addi	r23,r23,-1
   12e94:	843fff04 	addi	r16,r16,-4
   12e98:	8c7fff04 	addi	r17,r17,-4
   12e9c:	bd7ff91e 	bne	r23,r21,12e84 <__alt_data_end+0xffff2e84>
   12ea0:	00800034 	movhi	r2,0
   12ea4:	10800004 	addi	r2,r2,0
   12ea8:	10000926 	beq	r2,zero,12ed0 <__call_exitprocs+0xc4>
   12eac:	a0800117 	ldw	r2,4(r20)
   12eb0:	1000301e 	bne	r2,zero,12f74 <__call_exitprocs+0x168>
   12eb4:	a0800017 	ldw	r2,0(r20)
   12eb8:	10003226 	beq	r2,zero,12f84 <__call_exitprocs+0x178>
   12ebc:	a009883a 	mov	r4,r20
   12ec0:	98800015 	stw	r2,0(r19)
   12ec4:	00000000 	call	0 <__alt_mem_onchip_memory-0x10000>
   12ec8:	9d000017 	ldw	r20,0(r19)
   12ecc:	a03fe41e 	bne	r20,zero,12e60 <__alt_data_end+0xffff2e60>
   12ed0:	dfc00a17 	ldw	ra,40(sp)
   12ed4:	df000917 	ldw	fp,36(sp)
   12ed8:	ddc00817 	ldw	r23,32(sp)
   12edc:	dd800717 	ldw	r22,28(sp)
   12ee0:	dd400617 	ldw	r21,24(sp)
   12ee4:	dd000517 	ldw	r20,20(sp)
   12ee8:	dcc00417 	ldw	r19,16(sp)
   12eec:	dc800317 	ldw	r18,12(sp)
   12ef0:	dc400217 	ldw	r17,8(sp)
   12ef4:	dc000117 	ldw	r16,4(sp)
   12ef8:	dec00b04 	addi	sp,sp,44
   12efc:	f800283a 	ret
   12f00:	a0800117 	ldw	r2,4(r20)
   12f04:	80c00017 	ldw	r3,0(r16)
   12f08:	10bfffc4 	addi	r2,r2,-1
   12f0c:	15c01426 	beq	r2,r23,12f60 <__call_exitprocs+0x154>
   12f10:	80000015 	stw	zero,0(r16)
   12f14:	183fde26 	beq	r3,zero,12e90 <__alt_data_end+0xffff2e90>
   12f18:	95c8983a 	sll	r4,r18,r23
   12f1c:	a0806217 	ldw	r2,392(r20)
   12f20:	a5800117 	ldw	r22,4(r20)
   12f24:	2084703a 	and	r2,r4,r2
   12f28:	10000b26 	beq	r2,zero,12f58 <__call_exitprocs+0x14c>
   12f2c:	a0806317 	ldw	r2,396(r20)
   12f30:	2088703a 	and	r4,r4,r2
   12f34:	20000c1e 	bne	r4,zero,12f68 <__call_exitprocs+0x15c>
   12f38:	89400017 	ldw	r5,0(r17)
   12f3c:	d9000017 	ldw	r4,0(sp)
   12f40:	183ee83a 	callr	r3
   12f44:	a0800117 	ldw	r2,4(r20)
   12f48:	15bfbf1e 	bne	r2,r22,12e48 <__alt_data_end+0xffff2e48>
   12f4c:	98800017 	ldw	r2,0(r19)
   12f50:	153fcf26 	beq	r2,r20,12e90 <__alt_data_end+0xffff2e90>
   12f54:	003fbc06 	br	12e48 <__alt_data_end+0xffff2e48>
   12f58:	183ee83a 	callr	r3
   12f5c:	003ff906 	br	12f44 <__alt_data_end+0xffff2f44>
   12f60:	a5c00115 	stw	r23,4(r20)
   12f64:	003feb06 	br	12f14 <__alt_data_end+0xffff2f14>
   12f68:	89000017 	ldw	r4,0(r17)
   12f6c:	183ee83a 	callr	r3
   12f70:	003ff406 	br	12f44 <__alt_data_end+0xffff2f44>
   12f74:	a0800017 	ldw	r2,0(r20)
   12f78:	a027883a 	mov	r19,r20
   12f7c:	1029883a 	mov	r20,r2
   12f80:	003fb606 	br	12e5c <__alt_data_end+0xffff2e5c>
   12f84:	0005883a 	mov	r2,zero
   12f88:	003ffb06 	br	12f78 <__alt_data_end+0xffff2f78>

00012f8c <__sflush_r>:
   12f8c:	2880030b 	ldhu	r2,12(r5)
   12f90:	defffb04 	addi	sp,sp,-20
   12f94:	dcc00315 	stw	r19,12(sp)
   12f98:	dc400115 	stw	r17,4(sp)
   12f9c:	dfc00415 	stw	ra,16(sp)
   12fa0:	dc800215 	stw	r18,8(sp)
   12fa4:	dc000015 	stw	r16,0(sp)
   12fa8:	10c0020c 	andi	r3,r2,8
   12fac:	2823883a 	mov	r17,r5
   12fb0:	2027883a 	mov	r19,r4
   12fb4:	1800311e 	bne	r3,zero,1307c <__sflush_r+0xf0>
   12fb8:	28c00117 	ldw	r3,4(r5)
   12fbc:	10820014 	ori	r2,r2,2048
   12fc0:	2880030d 	sth	r2,12(r5)
   12fc4:	00c04b0e 	bge	zero,r3,130f4 <__sflush_r+0x168>
   12fc8:	8a000a17 	ldw	r8,40(r17)
   12fcc:	40002326 	beq	r8,zero,1305c <__sflush_r+0xd0>
   12fd0:	9c000017 	ldw	r16,0(r19)
   12fd4:	10c4000c 	andi	r3,r2,4096
   12fd8:	98000015 	stw	zero,0(r19)
   12fdc:	18004826 	beq	r3,zero,13100 <__sflush_r+0x174>
   12fe0:	89801417 	ldw	r6,80(r17)
   12fe4:	10c0010c 	andi	r3,r2,4
   12fe8:	18000626 	beq	r3,zero,13004 <__sflush_r+0x78>
   12fec:	88c00117 	ldw	r3,4(r17)
   12ff0:	88800c17 	ldw	r2,48(r17)
   12ff4:	30cdc83a 	sub	r6,r6,r3
   12ff8:	10000226 	beq	r2,zero,13004 <__sflush_r+0x78>
   12ffc:	88800f17 	ldw	r2,60(r17)
   13000:	308dc83a 	sub	r6,r6,r2
   13004:	89400717 	ldw	r5,28(r17)
   13008:	000f883a 	mov	r7,zero
   1300c:	9809883a 	mov	r4,r19
   13010:	403ee83a 	callr	r8
   13014:	00ffffc4 	movi	r3,-1
   13018:	10c04426 	beq	r2,r3,1312c <__sflush_r+0x1a0>
   1301c:	88c0030b 	ldhu	r3,12(r17)
   13020:	89000417 	ldw	r4,16(r17)
   13024:	88000115 	stw	zero,4(r17)
   13028:	197dffcc 	andi	r5,r3,63487
   1302c:	8940030d 	sth	r5,12(r17)
   13030:	89000015 	stw	r4,0(r17)
   13034:	18c4000c 	andi	r3,r3,4096
   13038:	18002c1e 	bne	r3,zero,130ec <__sflush_r+0x160>
   1303c:	89400c17 	ldw	r5,48(r17)
   13040:	9c000015 	stw	r16,0(r19)
   13044:	28000526 	beq	r5,zero,1305c <__sflush_r+0xd0>
   13048:	88801004 	addi	r2,r17,64
   1304c:	28800226 	beq	r5,r2,13058 <__sflush_r+0xcc>
   13050:	9809883a 	mov	r4,r19
   13054:	00136f80 	call	136f8 <_free_r>
   13058:	88000c15 	stw	zero,48(r17)
   1305c:	0005883a 	mov	r2,zero
   13060:	dfc00417 	ldw	ra,16(sp)
   13064:	dcc00317 	ldw	r19,12(sp)
   13068:	dc800217 	ldw	r18,8(sp)
   1306c:	dc400117 	ldw	r17,4(sp)
   13070:	dc000017 	ldw	r16,0(sp)
   13074:	dec00504 	addi	sp,sp,20
   13078:	f800283a 	ret
   1307c:	2c800417 	ldw	r18,16(r5)
   13080:	903ff626 	beq	r18,zero,1305c <__alt_data_end+0xffff305c>
   13084:	2c000017 	ldw	r16,0(r5)
   13088:	108000cc 	andi	r2,r2,3
   1308c:	2c800015 	stw	r18,0(r5)
   13090:	84a1c83a 	sub	r16,r16,r18
   13094:	1000131e 	bne	r2,zero,130e4 <__sflush_r+0x158>
   13098:	28800517 	ldw	r2,20(r5)
   1309c:	88800215 	stw	r2,8(r17)
   130a0:	04000316 	blt	zero,r16,130b0 <__sflush_r+0x124>
   130a4:	003fed06 	br	1305c <__alt_data_end+0xffff305c>
   130a8:	90a5883a 	add	r18,r18,r2
   130ac:	043feb0e 	bge	zero,r16,1305c <__alt_data_end+0xffff305c>
   130b0:	88800917 	ldw	r2,36(r17)
   130b4:	89400717 	ldw	r5,28(r17)
   130b8:	800f883a 	mov	r7,r16
   130bc:	900d883a 	mov	r6,r18
   130c0:	9809883a 	mov	r4,r19
   130c4:	103ee83a 	callr	r2
   130c8:	80a1c83a 	sub	r16,r16,r2
   130cc:	00bff616 	blt	zero,r2,130a8 <__alt_data_end+0xffff30a8>
   130d0:	88c0030b 	ldhu	r3,12(r17)
   130d4:	00bfffc4 	movi	r2,-1
   130d8:	18c01014 	ori	r3,r3,64
   130dc:	88c0030d 	sth	r3,12(r17)
   130e0:	003fdf06 	br	13060 <__alt_data_end+0xffff3060>
   130e4:	0005883a 	mov	r2,zero
   130e8:	003fec06 	br	1309c <__alt_data_end+0xffff309c>
   130ec:	88801415 	stw	r2,80(r17)
   130f0:	003fd206 	br	1303c <__alt_data_end+0xffff303c>
   130f4:	28c00f17 	ldw	r3,60(r5)
   130f8:	00ffb316 	blt	zero,r3,12fc8 <__alt_data_end+0xffff2fc8>
   130fc:	003fd706 	br	1305c <__alt_data_end+0xffff305c>
   13100:	89400717 	ldw	r5,28(r17)
   13104:	000d883a 	mov	r6,zero
   13108:	01c00044 	movi	r7,1
   1310c:	9809883a 	mov	r4,r19
   13110:	403ee83a 	callr	r8
   13114:	100d883a 	mov	r6,r2
   13118:	00bfffc4 	movi	r2,-1
   1311c:	30801426 	beq	r6,r2,13170 <__sflush_r+0x1e4>
   13120:	8880030b 	ldhu	r2,12(r17)
   13124:	8a000a17 	ldw	r8,40(r17)
   13128:	003fae06 	br	12fe4 <__alt_data_end+0xffff2fe4>
   1312c:	98c00017 	ldw	r3,0(r19)
   13130:	183fba26 	beq	r3,zero,1301c <__alt_data_end+0xffff301c>
   13134:	01000744 	movi	r4,29
   13138:	19000626 	beq	r3,r4,13154 <__sflush_r+0x1c8>
   1313c:	01000584 	movi	r4,22
   13140:	19000426 	beq	r3,r4,13154 <__sflush_r+0x1c8>
   13144:	88c0030b 	ldhu	r3,12(r17)
   13148:	18c01014 	ori	r3,r3,64
   1314c:	88c0030d 	sth	r3,12(r17)
   13150:	003fc306 	br	13060 <__alt_data_end+0xffff3060>
   13154:	8880030b 	ldhu	r2,12(r17)
   13158:	88c00417 	ldw	r3,16(r17)
   1315c:	88000115 	stw	zero,4(r17)
   13160:	10bdffcc 	andi	r2,r2,63487
   13164:	8880030d 	sth	r2,12(r17)
   13168:	88c00015 	stw	r3,0(r17)
   1316c:	003fb306 	br	1303c <__alt_data_end+0xffff303c>
   13170:	98800017 	ldw	r2,0(r19)
   13174:	103fea26 	beq	r2,zero,13120 <__alt_data_end+0xffff3120>
   13178:	00c00744 	movi	r3,29
   1317c:	10c00226 	beq	r2,r3,13188 <__sflush_r+0x1fc>
   13180:	00c00584 	movi	r3,22
   13184:	10c0031e 	bne	r2,r3,13194 <__sflush_r+0x208>
   13188:	9c000015 	stw	r16,0(r19)
   1318c:	0005883a 	mov	r2,zero
   13190:	003fb306 	br	13060 <__alt_data_end+0xffff3060>
   13194:	88c0030b 	ldhu	r3,12(r17)
   13198:	3005883a 	mov	r2,r6
   1319c:	18c01014 	ori	r3,r3,64
   131a0:	88c0030d 	sth	r3,12(r17)
   131a4:	003fae06 	br	13060 <__alt_data_end+0xffff3060>

000131a8 <_fflush_r>:
   131a8:	defffd04 	addi	sp,sp,-12
   131ac:	dc000115 	stw	r16,4(sp)
   131b0:	dfc00215 	stw	ra,8(sp)
   131b4:	2021883a 	mov	r16,r4
   131b8:	20000226 	beq	r4,zero,131c4 <_fflush_r+0x1c>
   131bc:	20800e17 	ldw	r2,56(r4)
   131c0:	10000c26 	beq	r2,zero,131f4 <_fflush_r+0x4c>
   131c4:	2880030f 	ldh	r2,12(r5)
   131c8:	1000051e 	bne	r2,zero,131e0 <_fflush_r+0x38>
   131cc:	0005883a 	mov	r2,zero
   131d0:	dfc00217 	ldw	ra,8(sp)
   131d4:	dc000117 	ldw	r16,4(sp)
   131d8:	dec00304 	addi	sp,sp,12
   131dc:	f800283a 	ret
   131e0:	8009883a 	mov	r4,r16
   131e4:	dfc00217 	ldw	ra,8(sp)
   131e8:	dc000117 	ldw	r16,4(sp)
   131ec:	dec00304 	addi	sp,sp,12
   131f0:	0012f8c1 	jmpi	12f8c <__sflush_r>
   131f4:	d9400015 	stw	r5,0(sp)
   131f8:	00135840 	call	13584 <__sinit>
   131fc:	d9400017 	ldw	r5,0(sp)
   13200:	003ff006 	br	131c4 <__alt_data_end+0xffff31c4>

00013204 <fflush>:
   13204:	20000526 	beq	r4,zero,1321c <fflush+0x18>
   13208:	00800074 	movhi	r2,1
   1320c:	109b2804 	addi	r2,r2,27808
   13210:	200b883a 	mov	r5,r4
   13214:	11000017 	ldw	r4,0(r2)
   13218:	00131a81 	jmpi	131a8 <_fflush_r>
   1321c:	00800074 	movhi	r2,1
   13220:	109b2704 	addi	r2,r2,27804
   13224:	11000017 	ldw	r4,0(r2)
   13228:	01400074 	movhi	r5,1
   1322c:	294c6a04 	addi	r5,r5,12712
   13230:	0013acc1 	jmpi	13acc <_fwalk_reent>

00013234 <__fp_unlock>:
   13234:	0005883a 	mov	r2,zero
   13238:	f800283a 	ret

0001323c <_cleanup_r>:
   1323c:	01400074 	movhi	r5,1
   13240:	29523104 	addi	r5,r5,18628
   13244:	0013acc1 	jmpi	13acc <_fwalk_reent>

00013248 <__sinit.part.1>:
   13248:	defff704 	addi	sp,sp,-36
   1324c:	00c00074 	movhi	r3,1
   13250:	dfc00815 	stw	ra,32(sp)
   13254:	ddc00715 	stw	r23,28(sp)
   13258:	dd800615 	stw	r22,24(sp)
   1325c:	dd400515 	stw	r21,20(sp)
   13260:	dd000415 	stw	r20,16(sp)
   13264:	dcc00315 	stw	r19,12(sp)
   13268:	dc800215 	stw	r18,8(sp)
   1326c:	dc400115 	stw	r17,4(sp)
   13270:	dc000015 	stw	r16,0(sp)
   13274:	18cc8f04 	addi	r3,r3,12860
   13278:	24000117 	ldw	r16,4(r4)
   1327c:	20c00f15 	stw	r3,60(r4)
   13280:	2080bb04 	addi	r2,r4,748
   13284:	00c000c4 	movi	r3,3
   13288:	20c0b915 	stw	r3,740(r4)
   1328c:	2080ba15 	stw	r2,744(r4)
   13290:	2000b815 	stw	zero,736(r4)
   13294:	05c00204 	movi	r23,8
   13298:	00800104 	movi	r2,4
   1329c:	2025883a 	mov	r18,r4
   132a0:	b80d883a 	mov	r6,r23
   132a4:	81001704 	addi	r4,r16,92
   132a8:	000b883a 	mov	r5,zero
   132ac:	80000015 	stw	zero,0(r16)
   132b0:	80000115 	stw	zero,4(r16)
   132b4:	80000215 	stw	zero,8(r16)
   132b8:	8080030d 	sth	r2,12(r16)
   132bc:	80001915 	stw	zero,100(r16)
   132c0:	8000038d 	sth	zero,14(r16)
   132c4:	80000415 	stw	zero,16(r16)
   132c8:	80000515 	stw	zero,20(r16)
   132cc:	80000615 	stw	zero,24(r16)
   132d0:	00145580 	call	14558 <memset>
   132d4:	05800074 	movhi	r22,1
   132d8:	94400217 	ldw	r17,8(r18)
   132dc:	05400074 	movhi	r21,1
   132e0:	05000074 	movhi	r20,1
   132e4:	04c00074 	movhi	r19,1
   132e8:	b591b504 	addi	r22,r22,18132
   132ec:	ad51cc04 	addi	r21,r21,18224
   132f0:	a511eb04 	addi	r20,r20,18348
   132f4:	9cd20204 	addi	r19,r19,18440
   132f8:	85800815 	stw	r22,32(r16)
   132fc:	85400915 	stw	r21,36(r16)
   13300:	85000a15 	stw	r20,40(r16)
   13304:	84c00b15 	stw	r19,44(r16)
   13308:	84000715 	stw	r16,28(r16)
   1330c:	00800284 	movi	r2,10
   13310:	8880030d 	sth	r2,12(r17)
   13314:	00800044 	movi	r2,1
   13318:	b80d883a 	mov	r6,r23
   1331c:	89001704 	addi	r4,r17,92
   13320:	000b883a 	mov	r5,zero
   13324:	88000015 	stw	zero,0(r17)
   13328:	88000115 	stw	zero,4(r17)
   1332c:	88000215 	stw	zero,8(r17)
   13330:	88001915 	stw	zero,100(r17)
   13334:	8880038d 	sth	r2,14(r17)
   13338:	88000415 	stw	zero,16(r17)
   1333c:	88000515 	stw	zero,20(r17)
   13340:	88000615 	stw	zero,24(r17)
   13344:	00145580 	call	14558 <memset>
   13348:	94000317 	ldw	r16,12(r18)
   1334c:	00800484 	movi	r2,18
   13350:	8c400715 	stw	r17,28(r17)
   13354:	8d800815 	stw	r22,32(r17)
   13358:	8d400915 	stw	r21,36(r17)
   1335c:	8d000a15 	stw	r20,40(r17)
   13360:	8cc00b15 	stw	r19,44(r17)
   13364:	8080030d 	sth	r2,12(r16)
   13368:	00800084 	movi	r2,2
   1336c:	80000015 	stw	zero,0(r16)
   13370:	80000115 	stw	zero,4(r16)
   13374:	80000215 	stw	zero,8(r16)
   13378:	80001915 	stw	zero,100(r16)
   1337c:	8080038d 	sth	r2,14(r16)
   13380:	80000415 	stw	zero,16(r16)
   13384:	80000515 	stw	zero,20(r16)
   13388:	80000615 	stw	zero,24(r16)
   1338c:	b80d883a 	mov	r6,r23
   13390:	000b883a 	mov	r5,zero
   13394:	81001704 	addi	r4,r16,92
   13398:	00145580 	call	14558 <memset>
   1339c:	00800044 	movi	r2,1
   133a0:	84000715 	stw	r16,28(r16)
   133a4:	85800815 	stw	r22,32(r16)
   133a8:	85400915 	stw	r21,36(r16)
   133ac:	85000a15 	stw	r20,40(r16)
   133b0:	84c00b15 	stw	r19,44(r16)
   133b4:	90800e15 	stw	r2,56(r18)
   133b8:	dfc00817 	ldw	ra,32(sp)
   133bc:	ddc00717 	ldw	r23,28(sp)
   133c0:	dd800617 	ldw	r22,24(sp)
   133c4:	dd400517 	ldw	r21,20(sp)
   133c8:	dd000417 	ldw	r20,16(sp)
   133cc:	dcc00317 	ldw	r19,12(sp)
   133d0:	dc800217 	ldw	r18,8(sp)
   133d4:	dc400117 	ldw	r17,4(sp)
   133d8:	dc000017 	ldw	r16,0(sp)
   133dc:	dec00904 	addi	sp,sp,36
   133e0:	f800283a 	ret

000133e4 <__fp_lock>:
   133e4:	0005883a 	mov	r2,zero
   133e8:	f800283a 	ret

000133ec <__sfmoreglue>:
   133ec:	defffc04 	addi	sp,sp,-16
   133f0:	dc400115 	stw	r17,4(sp)
   133f4:	2c7fffc4 	addi	r17,r5,-1
   133f8:	8c401a24 	muli	r17,r17,104
   133fc:	dc800215 	stw	r18,8(sp)
   13400:	2825883a 	mov	r18,r5
   13404:	89401d04 	addi	r5,r17,116
   13408:	dc000015 	stw	r16,0(sp)
   1340c:	dfc00315 	stw	ra,12(sp)
   13410:	0013d4c0 	call	13d4c <_malloc_r>
   13414:	1021883a 	mov	r16,r2
   13418:	10000726 	beq	r2,zero,13438 <__sfmoreglue+0x4c>
   1341c:	11000304 	addi	r4,r2,12
   13420:	10000015 	stw	zero,0(r2)
   13424:	14800115 	stw	r18,4(r2)
   13428:	11000215 	stw	r4,8(r2)
   1342c:	89801a04 	addi	r6,r17,104
   13430:	000b883a 	mov	r5,zero
   13434:	00145580 	call	14558 <memset>
   13438:	8005883a 	mov	r2,r16
   1343c:	dfc00317 	ldw	ra,12(sp)
   13440:	dc800217 	ldw	r18,8(sp)
   13444:	dc400117 	ldw	r17,4(sp)
   13448:	dc000017 	ldw	r16,0(sp)
   1344c:	dec00404 	addi	sp,sp,16
   13450:	f800283a 	ret

00013454 <__sfp>:
   13454:	defffb04 	addi	sp,sp,-20
   13458:	dc000015 	stw	r16,0(sp)
   1345c:	04000074 	movhi	r16,1
   13460:	841b2704 	addi	r16,r16,27804
   13464:	dcc00315 	stw	r19,12(sp)
   13468:	2027883a 	mov	r19,r4
   1346c:	81000017 	ldw	r4,0(r16)
   13470:	dfc00415 	stw	ra,16(sp)
   13474:	dc800215 	stw	r18,8(sp)
   13478:	20800e17 	ldw	r2,56(r4)
   1347c:	dc400115 	stw	r17,4(sp)
   13480:	1000021e 	bne	r2,zero,1348c <__sfp+0x38>
   13484:	00132480 	call	13248 <__sinit.part.1>
   13488:	81000017 	ldw	r4,0(r16)
   1348c:	2480b804 	addi	r18,r4,736
   13490:	047fffc4 	movi	r17,-1
   13494:	91000117 	ldw	r4,4(r18)
   13498:	94000217 	ldw	r16,8(r18)
   1349c:	213fffc4 	addi	r4,r4,-1
   134a0:	20000a16 	blt	r4,zero,134cc <__sfp+0x78>
   134a4:	8080030f 	ldh	r2,12(r16)
   134a8:	10000c26 	beq	r2,zero,134dc <__sfp+0x88>
   134ac:	80c01d04 	addi	r3,r16,116
   134b0:	00000206 	br	134bc <__sfp+0x68>
   134b4:	18bfe60f 	ldh	r2,-104(r3)
   134b8:	10000826 	beq	r2,zero,134dc <__sfp+0x88>
   134bc:	213fffc4 	addi	r4,r4,-1
   134c0:	1c3ffd04 	addi	r16,r3,-12
   134c4:	18c01a04 	addi	r3,r3,104
   134c8:	247ffa1e 	bne	r4,r17,134b4 <__alt_data_end+0xffff34b4>
   134cc:	90800017 	ldw	r2,0(r18)
   134d0:	10001d26 	beq	r2,zero,13548 <__sfp+0xf4>
   134d4:	1025883a 	mov	r18,r2
   134d8:	003fee06 	br	13494 <__alt_data_end+0xffff3494>
   134dc:	00bfffc4 	movi	r2,-1
   134e0:	8080038d 	sth	r2,14(r16)
   134e4:	00800044 	movi	r2,1
   134e8:	8080030d 	sth	r2,12(r16)
   134ec:	80001915 	stw	zero,100(r16)
   134f0:	80000015 	stw	zero,0(r16)
   134f4:	80000215 	stw	zero,8(r16)
   134f8:	80000115 	stw	zero,4(r16)
   134fc:	80000415 	stw	zero,16(r16)
   13500:	80000515 	stw	zero,20(r16)
   13504:	80000615 	stw	zero,24(r16)
   13508:	01800204 	movi	r6,8
   1350c:	000b883a 	mov	r5,zero
   13510:	81001704 	addi	r4,r16,92
   13514:	00145580 	call	14558 <memset>
   13518:	8005883a 	mov	r2,r16
   1351c:	80000c15 	stw	zero,48(r16)
   13520:	80000d15 	stw	zero,52(r16)
   13524:	80001115 	stw	zero,68(r16)
   13528:	80001215 	stw	zero,72(r16)
   1352c:	dfc00417 	ldw	ra,16(sp)
   13530:	dcc00317 	ldw	r19,12(sp)
   13534:	dc800217 	ldw	r18,8(sp)
   13538:	dc400117 	ldw	r17,4(sp)
   1353c:	dc000017 	ldw	r16,0(sp)
   13540:	dec00504 	addi	sp,sp,20
   13544:	f800283a 	ret
   13548:	01400104 	movi	r5,4
   1354c:	9809883a 	mov	r4,r19
   13550:	00133ec0 	call	133ec <__sfmoreglue>
   13554:	90800015 	stw	r2,0(r18)
   13558:	103fde1e 	bne	r2,zero,134d4 <__alt_data_end+0xffff34d4>
   1355c:	00800304 	movi	r2,12
   13560:	98800015 	stw	r2,0(r19)
   13564:	0005883a 	mov	r2,zero
   13568:	003ff006 	br	1352c <__alt_data_end+0xffff352c>

0001356c <_cleanup>:
   1356c:	00800074 	movhi	r2,1
   13570:	109b2704 	addi	r2,r2,27804
   13574:	11000017 	ldw	r4,0(r2)
   13578:	01400074 	movhi	r5,1
   1357c:	29523104 	addi	r5,r5,18628
   13580:	0013acc1 	jmpi	13acc <_fwalk_reent>

00013584 <__sinit>:
   13584:	20800e17 	ldw	r2,56(r4)
   13588:	10000126 	beq	r2,zero,13590 <__sinit+0xc>
   1358c:	f800283a 	ret
   13590:	00132481 	jmpi	13248 <__sinit.part.1>

00013594 <__sfp_lock_acquire>:
   13594:	f800283a 	ret

00013598 <__sfp_lock_release>:
   13598:	f800283a 	ret

0001359c <__sinit_lock_acquire>:
   1359c:	f800283a 	ret

000135a0 <__sinit_lock_release>:
   135a0:	f800283a 	ret

000135a4 <__fp_lock_all>:
   135a4:	00800074 	movhi	r2,1
   135a8:	109b2804 	addi	r2,r2,27808
   135ac:	11000017 	ldw	r4,0(r2)
   135b0:	01400074 	movhi	r5,1
   135b4:	294cf904 	addi	r5,r5,13284
   135b8:	0013a081 	jmpi	13a08 <_fwalk>

000135bc <__fp_unlock_all>:
   135bc:	00800074 	movhi	r2,1
   135c0:	109b2804 	addi	r2,r2,27808
   135c4:	11000017 	ldw	r4,0(r2)
   135c8:	01400074 	movhi	r5,1
   135cc:	294c8d04 	addi	r5,r5,12852
   135d0:	0013a081 	jmpi	13a08 <_fwalk>

000135d4 <_malloc_trim_r>:
   135d4:	defffb04 	addi	sp,sp,-20
   135d8:	dcc00315 	stw	r19,12(sp)
   135dc:	04c00074 	movhi	r19,1
   135e0:	dc800215 	stw	r18,8(sp)
   135e4:	dc400115 	stw	r17,4(sp)
   135e8:	dc000015 	stw	r16,0(sp)
   135ec:	dfc00415 	stw	ra,16(sp)
   135f0:	2821883a 	mov	r16,r5
   135f4:	9cda1c04 	addi	r19,r19,26736
   135f8:	2025883a 	mov	r18,r4
   135fc:	0014e480 	call	14e48 <__malloc_lock>
   13600:	98800217 	ldw	r2,8(r19)
   13604:	14400117 	ldw	r17,4(r2)
   13608:	00bfff04 	movi	r2,-4
   1360c:	88a2703a 	and	r17,r17,r2
   13610:	8c21c83a 	sub	r16,r17,r16
   13614:	8403fbc4 	addi	r16,r16,4079
   13618:	8020d33a 	srli	r16,r16,12
   1361c:	0083ffc4 	movi	r2,4095
   13620:	843fffc4 	addi	r16,r16,-1
   13624:	8020933a 	slli	r16,r16,12
   13628:	1400060e 	bge	r2,r16,13644 <_malloc_trim_r+0x70>
   1362c:	000b883a 	mov	r5,zero
   13630:	9009883a 	mov	r4,r18
   13634:	00146800 	call	14680 <_sbrk_r>
   13638:	98c00217 	ldw	r3,8(r19)
   1363c:	1c47883a 	add	r3,r3,r17
   13640:	10c00a26 	beq	r2,r3,1366c <_malloc_trim_r+0x98>
   13644:	9009883a 	mov	r4,r18
   13648:	0014e6c0 	call	14e6c <__malloc_unlock>
   1364c:	0005883a 	mov	r2,zero
   13650:	dfc00417 	ldw	ra,16(sp)
   13654:	dcc00317 	ldw	r19,12(sp)
   13658:	dc800217 	ldw	r18,8(sp)
   1365c:	dc400117 	ldw	r17,4(sp)
   13660:	dc000017 	ldw	r16,0(sp)
   13664:	dec00504 	addi	sp,sp,20
   13668:	f800283a 	ret
   1366c:	040bc83a 	sub	r5,zero,r16
   13670:	9009883a 	mov	r4,r18
   13674:	00146800 	call	14680 <_sbrk_r>
   13678:	00ffffc4 	movi	r3,-1
   1367c:	10c00d26 	beq	r2,r3,136b4 <_malloc_trim_r+0xe0>
   13680:	00c000b4 	movhi	r3,2
   13684:	18e1df04 	addi	r3,r3,-30852
   13688:	18800017 	ldw	r2,0(r3)
   1368c:	99000217 	ldw	r4,8(r19)
   13690:	8c23c83a 	sub	r17,r17,r16
   13694:	8c400054 	ori	r17,r17,1
   13698:	1421c83a 	sub	r16,r2,r16
   1369c:	24400115 	stw	r17,4(r4)
   136a0:	9009883a 	mov	r4,r18
   136a4:	1c000015 	stw	r16,0(r3)
   136a8:	0014e6c0 	call	14e6c <__malloc_unlock>
   136ac:	00800044 	movi	r2,1
   136b0:	003fe706 	br	13650 <__alt_data_end+0xffff3650>
   136b4:	000b883a 	mov	r5,zero
   136b8:	9009883a 	mov	r4,r18
   136bc:	00146800 	call	14680 <_sbrk_r>
   136c0:	99000217 	ldw	r4,8(r19)
   136c4:	014003c4 	movi	r5,15
   136c8:	1107c83a 	sub	r3,r2,r4
   136cc:	28ffdd0e 	bge	r5,r3,13644 <__alt_data_end+0xffff3644>
   136d0:	01400074 	movhi	r5,1
   136d4:	295b2904 	addi	r5,r5,27812
   136d8:	29400017 	ldw	r5,0(r5)
   136dc:	18c00054 	ori	r3,r3,1
   136e0:	20c00115 	stw	r3,4(r4)
   136e4:	00c000b4 	movhi	r3,2
   136e8:	1145c83a 	sub	r2,r2,r5
   136ec:	18e1df04 	addi	r3,r3,-30852
   136f0:	18800015 	stw	r2,0(r3)
   136f4:	003fd306 	br	13644 <__alt_data_end+0xffff3644>

000136f8 <_free_r>:
   136f8:	28004126 	beq	r5,zero,13800 <_free_r+0x108>
   136fc:	defffd04 	addi	sp,sp,-12
   13700:	dc400115 	stw	r17,4(sp)
   13704:	dc000015 	stw	r16,0(sp)
   13708:	2023883a 	mov	r17,r4
   1370c:	2821883a 	mov	r16,r5
   13710:	dfc00215 	stw	ra,8(sp)
   13714:	0014e480 	call	14e48 <__malloc_lock>
   13718:	81ffff17 	ldw	r7,-4(r16)
   1371c:	00bfff84 	movi	r2,-2
   13720:	01000074 	movhi	r4,1
   13724:	81bffe04 	addi	r6,r16,-8
   13728:	3884703a 	and	r2,r7,r2
   1372c:	211a1c04 	addi	r4,r4,26736
   13730:	308b883a 	add	r5,r6,r2
   13734:	2a400117 	ldw	r9,4(r5)
   13738:	22000217 	ldw	r8,8(r4)
   1373c:	00ffff04 	movi	r3,-4
   13740:	48c6703a 	and	r3,r9,r3
   13744:	2a005726 	beq	r5,r8,138a4 <_free_r+0x1ac>
   13748:	28c00115 	stw	r3,4(r5)
   1374c:	39c0004c 	andi	r7,r7,1
   13750:	3800091e 	bne	r7,zero,13778 <_free_r+0x80>
   13754:	823ffe17 	ldw	r8,-8(r16)
   13758:	22400204 	addi	r9,r4,8
   1375c:	320dc83a 	sub	r6,r6,r8
   13760:	31c00217 	ldw	r7,8(r6)
   13764:	1205883a 	add	r2,r2,r8
   13768:	3a406526 	beq	r7,r9,13900 <_free_r+0x208>
   1376c:	32000317 	ldw	r8,12(r6)
   13770:	3a000315 	stw	r8,12(r7)
   13774:	41c00215 	stw	r7,8(r8)
   13778:	28cf883a 	add	r7,r5,r3
   1377c:	39c00117 	ldw	r7,4(r7)
   13780:	39c0004c 	andi	r7,r7,1
   13784:	38003a26 	beq	r7,zero,13870 <_free_r+0x178>
   13788:	10c00054 	ori	r3,r2,1
   1378c:	30c00115 	stw	r3,4(r6)
   13790:	3087883a 	add	r3,r6,r2
   13794:	18800015 	stw	r2,0(r3)
   13798:	00c07fc4 	movi	r3,511
   1379c:	18801936 	bltu	r3,r2,13804 <_free_r+0x10c>
   137a0:	1004d0fa 	srli	r2,r2,3
   137a4:	01c00044 	movi	r7,1
   137a8:	21400117 	ldw	r5,4(r4)
   137ac:	10c00044 	addi	r3,r2,1
   137b0:	18c7883a 	add	r3,r3,r3
   137b4:	1005d0ba 	srai	r2,r2,2
   137b8:	18c7883a 	add	r3,r3,r3
   137bc:	18c7883a 	add	r3,r3,r3
   137c0:	1907883a 	add	r3,r3,r4
   137c4:	3884983a 	sll	r2,r7,r2
   137c8:	19c00017 	ldw	r7,0(r3)
   137cc:	1a3ffe04 	addi	r8,r3,-8
   137d0:	1144b03a 	or	r2,r2,r5
   137d4:	32000315 	stw	r8,12(r6)
   137d8:	31c00215 	stw	r7,8(r6)
   137dc:	20800115 	stw	r2,4(r4)
   137e0:	19800015 	stw	r6,0(r3)
   137e4:	39800315 	stw	r6,12(r7)
   137e8:	8809883a 	mov	r4,r17
   137ec:	dfc00217 	ldw	ra,8(sp)
   137f0:	dc400117 	ldw	r17,4(sp)
   137f4:	dc000017 	ldw	r16,0(sp)
   137f8:	dec00304 	addi	sp,sp,12
   137fc:	0014e6c1 	jmpi	14e6c <__malloc_unlock>
   13800:	f800283a 	ret
   13804:	100ad27a 	srli	r5,r2,9
   13808:	00c00104 	movi	r3,4
   1380c:	19404a36 	bltu	r3,r5,13938 <_free_r+0x240>
   13810:	100ad1ba 	srli	r5,r2,6
   13814:	28c00e44 	addi	r3,r5,57
   13818:	18c7883a 	add	r3,r3,r3
   1381c:	29400e04 	addi	r5,r5,56
   13820:	18c7883a 	add	r3,r3,r3
   13824:	18c7883a 	add	r3,r3,r3
   13828:	1909883a 	add	r4,r3,r4
   1382c:	20c00017 	ldw	r3,0(r4)
   13830:	01c00074 	movhi	r7,1
   13834:	213ffe04 	addi	r4,r4,-8
   13838:	39da1c04 	addi	r7,r7,26736
   1383c:	20c04426 	beq	r4,r3,13950 <_free_r+0x258>
   13840:	01ffff04 	movi	r7,-4
   13844:	19400117 	ldw	r5,4(r3)
   13848:	29ca703a 	and	r5,r5,r7
   1384c:	1140022e 	bgeu	r2,r5,13858 <_free_r+0x160>
   13850:	18c00217 	ldw	r3,8(r3)
   13854:	20fffb1e 	bne	r4,r3,13844 <__alt_data_end+0xffff3844>
   13858:	19000317 	ldw	r4,12(r3)
   1385c:	31000315 	stw	r4,12(r6)
   13860:	30c00215 	stw	r3,8(r6)
   13864:	21800215 	stw	r6,8(r4)
   13868:	19800315 	stw	r6,12(r3)
   1386c:	003fde06 	br	137e8 <__alt_data_end+0xffff37e8>
   13870:	29c00217 	ldw	r7,8(r5)
   13874:	10c5883a 	add	r2,r2,r3
   13878:	00c00074 	movhi	r3,1
   1387c:	18da1e04 	addi	r3,r3,26744
   13880:	38c03b26 	beq	r7,r3,13970 <_free_r+0x278>
   13884:	2a000317 	ldw	r8,12(r5)
   13888:	11400054 	ori	r5,r2,1
   1388c:	3087883a 	add	r3,r6,r2
   13890:	3a000315 	stw	r8,12(r7)
   13894:	41c00215 	stw	r7,8(r8)
   13898:	31400115 	stw	r5,4(r6)
   1389c:	18800015 	stw	r2,0(r3)
   138a0:	003fbd06 	br	13798 <__alt_data_end+0xffff3798>
   138a4:	39c0004c 	andi	r7,r7,1
   138a8:	10c5883a 	add	r2,r2,r3
   138ac:	3800071e 	bne	r7,zero,138cc <_free_r+0x1d4>
   138b0:	81fffe17 	ldw	r7,-8(r16)
   138b4:	31cdc83a 	sub	r6,r6,r7
   138b8:	30c00317 	ldw	r3,12(r6)
   138bc:	31400217 	ldw	r5,8(r6)
   138c0:	11c5883a 	add	r2,r2,r7
   138c4:	28c00315 	stw	r3,12(r5)
   138c8:	19400215 	stw	r5,8(r3)
   138cc:	10c00054 	ori	r3,r2,1
   138d0:	30c00115 	stw	r3,4(r6)
   138d4:	00c00074 	movhi	r3,1
   138d8:	18db2a04 	addi	r3,r3,27816
   138dc:	18c00017 	ldw	r3,0(r3)
   138e0:	21800215 	stw	r6,8(r4)
   138e4:	10ffc036 	bltu	r2,r3,137e8 <__alt_data_end+0xffff37e8>
   138e8:	008000b4 	movhi	r2,2
   138ec:	10a1de04 	addi	r2,r2,-30856
   138f0:	11400017 	ldw	r5,0(r2)
   138f4:	8809883a 	mov	r4,r17
   138f8:	00135d40 	call	135d4 <_malloc_trim_r>
   138fc:	003fba06 	br	137e8 <__alt_data_end+0xffff37e8>
   13900:	28c9883a 	add	r4,r5,r3
   13904:	21000117 	ldw	r4,4(r4)
   13908:	2100004c 	andi	r4,r4,1
   1390c:	2000391e 	bne	r4,zero,139f4 <_free_r+0x2fc>
   13910:	29c00217 	ldw	r7,8(r5)
   13914:	29000317 	ldw	r4,12(r5)
   13918:	1885883a 	add	r2,r3,r2
   1391c:	10c00054 	ori	r3,r2,1
   13920:	39000315 	stw	r4,12(r7)
   13924:	21c00215 	stw	r7,8(r4)
   13928:	30c00115 	stw	r3,4(r6)
   1392c:	308d883a 	add	r6,r6,r2
   13930:	30800015 	stw	r2,0(r6)
   13934:	003fac06 	br	137e8 <__alt_data_end+0xffff37e8>
   13938:	00c00504 	movi	r3,20
   1393c:	19401536 	bltu	r3,r5,13994 <_free_r+0x29c>
   13940:	28c01704 	addi	r3,r5,92
   13944:	18c7883a 	add	r3,r3,r3
   13948:	294016c4 	addi	r5,r5,91
   1394c:	003fb406 	br	13820 <__alt_data_end+0xffff3820>
   13950:	280bd0ba 	srai	r5,r5,2
   13954:	00c00044 	movi	r3,1
   13958:	38800117 	ldw	r2,4(r7)
   1395c:	194a983a 	sll	r5,r3,r5
   13960:	2007883a 	mov	r3,r4
   13964:	2884b03a 	or	r2,r5,r2
   13968:	38800115 	stw	r2,4(r7)
   1396c:	003fbb06 	br	1385c <__alt_data_end+0xffff385c>
   13970:	21800515 	stw	r6,20(r4)
   13974:	21800415 	stw	r6,16(r4)
   13978:	10c00054 	ori	r3,r2,1
   1397c:	31c00315 	stw	r7,12(r6)
   13980:	31c00215 	stw	r7,8(r6)
   13984:	30c00115 	stw	r3,4(r6)
   13988:	308d883a 	add	r6,r6,r2
   1398c:	30800015 	stw	r2,0(r6)
   13990:	003f9506 	br	137e8 <__alt_data_end+0xffff37e8>
   13994:	00c01504 	movi	r3,84
   13998:	19400536 	bltu	r3,r5,139b0 <_free_r+0x2b8>
   1399c:	100ad33a 	srli	r5,r2,12
   139a0:	28c01bc4 	addi	r3,r5,111
   139a4:	18c7883a 	add	r3,r3,r3
   139a8:	29401b84 	addi	r5,r5,110
   139ac:	003f9c06 	br	13820 <__alt_data_end+0xffff3820>
   139b0:	00c05504 	movi	r3,340
   139b4:	19400536 	bltu	r3,r5,139cc <_free_r+0x2d4>
   139b8:	100ad3fa 	srli	r5,r2,15
   139bc:	28c01e04 	addi	r3,r5,120
   139c0:	18c7883a 	add	r3,r3,r3
   139c4:	29401dc4 	addi	r5,r5,119
   139c8:	003f9506 	br	13820 <__alt_data_end+0xffff3820>
   139cc:	00c15504 	movi	r3,1364
   139d0:	19400536 	bltu	r3,r5,139e8 <_free_r+0x2f0>
   139d4:	100ad4ba 	srli	r5,r2,18
   139d8:	28c01f44 	addi	r3,r5,125
   139dc:	18c7883a 	add	r3,r3,r3
   139e0:	29401f04 	addi	r5,r5,124
   139e4:	003f8e06 	br	13820 <__alt_data_end+0xffff3820>
   139e8:	00c03f84 	movi	r3,254
   139ec:	01401f84 	movi	r5,126
   139f0:	003f8b06 	br	13820 <__alt_data_end+0xffff3820>
   139f4:	10c00054 	ori	r3,r2,1
   139f8:	30c00115 	stw	r3,4(r6)
   139fc:	308d883a 	add	r6,r6,r2
   13a00:	30800015 	stw	r2,0(r6)
   13a04:	003f7806 	br	137e8 <__alt_data_end+0xffff37e8>

00013a08 <_fwalk>:
   13a08:	defff704 	addi	sp,sp,-36
   13a0c:	dd000415 	stw	r20,16(sp)
   13a10:	dfc00815 	stw	ra,32(sp)
   13a14:	ddc00715 	stw	r23,28(sp)
   13a18:	dd800615 	stw	r22,24(sp)
   13a1c:	dd400515 	stw	r21,20(sp)
   13a20:	dcc00315 	stw	r19,12(sp)
   13a24:	dc800215 	stw	r18,8(sp)
   13a28:	dc400115 	stw	r17,4(sp)
   13a2c:	dc000015 	stw	r16,0(sp)
   13a30:	2500b804 	addi	r20,r4,736
   13a34:	a0002326 	beq	r20,zero,13ac4 <_fwalk+0xbc>
   13a38:	282b883a 	mov	r21,r5
   13a3c:	002f883a 	mov	r23,zero
   13a40:	05800044 	movi	r22,1
   13a44:	04ffffc4 	movi	r19,-1
   13a48:	a4400117 	ldw	r17,4(r20)
   13a4c:	a4800217 	ldw	r18,8(r20)
   13a50:	8c7fffc4 	addi	r17,r17,-1
   13a54:	88000d16 	blt	r17,zero,13a8c <_fwalk+0x84>
   13a58:	94000304 	addi	r16,r18,12
   13a5c:	94800384 	addi	r18,r18,14
   13a60:	8080000b 	ldhu	r2,0(r16)
   13a64:	8c7fffc4 	addi	r17,r17,-1
   13a68:	813ffd04 	addi	r4,r16,-12
   13a6c:	b080042e 	bgeu	r22,r2,13a80 <_fwalk+0x78>
   13a70:	9080000f 	ldh	r2,0(r18)
   13a74:	14c00226 	beq	r2,r19,13a80 <_fwalk+0x78>
   13a78:	a83ee83a 	callr	r21
   13a7c:	b8aeb03a 	or	r23,r23,r2
   13a80:	84001a04 	addi	r16,r16,104
   13a84:	94801a04 	addi	r18,r18,104
   13a88:	8cfff51e 	bne	r17,r19,13a60 <__alt_data_end+0xffff3a60>
   13a8c:	a5000017 	ldw	r20,0(r20)
   13a90:	a03fed1e 	bne	r20,zero,13a48 <__alt_data_end+0xffff3a48>
   13a94:	b805883a 	mov	r2,r23
   13a98:	dfc00817 	ldw	ra,32(sp)
   13a9c:	ddc00717 	ldw	r23,28(sp)
   13aa0:	dd800617 	ldw	r22,24(sp)
   13aa4:	dd400517 	ldw	r21,20(sp)
   13aa8:	dd000417 	ldw	r20,16(sp)
   13aac:	dcc00317 	ldw	r19,12(sp)
   13ab0:	dc800217 	ldw	r18,8(sp)
   13ab4:	dc400117 	ldw	r17,4(sp)
   13ab8:	dc000017 	ldw	r16,0(sp)
   13abc:	dec00904 	addi	sp,sp,36
   13ac0:	f800283a 	ret
   13ac4:	002f883a 	mov	r23,zero
   13ac8:	003ff206 	br	13a94 <__alt_data_end+0xffff3a94>

00013acc <_fwalk_reent>:
   13acc:	defff704 	addi	sp,sp,-36
   13ad0:	dd000415 	stw	r20,16(sp)
   13ad4:	dfc00815 	stw	ra,32(sp)
   13ad8:	ddc00715 	stw	r23,28(sp)
   13adc:	dd800615 	stw	r22,24(sp)
   13ae0:	dd400515 	stw	r21,20(sp)
   13ae4:	dcc00315 	stw	r19,12(sp)
   13ae8:	dc800215 	stw	r18,8(sp)
   13aec:	dc400115 	stw	r17,4(sp)
   13af0:	dc000015 	stw	r16,0(sp)
   13af4:	2500b804 	addi	r20,r4,736
   13af8:	a0002326 	beq	r20,zero,13b88 <_fwalk_reent+0xbc>
   13afc:	282b883a 	mov	r21,r5
   13b00:	2027883a 	mov	r19,r4
   13b04:	002f883a 	mov	r23,zero
   13b08:	05800044 	movi	r22,1
   13b0c:	04bfffc4 	movi	r18,-1
   13b10:	a4400117 	ldw	r17,4(r20)
   13b14:	a4000217 	ldw	r16,8(r20)
   13b18:	8c7fffc4 	addi	r17,r17,-1
   13b1c:	88000c16 	blt	r17,zero,13b50 <_fwalk_reent+0x84>
   13b20:	84000304 	addi	r16,r16,12
   13b24:	8080000b 	ldhu	r2,0(r16)
   13b28:	8c7fffc4 	addi	r17,r17,-1
   13b2c:	817ffd04 	addi	r5,r16,-12
   13b30:	b080052e 	bgeu	r22,r2,13b48 <_fwalk_reent+0x7c>
   13b34:	8080008f 	ldh	r2,2(r16)
   13b38:	9809883a 	mov	r4,r19
   13b3c:	14800226 	beq	r2,r18,13b48 <_fwalk_reent+0x7c>
   13b40:	a83ee83a 	callr	r21
   13b44:	b8aeb03a 	or	r23,r23,r2
   13b48:	84001a04 	addi	r16,r16,104
   13b4c:	8cbff51e 	bne	r17,r18,13b24 <__alt_data_end+0xffff3b24>
   13b50:	a5000017 	ldw	r20,0(r20)
   13b54:	a03fee1e 	bne	r20,zero,13b10 <__alt_data_end+0xffff3b10>
   13b58:	b805883a 	mov	r2,r23
   13b5c:	dfc00817 	ldw	ra,32(sp)
   13b60:	ddc00717 	ldw	r23,28(sp)
   13b64:	dd800617 	ldw	r22,24(sp)
   13b68:	dd400517 	ldw	r21,20(sp)
   13b6c:	dd000417 	ldw	r20,16(sp)
   13b70:	dcc00317 	ldw	r19,12(sp)
   13b74:	dc800217 	ldw	r18,8(sp)
   13b78:	dc400117 	ldw	r17,4(sp)
   13b7c:	dc000017 	ldw	r16,0(sp)
   13b80:	dec00904 	addi	sp,sp,36
   13b84:	f800283a 	ret
   13b88:	002f883a 	mov	r23,zero
   13b8c:	003ff206 	br	13b58 <__alt_data_end+0xffff3b58>

00013b90 <__smakebuf_r>:
   13b90:	2880030b 	ldhu	r2,12(r5)
   13b94:	10c0008c 	andi	r3,r2,2
   13b98:	1800411e 	bne	r3,zero,13ca0 <__smakebuf_r+0x110>
   13b9c:	deffec04 	addi	sp,sp,-80
   13ba0:	dc000f15 	stw	r16,60(sp)
   13ba4:	2821883a 	mov	r16,r5
   13ba8:	2940038f 	ldh	r5,14(r5)
   13bac:	dc401015 	stw	r17,64(sp)
   13bb0:	dfc01315 	stw	ra,76(sp)
   13bb4:	dcc01215 	stw	r19,72(sp)
   13bb8:	dc801115 	stw	r18,68(sp)
   13bbc:	2023883a 	mov	r17,r4
   13bc0:	28001c16 	blt	r5,zero,13c34 <__smakebuf_r+0xa4>
   13bc4:	d80d883a 	mov	r6,sp
   13bc8:	00149c80 	call	149c8 <_fstat_r>
   13bcc:	10001816 	blt	r2,zero,13c30 <__smakebuf_r+0xa0>
   13bd0:	d8800117 	ldw	r2,4(sp)
   13bd4:	00e00014 	movui	r3,32768
   13bd8:	10bc000c 	andi	r2,r2,61440
   13bdc:	14c80020 	cmpeqi	r19,r2,8192
   13be0:	10c03726 	beq	r2,r3,13cc0 <__smakebuf_r+0x130>
   13be4:	80c0030b 	ldhu	r3,12(r16)
   13be8:	18c20014 	ori	r3,r3,2048
   13bec:	80c0030d 	sth	r3,12(r16)
   13bf0:	00c80004 	movi	r3,8192
   13bf4:	10c0521e 	bne	r2,r3,13d40 <__smakebuf_r+0x1b0>
   13bf8:	8140038f 	ldh	r5,14(r16)
   13bfc:	8809883a 	mov	r4,r17
   13c00:	0014a240 	call	14a24 <_isatty_r>
   13c04:	10004c26 	beq	r2,zero,13d38 <__smakebuf_r+0x1a8>
   13c08:	8080030b 	ldhu	r2,12(r16)
   13c0c:	80c010c4 	addi	r3,r16,67
   13c10:	80c00015 	stw	r3,0(r16)
   13c14:	10800054 	ori	r2,r2,1
   13c18:	8080030d 	sth	r2,12(r16)
   13c1c:	00800044 	movi	r2,1
   13c20:	80c00415 	stw	r3,16(r16)
   13c24:	80800515 	stw	r2,20(r16)
   13c28:	04810004 	movi	r18,1024
   13c2c:	00000706 	br	13c4c <__smakebuf_r+0xbc>
   13c30:	8080030b 	ldhu	r2,12(r16)
   13c34:	10c0200c 	andi	r3,r2,128
   13c38:	18001f1e 	bne	r3,zero,13cb8 <__smakebuf_r+0x128>
   13c3c:	04810004 	movi	r18,1024
   13c40:	10820014 	ori	r2,r2,2048
   13c44:	8080030d 	sth	r2,12(r16)
   13c48:	0027883a 	mov	r19,zero
   13c4c:	900b883a 	mov	r5,r18
   13c50:	8809883a 	mov	r4,r17
   13c54:	0013d4c0 	call	13d4c <_malloc_r>
   13c58:	10002c26 	beq	r2,zero,13d0c <__smakebuf_r+0x17c>
   13c5c:	80c0030b 	ldhu	r3,12(r16)
   13c60:	01000074 	movhi	r4,1
   13c64:	210c8f04 	addi	r4,r4,12860
   13c68:	89000f15 	stw	r4,60(r17)
   13c6c:	18c02014 	ori	r3,r3,128
   13c70:	80c0030d 	sth	r3,12(r16)
   13c74:	80800015 	stw	r2,0(r16)
   13c78:	80800415 	stw	r2,16(r16)
   13c7c:	84800515 	stw	r18,20(r16)
   13c80:	98001a1e 	bne	r19,zero,13cec <__smakebuf_r+0x15c>
   13c84:	dfc01317 	ldw	ra,76(sp)
   13c88:	dcc01217 	ldw	r19,72(sp)
   13c8c:	dc801117 	ldw	r18,68(sp)
   13c90:	dc401017 	ldw	r17,64(sp)
   13c94:	dc000f17 	ldw	r16,60(sp)
   13c98:	dec01404 	addi	sp,sp,80
   13c9c:	f800283a 	ret
   13ca0:	288010c4 	addi	r2,r5,67
   13ca4:	28800015 	stw	r2,0(r5)
   13ca8:	28800415 	stw	r2,16(r5)
   13cac:	00800044 	movi	r2,1
   13cb0:	28800515 	stw	r2,20(r5)
   13cb4:	f800283a 	ret
   13cb8:	04801004 	movi	r18,64
   13cbc:	003fe006 	br	13c40 <__alt_data_end+0xffff3c40>
   13cc0:	81000a17 	ldw	r4,40(r16)
   13cc4:	00c00074 	movhi	r3,1
   13cc8:	18d1eb04 	addi	r3,r3,18348
   13ccc:	20ffc51e 	bne	r4,r3,13be4 <__alt_data_end+0xffff3be4>
   13cd0:	8080030b 	ldhu	r2,12(r16)
   13cd4:	04810004 	movi	r18,1024
   13cd8:	84801315 	stw	r18,76(r16)
   13cdc:	1484b03a 	or	r2,r2,r18
   13ce0:	8080030d 	sth	r2,12(r16)
   13ce4:	0027883a 	mov	r19,zero
   13ce8:	003fd806 	br	13c4c <__alt_data_end+0xffff3c4c>
   13cec:	8140038f 	ldh	r5,14(r16)
   13cf0:	8809883a 	mov	r4,r17
   13cf4:	0014a240 	call	14a24 <_isatty_r>
   13cf8:	103fe226 	beq	r2,zero,13c84 <__alt_data_end+0xffff3c84>
   13cfc:	8080030b 	ldhu	r2,12(r16)
   13d00:	10800054 	ori	r2,r2,1
   13d04:	8080030d 	sth	r2,12(r16)
   13d08:	003fde06 	br	13c84 <__alt_data_end+0xffff3c84>
   13d0c:	8080030b 	ldhu	r2,12(r16)
   13d10:	10c0800c 	andi	r3,r2,512
   13d14:	183fdb1e 	bne	r3,zero,13c84 <__alt_data_end+0xffff3c84>
   13d18:	10800094 	ori	r2,r2,2
   13d1c:	80c010c4 	addi	r3,r16,67
   13d20:	8080030d 	sth	r2,12(r16)
   13d24:	00800044 	movi	r2,1
   13d28:	80c00015 	stw	r3,0(r16)
   13d2c:	80c00415 	stw	r3,16(r16)
   13d30:	80800515 	stw	r2,20(r16)
   13d34:	003fd306 	br	13c84 <__alt_data_end+0xffff3c84>
   13d38:	04810004 	movi	r18,1024
   13d3c:	003fc306 	br	13c4c <__alt_data_end+0xffff3c4c>
   13d40:	0027883a 	mov	r19,zero
   13d44:	04810004 	movi	r18,1024
   13d48:	003fc006 	br	13c4c <__alt_data_end+0xffff3c4c>

00013d4c <_malloc_r>:
   13d4c:	defff504 	addi	sp,sp,-44
   13d50:	dc800315 	stw	r18,12(sp)
   13d54:	dfc00a15 	stw	ra,40(sp)
   13d58:	df000915 	stw	fp,36(sp)
   13d5c:	ddc00815 	stw	r23,32(sp)
   13d60:	dd800715 	stw	r22,28(sp)
   13d64:	dd400615 	stw	r21,24(sp)
   13d68:	dd000515 	stw	r20,20(sp)
   13d6c:	dcc00415 	stw	r19,16(sp)
   13d70:	dc400215 	stw	r17,8(sp)
   13d74:	dc000115 	stw	r16,4(sp)
   13d78:	288002c4 	addi	r2,r5,11
   13d7c:	00c00584 	movi	r3,22
   13d80:	2025883a 	mov	r18,r4
   13d84:	18807f2e 	bgeu	r3,r2,13f84 <_malloc_r+0x238>
   13d88:	047ffe04 	movi	r17,-8
   13d8c:	1462703a 	and	r17,r2,r17
   13d90:	8800a316 	blt	r17,zero,14020 <_malloc_r+0x2d4>
   13d94:	8940a236 	bltu	r17,r5,14020 <_malloc_r+0x2d4>
   13d98:	0014e480 	call	14e48 <__malloc_lock>
   13d9c:	00807dc4 	movi	r2,503
   13da0:	1441e92e 	bgeu	r2,r17,14548 <_malloc_r+0x7fc>
   13da4:	8804d27a 	srli	r2,r17,9
   13da8:	1000a126 	beq	r2,zero,14030 <_malloc_r+0x2e4>
   13dac:	00c00104 	movi	r3,4
   13db0:	18811e36 	bltu	r3,r2,1422c <_malloc_r+0x4e0>
   13db4:	8804d1ba 	srli	r2,r17,6
   13db8:	12000e44 	addi	r8,r2,57
   13dbc:	11c00e04 	addi	r7,r2,56
   13dc0:	4209883a 	add	r4,r8,r8
   13dc4:	04c00074 	movhi	r19,1
   13dc8:	2109883a 	add	r4,r4,r4
   13dcc:	9cda1c04 	addi	r19,r19,26736
   13dd0:	2109883a 	add	r4,r4,r4
   13dd4:	9909883a 	add	r4,r19,r4
   13dd8:	24000117 	ldw	r16,4(r4)
   13ddc:	213ffe04 	addi	r4,r4,-8
   13de0:	24009726 	beq	r4,r16,14040 <_malloc_r+0x2f4>
   13de4:	80800117 	ldw	r2,4(r16)
   13de8:	01bfff04 	movi	r6,-4
   13dec:	014003c4 	movi	r5,15
   13df0:	1184703a 	and	r2,r2,r6
   13df4:	1447c83a 	sub	r3,r2,r17
   13df8:	28c00716 	blt	r5,r3,13e18 <_malloc_r+0xcc>
   13dfc:	1800920e 	bge	r3,zero,14048 <_malloc_r+0x2fc>
   13e00:	84000317 	ldw	r16,12(r16)
   13e04:	24008e26 	beq	r4,r16,14040 <_malloc_r+0x2f4>
   13e08:	80800117 	ldw	r2,4(r16)
   13e0c:	1184703a 	and	r2,r2,r6
   13e10:	1447c83a 	sub	r3,r2,r17
   13e14:	28fff90e 	bge	r5,r3,13dfc <__alt_data_end+0xffff3dfc>
   13e18:	3809883a 	mov	r4,r7
   13e1c:	01800074 	movhi	r6,1
   13e20:	9c000417 	ldw	r16,16(r19)
   13e24:	319a1c04 	addi	r6,r6,26736
   13e28:	32000204 	addi	r8,r6,8
   13e2c:	82013426 	beq	r16,r8,14300 <_malloc_r+0x5b4>
   13e30:	80c00117 	ldw	r3,4(r16)
   13e34:	00bfff04 	movi	r2,-4
   13e38:	188e703a 	and	r7,r3,r2
   13e3c:	3c45c83a 	sub	r2,r7,r17
   13e40:	00c003c4 	movi	r3,15
   13e44:	18811f16 	blt	r3,r2,142c4 <_malloc_r+0x578>
   13e48:	32000515 	stw	r8,20(r6)
   13e4c:	32000415 	stw	r8,16(r6)
   13e50:	10007f0e 	bge	r2,zero,14050 <_malloc_r+0x304>
   13e54:	00807fc4 	movi	r2,511
   13e58:	11c0fd36 	bltu	r2,r7,14250 <_malloc_r+0x504>
   13e5c:	3806d0fa 	srli	r3,r7,3
   13e60:	01c00044 	movi	r7,1
   13e64:	30800117 	ldw	r2,4(r6)
   13e68:	19400044 	addi	r5,r3,1
   13e6c:	294b883a 	add	r5,r5,r5
   13e70:	1807d0ba 	srai	r3,r3,2
   13e74:	294b883a 	add	r5,r5,r5
   13e78:	294b883a 	add	r5,r5,r5
   13e7c:	298b883a 	add	r5,r5,r6
   13e80:	38c6983a 	sll	r3,r7,r3
   13e84:	29c00017 	ldw	r7,0(r5)
   13e88:	2a7ffe04 	addi	r9,r5,-8
   13e8c:	1886b03a 	or	r3,r3,r2
   13e90:	82400315 	stw	r9,12(r16)
   13e94:	81c00215 	stw	r7,8(r16)
   13e98:	30c00115 	stw	r3,4(r6)
   13e9c:	2c000015 	stw	r16,0(r5)
   13ea0:	3c000315 	stw	r16,12(r7)
   13ea4:	2005d0ba 	srai	r2,r4,2
   13ea8:	01400044 	movi	r5,1
   13eac:	288a983a 	sll	r5,r5,r2
   13eb0:	19406f36 	bltu	r3,r5,14070 <_malloc_r+0x324>
   13eb4:	28c4703a 	and	r2,r5,r3
   13eb8:	10000a1e 	bne	r2,zero,13ee4 <_malloc_r+0x198>
   13ebc:	00bfff04 	movi	r2,-4
   13ec0:	294b883a 	add	r5,r5,r5
   13ec4:	2088703a 	and	r4,r4,r2
   13ec8:	28c4703a 	and	r2,r5,r3
   13ecc:	21000104 	addi	r4,r4,4
   13ed0:	1000041e 	bne	r2,zero,13ee4 <_malloc_r+0x198>
   13ed4:	294b883a 	add	r5,r5,r5
   13ed8:	28c4703a 	and	r2,r5,r3
   13edc:	21000104 	addi	r4,r4,4
   13ee0:	103ffc26 	beq	r2,zero,13ed4 <__alt_data_end+0xffff3ed4>
   13ee4:	02bfff04 	movi	r10,-4
   13ee8:	024003c4 	movi	r9,15
   13eec:	21800044 	addi	r6,r4,1
   13ef0:	318d883a 	add	r6,r6,r6
   13ef4:	318d883a 	add	r6,r6,r6
   13ef8:	318d883a 	add	r6,r6,r6
   13efc:	998d883a 	add	r6,r19,r6
   13f00:	333ffe04 	addi	r12,r6,-8
   13f04:	2017883a 	mov	r11,r4
   13f08:	31800104 	addi	r6,r6,4
   13f0c:	34000017 	ldw	r16,0(r6)
   13f10:	31fffd04 	addi	r7,r6,-12
   13f14:	81c0041e 	bne	r16,r7,13f28 <_malloc_r+0x1dc>
   13f18:	0000fb06 	br	14308 <_malloc_r+0x5bc>
   13f1c:	1801030e 	bge	r3,zero,1432c <_malloc_r+0x5e0>
   13f20:	84000317 	ldw	r16,12(r16)
   13f24:	81c0f826 	beq	r16,r7,14308 <_malloc_r+0x5bc>
   13f28:	80800117 	ldw	r2,4(r16)
   13f2c:	1284703a 	and	r2,r2,r10
   13f30:	1447c83a 	sub	r3,r2,r17
   13f34:	48fff90e 	bge	r9,r3,13f1c <__alt_data_end+0xffff3f1c>
   13f38:	80800317 	ldw	r2,12(r16)
   13f3c:	81000217 	ldw	r4,8(r16)
   13f40:	89400054 	ori	r5,r17,1
   13f44:	81400115 	stw	r5,4(r16)
   13f48:	20800315 	stw	r2,12(r4)
   13f4c:	11000215 	stw	r4,8(r2)
   13f50:	8463883a 	add	r17,r16,r17
   13f54:	9c400515 	stw	r17,20(r19)
   13f58:	9c400415 	stw	r17,16(r19)
   13f5c:	18800054 	ori	r2,r3,1
   13f60:	88800115 	stw	r2,4(r17)
   13f64:	8a000315 	stw	r8,12(r17)
   13f68:	8a000215 	stw	r8,8(r17)
   13f6c:	88e3883a 	add	r17,r17,r3
   13f70:	88c00015 	stw	r3,0(r17)
   13f74:	9009883a 	mov	r4,r18
   13f78:	0014e6c0 	call	14e6c <__malloc_unlock>
   13f7c:	80800204 	addi	r2,r16,8
   13f80:	00001b06 	br	13ff0 <_malloc_r+0x2a4>
   13f84:	04400404 	movi	r17,16
   13f88:	89402536 	bltu	r17,r5,14020 <_malloc_r+0x2d4>
   13f8c:	0014e480 	call	14e48 <__malloc_lock>
   13f90:	00800184 	movi	r2,6
   13f94:	01000084 	movi	r4,2
   13f98:	04c00074 	movhi	r19,1
   13f9c:	1085883a 	add	r2,r2,r2
   13fa0:	9cda1c04 	addi	r19,r19,26736
   13fa4:	1085883a 	add	r2,r2,r2
   13fa8:	9885883a 	add	r2,r19,r2
   13fac:	14000117 	ldw	r16,4(r2)
   13fb0:	10fffe04 	addi	r3,r2,-8
   13fb4:	80c0d926 	beq	r16,r3,1431c <_malloc_r+0x5d0>
   13fb8:	80c00117 	ldw	r3,4(r16)
   13fbc:	81000317 	ldw	r4,12(r16)
   13fc0:	00bfff04 	movi	r2,-4
   13fc4:	1884703a 	and	r2,r3,r2
   13fc8:	81400217 	ldw	r5,8(r16)
   13fcc:	8085883a 	add	r2,r16,r2
   13fd0:	10c00117 	ldw	r3,4(r2)
   13fd4:	29000315 	stw	r4,12(r5)
   13fd8:	21400215 	stw	r5,8(r4)
   13fdc:	18c00054 	ori	r3,r3,1
   13fe0:	10c00115 	stw	r3,4(r2)
   13fe4:	9009883a 	mov	r4,r18
   13fe8:	0014e6c0 	call	14e6c <__malloc_unlock>
   13fec:	80800204 	addi	r2,r16,8
   13ff0:	dfc00a17 	ldw	ra,40(sp)
   13ff4:	df000917 	ldw	fp,36(sp)
   13ff8:	ddc00817 	ldw	r23,32(sp)
   13ffc:	dd800717 	ldw	r22,28(sp)
   14000:	dd400617 	ldw	r21,24(sp)
   14004:	dd000517 	ldw	r20,20(sp)
   14008:	dcc00417 	ldw	r19,16(sp)
   1400c:	dc800317 	ldw	r18,12(sp)
   14010:	dc400217 	ldw	r17,8(sp)
   14014:	dc000117 	ldw	r16,4(sp)
   14018:	dec00b04 	addi	sp,sp,44
   1401c:	f800283a 	ret
   14020:	00800304 	movi	r2,12
   14024:	90800015 	stw	r2,0(r18)
   14028:	0005883a 	mov	r2,zero
   1402c:	003ff006 	br	13ff0 <__alt_data_end+0xffff3ff0>
   14030:	01002004 	movi	r4,128
   14034:	02001004 	movi	r8,64
   14038:	01c00fc4 	movi	r7,63
   1403c:	003f6106 	br	13dc4 <__alt_data_end+0xffff3dc4>
   14040:	4009883a 	mov	r4,r8
   14044:	003f7506 	br	13e1c <__alt_data_end+0xffff3e1c>
   14048:	81000317 	ldw	r4,12(r16)
   1404c:	003fde06 	br	13fc8 <__alt_data_end+0xffff3fc8>
   14050:	81c5883a 	add	r2,r16,r7
   14054:	11400117 	ldw	r5,4(r2)
   14058:	9009883a 	mov	r4,r18
   1405c:	29400054 	ori	r5,r5,1
   14060:	11400115 	stw	r5,4(r2)
   14064:	0014e6c0 	call	14e6c <__malloc_unlock>
   14068:	80800204 	addi	r2,r16,8
   1406c:	003fe006 	br	13ff0 <__alt_data_end+0xffff3ff0>
   14070:	9c000217 	ldw	r16,8(r19)
   14074:	00bfff04 	movi	r2,-4
   14078:	85800117 	ldw	r22,4(r16)
   1407c:	b0ac703a 	and	r22,r22,r2
   14080:	b4400336 	bltu	r22,r17,14090 <_malloc_r+0x344>
   14084:	b445c83a 	sub	r2,r22,r17
   14088:	00c003c4 	movi	r3,15
   1408c:	18805d16 	blt	r3,r2,14204 <_malloc_r+0x4b8>
   14090:	05c00074 	movhi	r23,1
   14094:	008000b4 	movhi	r2,2
   14098:	10a1de04 	addi	r2,r2,-30856
   1409c:	bddb2904 	addi	r23,r23,27812
   140a0:	15400017 	ldw	r21,0(r2)
   140a4:	b8c00017 	ldw	r3,0(r23)
   140a8:	00bfffc4 	movi	r2,-1
   140ac:	858d883a 	add	r6,r16,r22
   140b0:	8d6b883a 	add	r21,r17,r21
   140b4:	1880ea26 	beq	r3,r2,14460 <_malloc_r+0x714>
   140b8:	ad4403c4 	addi	r21,r21,4111
   140bc:	00bc0004 	movi	r2,-4096
   140c0:	a8aa703a 	and	r21,r21,r2
   140c4:	a80b883a 	mov	r5,r21
   140c8:	9009883a 	mov	r4,r18
   140cc:	d9800015 	stw	r6,0(sp)
   140d0:	00146800 	call	14680 <_sbrk_r>
   140d4:	1029883a 	mov	r20,r2
   140d8:	00bfffc4 	movi	r2,-1
   140dc:	d9800017 	ldw	r6,0(sp)
   140e0:	a080e826 	beq	r20,r2,14484 <_malloc_r+0x738>
   140e4:	a180a636 	bltu	r20,r6,14380 <_malloc_r+0x634>
   140e8:	070000b4 	movhi	fp,2
   140ec:	e721df04 	addi	fp,fp,-30852
   140f0:	e0800017 	ldw	r2,0(fp)
   140f4:	a887883a 	add	r3,r21,r2
   140f8:	e0c00015 	stw	r3,0(fp)
   140fc:	3500e626 	beq	r6,r20,14498 <_malloc_r+0x74c>
   14100:	b9000017 	ldw	r4,0(r23)
   14104:	00bfffc4 	movi	r2,-1
   14108:	2080ee26 	beq	r4,r2,144c4 <_malloc_r+0x778>
   1410c:	a185c83a 	sub	r2,r20,r6
   14110:	10c5883a 	add	r2,r2,r3
   14114:	e0800015 	stw	r2,0(fp)
   14118:	a0c001cc 	andi	r3,r20,7
   1411c:	1800bc26 	beq	r3,zero,14410 <_malloc_r+0x6c4>
   14120:	a0e9c83a 	sub	r20,r20,r3
   14124:	00840204 	movi	r2,4104
   14128:	a5000204 	addi	r20,r20,8
   1412c:	10c7c83a 	sub	r3,r2,r3
   14130:	a545883a 	add	r2,r20,r21
   14134:	1083ffcc 	andi	r2,r2,4095
   14138:	18abc83a 	sub	r21,r3,r2
   1413c:	a80b883a 	mov	r5,r21
   14140:	9009883a 	mov	r4,r18
   14144:	00146800 	call	14680 <_sbrk_r>
   14148:	00ffffc4 	movi	r3,-1
   1414c:	10c0e126 	beq	r2,r3,144d4 <_malloc_r+0x788>
   14150:	1505c83a 	sub	r2,r2,r20
   14154:	1545883a 	add	r2,r2,r21
   14158:	10800054 	ori	r2,r2,1
   1415c:	e0c00017 	ldw	r3,0(fp)
   14160:	9d000215 	stw	r20,8(r19)
   14164:	a0800115 	stw	r2,4(r20)
   14168:	a8c7883a 	add	r3,r21,r3
   1416c:	e0c00015 	stw	r3,0(fp)
   14170:	84c00e26 	beq	r16,r19,141ac <_malloc_r+0x460>
   14174:	018003c4 	movi	r6,15
   14178:	3580a72e 	bgeu	r6,r22,14418 <_malloc_r+0x6cc>
   1417c:	81400117 	ldw	r5,4(r16)
   14180:	013ffe04 	movi	r4,-8
   14184:	b0bffd04 	addi	r2,r22,-12
   14188:	1104703a 	and	r2,r2,r4
   1418c:	2900004c 	andi	r4,r5,1
   14190:	2088b03a 	or	r4,r4,r2
   14194:	81000115 	stw	r4,4(r16)
   14198:	01400144 	movi	r5,5
   1419c:	8089883a 	add	r4,r16,r2
   141a0:	21400115 	stw	r5,4(r4)
   141a4:	21400215 	stw	r5,8(r4)
   141a8:	3080cd36 	bltu	r6,r2,144e0 <_malloc_r+0x794>
   141ac:	008000b4 	movhi	r2,2
   141b0:	10a1dd04 	addi	r2,r2,-30860
   141b4:	11000017 	ldw	r4,0(r2)
   141b8:	20c0012e 	bgeu	r4,r3,141c0 <_malloc_r+0x474>
   141bc:	10c00015 	stw	r3,0(r2)
   141c0:	008000b4 	movhi	r2,2
   141c4:	10a1dc04 	addi	r2,r2,-30864
   141c8:	11000017 	ldw	r4,0(r2)
   141cc:	9c000217 	ldw	r16,8(r19)
   141d0:	20c0012e 	bgeu	r4,r3,141d8 <_malloc_r+0x48c>
   141d4:	10c00015 	stw	r3,0(r2)
   141d8:	80c00117 	ldw	r3,4(r16)
   141dc:	00bfff04 	movi	r2,-4
   141e0:	1886703a 	and	r3,r3,r2
   141e4:	1c45c83a 	sub	r2,r3,r17
   141e8:	1c400236 	bltu	r3,r17,141f4 <_malloc_r+0x4a8>
   141ec:	00c003c4 	movi	r3,15
   141f0:	18800416 	blt	r3,r2,14204 <_malloc_r+0x4b8>
   141f4:	9009883a 	mov	r4,r18
   141f8:	0014e6c0 	call	14e6c <__malloc_unlock>
   141fc:	0005883a 	mov	r2,zero
   14200:	003f7b06 	br	13ff0 <__alt_data_end+0xffff3ff0>
   14204:	88c00054 	ori	r3,r17,1
   14208:	80c00115 	stw	r3,4(r16)
   1420c:	8463883a 	add	r17,r16,r17
   14210:	10800054 	ori	r2,r2,1
   14214:	9c400215 	stw	r17,8(r19)
   14218:	88800115 	stw	r2,4(r17)
   1421c:	9009883a 	mov	r4,r18
   14220:	0014e6c0 	call	14e6c <__malloc_unlock>
   14224:	80800204 	addi	r2,r16,8
   14228:	003f7106 	br	13ff0 <__alt_data_end+0xffff3ff0>
   1422c:	00c00504 	movi	r3,20
   14230:	18804a2e 	bgeu	r3,r2,1435c <_malloc_r+0x610>
   14234:	00c01504 	movi	r3,84
   14238:	18806e36 	bltu	r3,r2,143f4 <_malloc_r+0x6a8>
   1423c:	8804d33a 	srli	r2,r17,12
   14240:	12001bc4 	addi	r8,r2,111
   14244:	11c01b84 	addi	r7,r2,110
   14248:	4209883a 	add	r4,r8,r8
   1424c:	003edd06 	br	13dc4 <__alt_data_end+0xffff3dc4>
   14250:	3804d27a 	srli	r2,r7,9
   14254:	00c00104 	movi	r3,4
   14258:	1880442e 	bgeu	r3,r2,1436c <_malloc_r+0x620>
   1425c:	00c00504 	movi	r3,20
   14260:	18808136 	bltu	r3,r2,14468 <_malloc_r+0x71c>
   14264:	11401704 	addi	r5,r2,92
   14268:	10c016c4 	addi	r3,r2,91
   1426c:	294b883a 	add	r5,r5,r5
   14270:	294b883a 	add	r5,r5,r5
   14274:	294b883a 	add	r5,r5,r5
   14278:	994b883a 	add	r5,r19,r5
   1427c:	28800017 	ldw	r2,0(r5)
   14280:	01800074 	movhi	r6,1
   14284:	297ffe04 	addi	r5,r5,-8
   14288:	319a1c04 	addi	r6,r6,26736
   1428c:	28806526 	beq	r5,r2,14424 <_malloc_r+0x6d8>
   14290:	01bfff04 	movi	r6,-4
   14294:	10c00117 	ldw	r3,4(r2)
   14298:	1986703a 	and	r3,r3,r6
   1429c:	38c0022e 	bgeu	r7,r3,142a8 <_malloc_r+0x55c>
   142a0:	10800217 	ldw	r2,8(r2)
   142a4:	28bffb1e 	bne	r5,r2,14294 <__alt_data_end+0xffff4294>
   142a8:	11400317 	ldw	r5,12(r2)
   142ac:	98c00117 	ldw	r3,4(r19)
   142b0:	81400315 	stw	r5,12(r16)
   142b4:	80800215 	stw	r2,8(r16)
   142b8:	2c000215 	stw	r16,8(r5)
   142bc:	14000315 	stw	r16,12(r2)
   142c0:	003ef806 	br	13ea4 <__alt_data_end+0xffff3ea4>
   142c4:	88c00054 	ori	r3,r17,1
   142c8:	80c00115 	stw	r3,4(r16)
   142cc:	8463883a 	add	r17,r16,r17
   142d0:	34400515 	stw	r17,20(r6)
   142d4:	34400415 	stw	r17,16(r6)
   142d8:	10c00054 	ori	r3,r2,1
   142dc:	8a000315 	stw	r8,12(r17)
   142e0:	8a000215 	stw	r8,8(r17)
   142e4:	88c00115 	stw	r3,4(r17)
   142e8:	88a3883a 	add	r17,r17,r2
   142ec:	88800015 	stw	r2,0(r17)
   142f0:	9009883a 	mov	r4,r18
   142f4:	0014e6c0 	call	14e6c <__malloc_unlock>
   142f8:	80800204 	addi	r2,r16,8
   142fc:	003f3c06 	br	13ff0 <__alt_data_end+0xffff3ff0>
   14300:	30c00117 	ldw	r3,4(r6)
   14304:	003ee706 	br	13ea4 <__alt_data_end+0xffff3ea4>
   14308:	5ac00044 	addi	r11,r11,1
   1430c:	588000cc 	andi	r2,r11,3
   14310:	31800204 	addi	r6,r6,8
   14314:	103efd1e 	bne	r2,zero,13f0c <__alt_data_end+0xffff3f0c>
   14318:	00002406 	br	143ac <_malloc_r+0x660>
   1431c:	14000317 	ldw	r16,12(r2)
   14320:	143f251e 	bne	r2,r16,13fb8 <__alt_data_end+0xffff3fb8>
   14324:	21000084 	addi	r4,r4,2
   14328:	003ebc06 	br	13e1c <__alt_data_end+0xffff3e1c>
   1432c:	8085883a 	add	r2,r16,r2
   14330:	10c00117 	ldw	r3,4(r2)
   14334:	81000317 	ldw	r4,12(r16)
   14338:	81400217 	ldw	r5,8(r16)
   1433c:	18c00054 	ori	r3,r3,1
   14340:	10c00115 	stw	r3,4(r2)
   14344:	29000315 	stw	r4,12(r5)
   14348:	21400215 	stw	r5,8(r4)
   1434c:	9009883a 	mov	r4,r18
   14350:	0014e6c0 	call	14e6c <__malloc_unlock>
   14354:	80800204 	addi	r2,r16,8
   14358:	003f2506 	br	13ff0 <__alt_data_end+0xffff3ff0>
   1435c:	12001704 	addi	r8,r2,92
   14360:	11c016c4 	addi	r7,r2,91
   14364:	4209883a 	add	r4,r8,r8
   14368:	003e9606 	br	13dc4 <__alt_data_end+0xffff3dc4>
   1436c:	3804d1ba 	srli	r2,r7,6
   14370:	11400e44 	addi	r5,r2,57
   14374:	10c00e04 	addi	r3,r2,56
   14378:	294b883a 	add	r5,r5,r5
   1437c:	003fbc06 	br	14270 <__alt_data_end+0xffff4270>
   14380:	84ff5926 	beq	r16,r19,140e8 <__alt_data_end+0xffff40e8>
   14384:	00800074 	movhi	r2,1
   14388:	109a1c04 	addi	r2,r2,26736
   1438c:	14000217 	ldw	r16,8(r2)
   14390:	00bfff04 	movi	r2,-4
   14394:	80c00117 	ldw	r3,4(r16)
   14398:	1886703a 	and	r3,r3,r2
   1439c:	003f9106 	br	141e4 <__alt_data_end+0xffff41e4>
   143a0:	60800217 	ldw	r2,8(r12)
   143a4:	213fffc4 	addi	r4,r4,-1
   143a8:	1300651e 	bne	r2,r12,14540 <_malloc_r+0x7f4>
   143ac:	208000cc 	andi	r2,r4,3
   143b0:	633ffe04 	addi	r12,r12,-8
   143b4:	103ffa1e 	bne	r2,zero,143a0 <__alt_data_end+0xffff43a0>
   143b8:	98800117 	ldw	r2,4(r19)
   143bc:	0146303a 	nor	r3,zero,r5
   143c0:	1884703a 	and	r2,r3,r2
   143c4:	98800115 	stw	r2,4(r19)
   143c8:	294b883a 	add	r5,r5,r5
   143cc:	117f2836 	bltu	r2,r5,14070 <__alt_data_end+0xffff4070>
   143d0:	283f2726 	beq	r5,zero,14070 <__alt_data_end+0xffff4070>
   143d4:	2886703a 	and	r3,r5,r2
   143d8:	5809883a 	mov	r4,r11
   143dc:	183ec31e 	bne	r3,zero,13eec <__alt_data_end+0xffff3eec>
   143e0:	294b883a 	add	r5,r5,r5
   143e4:	2886703a 	and	r3,r5,r2
   143e8:	21000104 	addi	r4,r4,4
   143ec:	183ffc26 	beq	r3,zero,143e0 <__alt_data_end+0xffff43e0>
   143f0:	003ebe06 	br	13eec <__alt_data_end+0xffff3eec>
   143f4:	00c05504 	movi	r3,340
   143f8:	18801236 	bltu	r3,r2,14444 <_malloc_r+0x6f8>
   143fc:	8804d3fa 	srli	r2,r17,15
   14400:	12001e04 	addi	r8,r2,120
   14404:	11c01dc4 	addi	r7,r2,119
   14408:	4209883a 	add	r4,r8,r8
   1440c:	003e6d06 	br	13dc4 <__alt_data_end+0xffff3dc4>
   14410:	00c40004 	movi	r3,4096
   14414:	003f4606 	br	14130 <__alt_data_end+0xffff4130>
   14418:	00800044 	movi	r2,1
   1441c:	a0800115 	stw	r2,4(r20)
   14420:	003f7406 	br	141f4 <__alt_data_end+0xffff41f4>
   14424:	1805d0ba 	srai	r2,r3,2
   14428:	01c00044 	movi	r7,1
   1442c:	30c00117 	ldw	r3,4(r6)
   14430:	388e983a 	sll	r7,r7,r2
   14434:	2805883a 	mov	r2,r5
   14438:	38c6b03a 	or	r3,r7,r3
   1443c:	30c00115 	stw	r3,4(r6)
   14440:	003f9b06 	br	142b0 <__alt_data_end+0xffff42b0>
   14444:	00c15504 	movi	r3,1364
   14448:	18801a36 	bltu	r3,r2,144b4 <_malloc_r+0x768>
   1444c:	8804d4ba 	srli	r2,r17,18
   14450:	12001f44 	addi	r8,r2,125
   14454:	11c01f04 	addi	r7,r2,124
   14458:	4209883a 	add	r4,r8,r8
   1445c:	003e5906 	br	13dc4 <__alt_data_end+0xffff3dc4>
   14460:	ad400404 	addi	r21,r21,16
   14464:	003f1706 	br	140c4 <__alt_data_end+0xffff40c4>
   14468:	00c01504 	movi	r3,84
   1446c:	18802336 	bltu	r3,r2,144fc <_malloc_r+0x7b0>
   14470:	3804d33a 	srli	r2,r7,12
   14474:	11401bc4 	addi	r5,r2,111
   14478:	10c01b84 	addi	r3,r2,110
   1447c:	294b883a 	add	r5,r5,r5
   14480:	003f7b06 	br	14270 <__alt_data_end+0xffff4270>
   14484:	9c000217 	ldw	r16,8(r19)
   14488:	00bfff04 	movi	r2,-4
   1448c:	80c00117 	ldw	r3,4(r16)
   14490:	1886703a 	and	r3,r3,r2
   14494:	003f5306 	br	141e4 <__alt_data_end+0xffff41e4>
   14498:	3083ffcc 	andi	r2,r6,4095
   1449c:	103f181e 	bne	r2,zero,14100 <__alt_data_end+0xffff4100>
   144a0:	99000217 	ldw	r4,8(r19)
   144a4:	b545883a 	add	r2,r22,r21
   144a8:	10800054 	ori	r2,r2,1
   144ac:	20800115 	stw	r2,4(r4)
   144b0:	003f3e06 	br	141ac <__alt_data_end+0xffff41ac>
   144b4:	01003f84 	movi	r4,254
   144b8:	02001fc4 	movi	r8,127
   144bc:	01c01f84 	movi	r7,126
   144c0:	003e4006 	br	13dc4 <__alt_data_end+0xffff3dc4>
   144c4:	00800074 	movhi	r2,1
   144c8:	109b2904 	addi	r2,r2,27812
   144cc:	15000015 	stw	r20,0(r2)
   144d0:	003f1106 	br	14118 <__alt_data_end+0xffff4118>
   144d4:	00800044 	movi	r2,1
   144d8:	002b883a 	mov	r21,zero
   144dc:	003f1f06 	br	1415c <__alt_data_end+0xffff415c>
   144e0:	81400204 	addi	r5,r16,8
   144e4:	9009883a 	mov	r4,r18
   144e8:	00136f80 	call	136f8 <_free_r>
   144ec:	008000b4 	movhi	r2,2
   144f0:	10a1df04 	addi	r2,r2,-30852
   144f4:	10c00017 	ldw	r3,0(r2)
   144f8:	003f2c06 	br	141ac <__alt_data_end+0xffff41ac>
   144fc:	00c05504 	movi	r3,340
   14500:	18800536 	bltu	r3,r2,14518 <_malloc_r+0x7cc>
   14504:	3804d3fa 	srli	r2,r7,15
   14508:	11401e04 	addi	r5,r2,120
   1450c:	10c01dc4 	addi	r3,r2,119
   14510:	294b883a 	add	r5,r5,r5
   14514:	003f5606 	br	14270 <__alt_data_end+0xffff4270>
   14518:	00c15504 	movi	r3,1364
   1451c:	18800536 	bltu	r3,r2,14534 <_malloc_r+0x7e8>
   14520:	3804d4ba 	srli	r2,r7,18
   14524:	11401f44 	addi	r5,r2,125
   14528:	10c01f04 	addi	r3,r2,124
   1452c:	294b883a 	add	r5,r5,r5
   14530:	003f4f06 	br	14270 <__alt_data_end+0xffff4270>
   14534:	01403f84 	movi	r5,254
   14538:	00c01f84 	movi	r3,126
   1453c:	003f4c06 	br	14270 <__alt_data_end+0xffff4270>
   14540:	98800117 	ldw	r2,4(r19)
   14544:	003fa006 	br	143c8 <__alt_data_end+0xffff43c8>
   14548:	8808d0fa 	srli	r4,r17,3
   1454c:	20800044 	addi	r2,r4,1
   14550:	1085883a 	add	r2,r2,r2
   14554:	003e9006 	br	13f98 <__alt_data_end+0xffff3f98>

00014558 <memset>:
   14558:	20c000cc 	andi	r3,r4,3
   1455c:	2005883a 	mov	r2,r4
   14560:	18004426 	beq	r3,zero,14674 <memset+0x11c>
   14564:	31ffffc4 	addi	r7,r6,-1
   14568:	30004026 	beq	r6,zero,1466c <memset+0x114>
   1456c:	2813883a 	mov	r9,r5
   14570:	200d883a 	mov	r6,r4
   14574:	2007883a 	mov	r3,r4
   14578:	00000406 	br	1458c <memset+0x34>
   1457c:	3a3fffc4 	addi	r8,r7,-1
   14580:	31800044 	addi	r6,r6,1
   14584:	38003926 	beq	r7,zero,1466c <memset+0x114>
   14588:	400f883a 	mov	r7,r8
   1458c:	18c00044 	addi	r3,r3,1
   14590:	32400005 	stb	r9,0(r6)
   14594:	1a0000cc 	andi	r8,r3,3
   14598:	403ff81e 	bne	r8,zero,1457c <__alt_data_end+0xffff457c>
   1459c:	010000c4 	movi	r4,3
   145a0:	21c02d2e 	bgeu	r4,r7,14658 <memset+0x100>
   145a4:	29003fcc 	andi	r4,r5,255
   145a8:	200c923a 	slli	r6,r4,8
   145ac:	3108b03a 	or	r4,r6,r4
   145b0:	200c943a 	slli	r6,r4,16
   145b4:	218cb03a 	or	r6,r4,r6
   145b8:	010003c4 	movi	r4,15
   145bc:	21c0182e 	bgeu	r4,r7,14620 <memset+0xc8>
   145c0:	3b3ffc04 	addi	r12,r7,-16
   145c4:	6018d13a 	srli	r12,r12,4
   145c8:	1a000104 	addi	r8,r3,4
   145cc:	1ac00204 	addi	r11,r3,8
   145d0:	6008913a 	slli	r4,r12,4
   145d4:	1a800304 	addi	r10,r3,12
   145d8:	1813883a 	mov	r9,r3
   145dc:	21000504 	addi	r4,r4,20
   145e0:	1909883a 	add	r4,r3,r4
   145e4:	49800015 	stw	r6,0(r9)
   145e8:	41800015 	stw	r6,0(r8)
   145ec:	59800015 	stw	r6,0(r11)
   145f0:	51800015 	stw	r6,0(r10)
   145f4:	42000404 	addi	r8,r8,16
   145f8:	4a400404 	addi	r9,r9,16
   145fc:	5ac00404 	addi	r11,r11,16
   14600:	52800404 	addi	r10,r10,16
   14604:	413ff71e 	bne	r8,r4,145e4 <__alt_data_end+0xffff45e4>
   14608:	63000044 	addi	r12,r12,1
   1460c:	6018913a 	slli	r12,r12,4
   14610:	39c003cc 	andi	r7,r7,15
   14614:	010000c4 	movi	r4,3
   14618:	1b07883a 	add	r3,r3,r12
   1461c:	21c00e2e 	bgeu	r4,r7,14658 <memset+0x100>
   14620:	1813883a 	mov	r9,r3
   14624:	3811883a 	mov	r8,r7
   14628:	010000c4 	movi	r4,3
   1462c:	49800015 	stw	r6,0(r9)
   14630:	423fff04 	addi	r8,r8,-4
   14634:	4a400104 	addi	r9,r9,4
   14638:	223ffc36 	bltu	r4,r8,1462c <__alt_data_end+0xffff462c>
   1463c:	393fff04 	addi	r4,r7,-4
   14640:	2008d0ba 	srli	r4,r4,2
   14644:	39c000cc 	andi	r7,r7,3
   14648:	21000044 	addi	r4,r4,1
   1464c:	2109883a 	add	r4,r4,r4
   14650:	2109883a 	add	r4,r4,r4
   14654:	1907883a 	add	r3,r3,r4
   14658:	38000526 	beq	r7,zero,14670 <memset+0x118>
   1465c:	19cf883a 	add	r7,r3,r7
   14660:	19400005 	stb	r5,0(r3)
   14664:	18c00044 	addi	r3,r3,1
   14668:	38fffd1e 	bne	r7,r3,14660 <__alt_data_end+0xffff4660>
   1466c:	f800283a 	ret
   14670:	f800283a 	ret
   14674:	2007883a 	mov	r3,r4
   14678:	300f883a 	mov	r7,r6
   1467c:	003fc706 	br	1459c <__alt_data_end+0xffff459c>

00014680 <_sbrk_r>:
   14680:	defffd04 	addi	sp,sp,-12
   14684:	dc000015 	stw	r16,0(sp)
   14688:	040000b4 	movhi	r16,2
   1468c:	dc400115 	stw	r17,4(sp)
   14690:	8421db04 	addi	r16,r16,-30868
   14694:	2023883a 	mov	r17,r4
   14698:	2809883a 	mov	r4,r5
   1469c:	dfc00215 	stw	ra,8(sp)
   146a0:	80000015 	stw	zero,0(r16)
   146a4:	0014fc80 	call	14fc8 <sbrk>
   146a8:	00ffffc4 	movi	r3,-1
   146ac:	10c00526 	beq	r2,r3,146c4 <_sbrk_r+0x44>
   146b0:	dfc00217 	ldw	ra,8(sp)
   146b4:	dc400117 	ldw	r17,4(sp)
   146b8:	dc000017 	ldw	r16,0(sp)
   146bc:	dec00304 	addi	sp,sp,12
   146c0:	f800283a 	ret
   146c4:	80c00017 	ldw	r3,0(r16)
   146c8:	183ff926 	beq	r3,zero,146b0 <__alt_data_end+0xffff46b0>
   146cc:	88c00015 	stw	r3,0(r17)
   146d0:	003ff706 	br	146b0 <__alt_data_end+0xffff46b0>

000146d4 <__sread>:
   146d4:	defffe04 	addi	sp,sp,-8
   146d8:	dc000015 	stw	r16,0(sp)
   146dc:	2821883a 	mov	r16,r5
   146e0:	2940038f 	ldh	r5,14(r5)
   146e4:	dfc00115 	stw	ra,4(sp)
   146e8:	0014ad80 	call	14ad8 <_read_r>
   146ec:	10000716 	blt	r2,zero,1470c <__sread+0x38>
   146f0:	80c01417 	ldw	r3,80(r16)
   146f4:	1887883a 	add	r3,r3,r2
   146f8:	80c01415 	stw	r3,80(r16)
   146fc:	dfc00117 	ldw	ra,4(sp)
   14700:	dc000017 	ldw	r16,0(sp)
   14704:	dec00204 	addi	sp,sp,8
   14708:	f800283a 	ret
   1470c:	80c0030b 	ldhu	r3,12(r16)
   14710:	18fbffcc 	andi	r3,r3,61439
   14714:	80c0030d 	sth	r3,12(r16)
   14718:	dfc00117 	ldw	ra,4(sp)
   1471c:	dc000017 	ldw	r16,0(sp)
   14720:	dec00204 	addi	sp,sp,8
   14724:	f800283a 	ret

00014728 <__seofread>:
   14728:	0005883a 	mov	r2,zero
   1472c:	f800283a 	ret

00014730 <__swrite>:
   14730:	2880030b 	ldhu	r2,12(r5)
   14734:	defffb04 	addi	sp,sp,-20
   14738:	dcc00315 	stw	r19,12(sp)
   1473c:	dc800215 	stw	r18,8(sp)
   14740:	dc400115 	stw	r17,4(sp)
   14744:	dc000015 	stw	r16,0(sp)
   14748:	dfc00415 	stw	ra,16(sp)
   1474c:	10c0400c 	andi	r3,r2,256
   14750:	2821883a 	mov	r16,r5
   14754:	2023883a 	mov	r17,r4
   14758:	3025883a 	mov	r18,r6
   1475c:	3827883a 	mov	r19,r7
   14760:	18000526 	beq	r3,zero,14778 <__swrite+0x48>
   14764:	2940038f 	ldh	r5,14(r5)
   14768:	01c00084 	movi	r7,2
   1476c:	000d883a 	mov	r6,zero
   14770:	0014a780 	call	14a78 <_lseek_r>
   14774:	8080030b 	ldhu	r2,12(r16)
   14778:	8140038f 	ldh	r5,14(r16)
   1477c:	10bbffcc 	andi	r2,r2,61439
   14780:	980f883a 	mov	r7,r19
   14784:	900d883a 	mov	r6,r18
   14788:	8809883a 	mov	r4,r17
   1478c:	8080030d 	sth	r2,12(r16)
   14790:	dfc00417 	ldw	ra,16(sp)
   14794:	dcc00317 	ldw	r19,12(sp)
   14798:	dc800217 	ldw	r18,8(sp)
   1479c:	dc400117 	ldw	r17,4(sp)
   147a0:	dc000017 	ldw	r16,0(sp)
   147a4:	dec00504 	addi	sp,sp,20
   147a8:	00148101 	jmpi	14810 <_write_r>

000147ac <__sseek>:
   147ac:	defffe04 	addi	sp,sp,-8
   147b0:	dc000015 	stw	r16,0(sp)
   147b4:	2821883a 	mov	r16,r5
   147b8:	2940038f 	ldh	r5,14(r5)
   147bc:	dfc00115 	stw	ra,4(sp)
   147c0:	0014a780 	call	14a78 <_lseek_r>
   147c4:	00ffffc4 	movi	r3,-1
   147c8:	10c00826 	beq	r2,r3,147ec <__sseek+0x40>
   147cc:	80c0030b 	ldhu	r3,12(r16)
   147d0:	80801415 	stw	r2,80(r16)
   147d4:	18c40014 	ori	r3,r3,4096
   147d8:	80c0030d 	sth	r3,12(r16)
   147dc:	dfc00117 	ldw	ra,4(sp)
   147e0:	dc000017 	ldw	r16,0(sp)
   147e4:	dec00204 	addi	sp,sp,8
   147e8:	f800283a 	ret
   147ec:	80c0030b 	ldhu	r3,12(r16)
   147f0:	18fbffcc 	andi	r3,r3,61439
   147f4:	80c0030d 	sth	r3,12(r16)
   147f8:	dfc00117 	ldw	ra,4(sp)
   147fc:	dc000017 	ldw	r16,0(sp)
   14800:	dec00204 	addi	sp,sp,8
   14804:	f800283a 	ret

00014808 <__sclose>:
   14808:	2940038f 	ldh	r5,14(r5)
   1480c:	00148701 	jmpi	14870 <_close_r>

00014810 <_write_r>:
   14810:	defffd04 	addi	sp,sp,-12
   14814:	2805883a 	mov	r2,r5
   14818:	dc000015 	stw	r16,0(sp)
   1481c:	040000b4 	movhi	r16,2
   14820:	dc400115 	stw	r17,4(sp)
   14824:	300b883a 	mov	r5,r6
   14828:	8421db04 	addi	r16,r16,-30868
   1482c:	2023883a 	mov	r17,r4
   14830:	380d883a 	mov	r6,r7
   14834:	1009883a 	mov	r4,r2
   14838:	dfc00215 	stw	ra,8(sp)
   1483c:	80000015 	stw	zero,0(r16)
   14840:	00150b40 	call	150b4 <write>
   14844:	00ffffc4 	movi	r3,-1
   14848:	10c00526 	beq	r2,r3,14860 <_write_r+0x50>
   1484c:	dfc00217 	ldw	ra,8(sp)
   14850:	dc400117 	ldw	r17,4(sp)
   14854:	dc000017 	ldw	r16,0(sp)
   14858:	dec00304 	addi	sp,sp,12
   1485c:	f800283a 	ret
   14860:	80c00017 	ldw	r3,0(r16)
   14864:	183ff926 	beq	r3,zero,1484c <__alt_data_end+0xffff484c>
   14868:	88c00015 	stw	r3,0(r17)
   1486c:	003ff706 	br	1484c <__alt_data_end+0xffff484c>

00014870 <_close_r>:
   14870:	defffd04 	addi	sp,sp,-12
   14874:	dc000015 	stw	r16,0(sp)
   14878:	040000b4 	movhi	r16,2
   1487c:	dc400115 	stw	r17,4(sp)
   14880:	8421db04 	addi	r16,r16,-30868
   14884:	2023883a 	mov	r17,r4
   14888:	2809883a 	mov	r4,r5
   1488c:	dfc00215 	stw	ra,8(sp)
   14890:	80000015 	stw	zero,0(r16)
   14894:	00118780 	call	11878 <close>
   14898:	00ffffc4 	movi	r3,-1
   1489c:	10c00526 	beq	r2,r3,148b4 <_close_r+0x44>
   148a0:	dfc00217 	ldw	ra,8(sp)
   148a4:	dc400117 	ldw	r17,4(sp)
   148a8:	dc000017 	ldw	r16,0(sp)
   148ac:	dec00304 	addi	sp,sp,12
   148b0:	f800283a 	ret
   148b4:	80c00017 	ldw	r3,0(r16)
   148b8:	183ff926 	beq	r3,zero,148a0 <__alt_data_end+0xffff48a0>
   148bc:	88c00015 	stw	r3,0(r17)
   148c0:	003ff706 	br	148a0 <__alt_data_end+0xffff48a0>

000148c4 <_fclose_r>:
   148c4:	28003926 	beq	r5,zero,149ac <_fclose_r+0xe8>
   148c8:	defffc04 	addi	sp,sp,-16
   148cc:	dc400115 	stw	r17,4(sp)
   148d0:	dc000015 	stw	r16,0(sp)
   148d4:	dfc00315 	stw	ra,12(sp)
   148d8:	dc800215 	stw	r18,8(sp)
   148dc:	2023883a 	mov	r17,r4
   148e0:	2821883a 	mov	r16,r5
   148e4:	20000226 	beq	r4,zero,148f0 <_fclose_r+0x2c>
   148e8:	20800e17 	ldw	r2,56(r4)
   148ec:	10002726 	beq	r2,zero,1498c <_fclose_r+0xc8>
   148f0:	8080030f 	ldh	r2,12(r16)
   148f4:	1000071e 	bne	r2,zero,14914 <_fclose_r+0x50>
   148f8:	0005883a 	mov	r2,zero
   148fc:	dfc00317 	ldw	ra,12(sp)
   14900:	dc800217 	ldw	r18,8(sp)
   14904:	dc400117 	ldw	r17,4(sp)
   14908:	dc000017 	ldw	r16,0(sp)
   1490c:	dec00404 	addi	sp,sp,16
   14910:	f800283a 	ret
   14914:	800b883a 	mov	r5,r16
   14918:	8809883a 	mov	r4,r17
   1491c:	0012f8c0 	call	12f8c <__sflush_r>
   14920:	1025883a 	mov	r18,r2
   14924:	80800b17 	ldw	r2,44(r16)
   14928:	10000426 	beq	r2,zero,1493c <_fclose_r+0x78>
   1492c:	81400717 	ldw	r5,28(r16)
   14930:	8809883a 	mov	r4,r17
   14934:	103ee83a 	callr	r2
   14938:	10001616 	blt	r2,zero,14994 <_fclose_r+0xd0>
   1493c:	8080030b 	ldhu	r2,12(r16)
   14940:	1080200c 	andi	r2,r2,128
   14944:	1000151e 	bne	r2,zero,1499c <_fclose_r+0xd8>
   14948:	81400c17 	ldw	r5,48(r16)
   1494c:	28000526 	beq	r5,zero,14964 <_fclose_r+0xa0>
   14950:	80801004 	addi	r2,r16,64
   14954:	28800226 	beq	r5,r2,14960 <_fclose_r+0x9c>
   14958:	8809883a 	mov	r4,r17
   1495c:	00136f80 	call	136f8 <_free_r>
   14960:	80000c15 	stw	zero,48(r16)
   14964:	81401117 	ldw	r5,68(r16)
   14968:	28000326 	beq	r5,zero,14978 <_fclose_r+0xb4>
   1496c:	8809883a 	mov	r4,r17
   14970:	00136f80 	call	136f8 <_free_r>
   14974:	80001115 	stw	zero,68(r16)
   14978:	00135940 	call	13594 <__sfp_lock_acquire>
   1497c:	8000030d 	sth	zero,12(r16)
   14980:	00135980 	call	13598 <__sfp_lock_release>
   14984:	9005883a 	mov	r2,r18
   14988:	003fdc06 	br	148fc <__alt_data_end+0xffff48fc>
   1498c:	00135840 	call	13584 <__sinit>
   14990:	003fd706 	br	148f0 <__alt_data_end+0xffff48f0>
   14994:	04bfffc4 	movi	r18,-1
   14998:	003fe806 	br	1493c <__alt_data_end+0xffff493c>
   1499c:	81400417 	ldw	r5,16(r16)
   149a0:	8809883a 	mov	r4,r17
   149a4:	00136f80 	call	136f8 <_free_r>
   149a8:	003fe706 	br	14948 <__alt_data_end+0xffff4948>
   149ac:	0005883a 	mov	r2,zero
   149b0:	f800283a 	ret

000149b4 <fclose>:
   149b4:	00800074 	movhi	r2,1
   149b8:	109b2804 	addi	r2,r2,27808
   149bc:	200b883a 	mov	r5,r4
   149c0:	11000017 	ldw	r4,0(r2)
   149c4:	00148c41 	jmpi	148c4 <_fclose_r>

000149c8 <_fstat_r>:
   149c8:	defffd04 	addi	sp,sp,-12
   149cc:	2805883a 	mov	r2,r5
   149d0:	dc000015 	stw	r16,0(sp)
   149d4:	040000b4 	movhi	r16,2
   149d8:	dc400115 	stw	r17,4(sp)
   149dc:	8421db04 	addi	r16,r16,-30868
   149e0:	2023883a 	mov	r17,r4
   149e4:	300b883a 	mov	r5,r6
   149e8:	1009883a 	mov	r4,r2
   149ec:	dfc00215 	stw	ra,8(sp)
   149f0:	80000015 	stw	zero,0(r16)
   149f4:	0014ba80 	call	14ba8 <fstat>
   149f8:	00ffffc4 	movi	r3,-1
   149fc:	10c00526 	beq	r2,r3,14a14 <_fstat_r+0x4c>
   14a00:	dfc00217 	ldw	ra,8(sp)
   14a04:	dc400117 	ldw	r17,4(sp)
   14a08:	dc000017 	ldw	r16,0(sp)
   14a0c:	dec00304 	addi	sp,sp,12
   14a10:	f800283a 	ret
   14a14:	80c00017 	ldw	r3,0(r16)
   14a18:	183ff926 	beq	r3,zero,14a00 <__alt_data_end+0xffff4a00>
   14a1c:	88c00015 	stw	r3,0(r17)
   14a20:	003ff706 	br	14a00 <__alt_data_end+0xffff4a00>

00014a24 <_isatty_r>:
   14a24:	defffd04 	addi	sp,sp,-12
   14a28:	dc000015 	stw	r16,0(sp)
   14a2c:	040000b4 	movhi	r16,2
   14a30:	dc400115 	stw	r17,4(sp)
   14a34:	8421db04 	addi	r16,r16,-30868
   14a38:	2023883a 	mov	r17,r4
   14a3c:	2809883a 	mov	r4,r5
   14a40:	dfc00215 	stw	ra,8(sp)
   14a44:	80000015 	stw	zero,0(r16)
   14a48:	0014c940 	call	14c94 <isatty>
   14a4c:	00ffffc4 	movi	r3,-1
   14a50:	10c00526 	beq	r2,r3,14a68 <_isatty_r+0x44>
   14a54:	dfc00217 	ldw	ra,8(sp)
   14a58:	dc400117 	ldw	r17,4(sp)
   14a5c:	dc000017 	ldw	r16,0(sp)
   14a60:	dec00304 	addi	sp,sp,12
   14a64:	f800283a 	ret
   14a68:	80c00017 	ldw	r3,0(r16)
   14a6c:	183ff926 	beq	r3,zero,14a54 <__alt_data_end+0xffff4a54>
   14a70:	88c00015 	stw	r3,0(r17)
   14a74:	003ff706 	br	14a54 <__alt_data_end+0xffff4a54>

00014a78 <_lseek_r>:
   14a78:	defffd04 	addi	sp,sp,-12
   14a7c:	2805883a 	mov	r2,r5
   14a80:	dc000015 	stw	r16,0(sp)
   14a84:	040000b4 	movhi	r16,2
   14a88:	dc400115 	stw	r17,4(sp)
   14a8c:	300b883a 	mov	r5,r6
   14a90:	8421db04 	addi	r16,r16,-30868
   14a94:	2023883a 	mov	r17,r4
   14a98:	380d883a 	mov	r6,r7
   14a9c:	1009883a 	mov	r4,r2
   14aa0:	dfc00215 	stw	ra,8(sp)
   14aa4:	80000015 	stw	zero,0(r16)
   14aa8:	0014d740 	call	14d74 <lseek>
   14aac:	00ffffc4 	movi	r3,-1
   14ab0:	10c00526 	beq	r2,r3,14ac8 <_lseek_r+0x50>
   14ab4:	dfc00217 	ldw	ra,8(sp)
   14ab8:	dc400117 	ldw	r17,4(sp)
   14abc:	dc000017 	ldw	r16,0(sp)
   14ac0:	dec00304 	addi	sp,sp,12
   14ac4:	f800283a 	ret
   14ac8:	80c00017 	ldw	r3,0(r16)
   14acc:	183ff926 	beq	r3,zero,14ab4 <__alt_data_end+0xffff4ab4>
   14ad0:	88c00015 	stw	r3,0(r17)
   14ad4:	003ff706 	br	14ab4 <__alt_data_end+0xffff4ab4>

00014ad8 <_read_r>:
   14ad8:	defffd04 	addi	sp,sp,-12
   14adc:	2805883a 	mov	r2,r5
   14ae0:	dc000015 	stw	r16,0(sp)
   14ae4:	040000b4 	movhi	r16,2
   14ae8:	dc400115 	stw	r17,4(sp)
   14aec:	300b883a 	mov	r5,r6
   14af0:	8421db04 	addi	r16,r16,-30868
   14af4:	2023883a 	mov	r17,r4
   14af8:	380d883a 	mov	r6,r7
   14afc:	1009883a 	mov	r4,r2
   14b00:	dfc00215 	stw	ra,8(sp)
   14b04:	80000015 	stw	zero,0(r16)
   14b08:	0014ecc0 	call	14ecc <read>
   14b0c:	00ffffc4 	movi	r3,-1
   14b10:	10c00526 	beq	r2,r3,14b28 <_read_r+0x50>
   14b14:	dfc00217 	ldw	ra,8(sp)
   14b18:	dc400117 	ldw	r17,4(sp)
   14b1c:	dc000017 	ldw	r16,0(sp)
   14b20:	dec00304 	addi	sp,sp,12
   14b24:	f800283a 	ret
   14b28:	80c00017 	ldw	r3,0(r16)
   14b2c:	183ff926 	beq	r3,zero,14b14 <__alt_data_end+0xffff4b14>
   14b30:	88c00015 	stw	r3,0(r17)
   14b34:	003ff706 	br	14b14 <__alt_data_end+0xffff4b14>

00014b38 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   14b38:	defffd04 	addi	sp,sp,-12
   14b3c:	df000215 	stw	fp,8(sp)
   14b40:	df000204 	addi	fp,sp,8
   14b44:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   14b48:	0001883a 	nop
   14b4c:	e0bfff17 	ldw	r2,-4(fp)
   14b50:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   14b54:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   14b58:	10000226 	beq	r2,zero,14b64 <_exit+0x2c>
    ALT_SIM_FAIL();
   14b5c:	002af070 	cmpltui	zero,zero,43969
   14b60:	00000106 	br	14b68 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   14b64:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   14b68:	003fff06 	br	14b68 <__alt_data_end+0xffff4b68>

00014b6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14b6c:	defffe04 	addi	sp,sp,-8
   14b70:	dfc00115 	stw	ra,4(sp)
   14b74:	df000015 	stw	fp,0(sp)
   14b78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14b7c:	d0a00517 	ldw	r2,-32748(gp)
   14b80:	10000326 	beq	r2,zero,14b90 <alt_get_errno+0x24>
   14b84:	d0a00517 	ldw	r2,-32748(gp)
   14b88:	103ee83a 	callr	r2
   14b8c:	00000106 	br	14b94 <alt_get_errno+0x28>
   14b90:	d0a6bd04 	addi	r2,gp,-25868
}
   14b94:	e037883a 	mov	sp,fp
   14b98:	dfc00117 	ldw	ra,4(sp)
   14b9c:	df000017 	ldw	fp,0(sp)
   14ba0:	dec00204 	addi	sp,sp,8
   14ba4:	f800283a 	ret

00014ba8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   14ba8:	defffb04 	addi	sp,sp,-20
   14bac:	dfc00415 	stw	ra,16(sp)
   14bb0:	df000315 	stw	fp,12(sp)
   14bb4:	df000304 	addi	fp,sp,12
   14bb8:	e13ffe15 	stw	r4,-8(fp)
   14bbc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14bc0:	e0bffe17 	ldw	r2,-8(fp)
   14bc4:	10000616 	blt	r2,zero,14be0 <fstat+0x38>
   14bc8:	e0bffe17 	ldw	r2,-8(fp)
   14bcc:	10c00324 	muli	r3,r2,12
   14bd0:	00800074 	movhi	r2,1
   14bd4:	1098b304 	addi	r2,r2,25292
   14bd8:	1885883a 	add	r2,r3,r2
   14bdc:	00000106 	br	14be4 <fstat+0x3c>
   14be0:	0005883a 	mov	r2,zero
   14be4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   14be8:	e0bffd17 	ldw	r2,-12(fp)
   14bec:	10001026 	beq	r2,zero,14c30 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   14bf0:	e0bffd17 	ldw	r2,-12(fp)
   14bf4:	10800017 	ldw	r2,0(r2)
   14bf8:	10800817 	ldw	r2,32(r2)
   14bfc:	10000726 	beq	r2,zero,14c1c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   14c00:	e0bffd17 	ldw	r2,-12(fp)
   14c04:	10800017 	ldw	r2,0(r2)
   14c08:	10800817 	ldw	r2,32(r2)
   14c0c:	e17fff17 	ldw	r5,-4(fp)
   14c10:	e13ffd17 	ldw	r4,-12(fp)
   14c14:	103ee83a 	callr	r2
   14c18:	00000a06 	br	14c44 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   14c1c:	e0bfff17 	ldw	r2,-4(fp)
   14c20:	00c80004 	movi	r3,8192
   14c24:	10c00115 	stw	r3,4(r2)
      return 0;
   14c28:	0005883a 	mov	r2,zero
   14c2c:	00000506 	br	14c44 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   14c30:	0014b6c0 	call	14b6c <alt_get_errno>
   14c34:	1007883a 	mov	r3,r2
   14c38:	00801444 	movi	r2,81
   14c3c:	18800015 	stw	r2,0(r3)
    return -1;
   14c40:	00bfffc4 	movi	r2,-1
  }
}
   14c44:	e037883a 	mov	sp,fp
   14c48:	dfc00117 	ldw	ra,4(sp)
   14c4c:	df000017 	ldw	fp,0(sp)
   14c50:	dec00204 	addi	sp,sp,8
   14c54:	f800283a 	ret

00014c58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14c58:	defffe04 	addi	sp,sp,-8
   14c5c:	dfc00115 	stw	ra,4(sp)
   14c60:	df000015 	stw	fp,0(sp)
   14c64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14c68:	d0a00517 	ldw	r2,-32748(gp)
   14c6c:	10000326 	beq	r2,zero,14c7c <alt_get_errno+0x24>
   14c70:	d0a00517 	ldw	r2,-32748(gp)
   14c74:	103ee83a 	callr	r2
   14c78:	00000106 	br	14c80 <alt_get_errno+0x28>
   14c7c:	d0a6bd04 	addi	r2,gp,-25868
}
   14c80:	e037883a 	mov	sp,fp
   14c84:	dfc00117 	ldw	ra,4(sp)
   14c88:	df000017 	ldw	fp,0(sp)
   14c8c:	dec00204 	addi	sp,sp,8
   14c90:	f800283a 	ret

00014c94 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   14c94:	deffed04 	addi	sp,sp,-76
   14c98:	dfc01215 	stw	ra,72(sp)
   14c9c:	df001115 	stw	fp,68(sp)
   14ca0:	df001104 	addi	fp,sp,68
   14ca4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14ca8:	e0bfff17 	ldw	r2,-4(fp)
   14cac:	10000616 	blt	r2,zero,14cc8 <isatty+0x34>
   14cb0:	e0bfff17 	ldw	r2,-4(fp)
   14cb4:	10c00324 	muli	r3,r2,12
   14cb8:	00800074 	movhi	r2,1
   14cbc:	1098b304 	addi	r2,r2,25292
   14cc0:	1885883a 	add	r2,r3,r2
   14cc4:	00000106 	br	14ccc <isatty+0x38>
   14cc8:	0005883a 	mov	r2,zero
   14ccc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   14cd0:	e0bfef17 	ldw	r2,-68(fp)
   14cd4:	10000e26 	beq	r2,zero,14d10 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   14cd8:	e0bfef17 	ldw	r2,-68(fp)
   14cdc:	10800017 	ldw	r2,0(r2)
   14ce0:	10800817 	ldw	r2,32(r2)
   14ce4:	1000021e 	bne	r2,zero,14cf0 <isatty+0x5c>
    {
      return 1;
   14ce8:	00800044 	movi	r2,1
   14cec:	00000d06 	br	14d24 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   14cf0:	e0bff004 	addi	r2,fp,-64
   14cf4:	100b883a 	mov	r5,r2
   14cf8:	e13fff17 	ldw	r4,-4(fp)
   14cfc:	0014ba80 	call	14ba8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   14d00:	e0bff117 	ldw	r2,-60(fp)
   14d04:	10880020 	cmpeqi	r2,r2,8192
   14d08:	10803fcc 	andi	r2,r2,255
   14d0c:	00000506 	br	14d24 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   14d10:	0014c580 	call	14c58 <alt_get_errno>
   14d14:	1007883a 	mov	r3,r2
   14d18:	00801444 	movi	r2,81
   14d1c:	18800015 	stw	r2,0(r3)
    return 0;
   14d20:	0005883a 	mov	r2,zero
  }
}
   14d24:	e037883a 	mov	sp,fp
   14d28:	dfc00117 	ldw	ra,4(sp)
   14d2c:	df000017 	ldw	fp,0(sp)
   14d30:	dec00204 	addi	sp,sp,8
   14d34:	f800283a 	ret

00014d38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14d38:	defffe04 	addi	sp,sp,-8
   14d3c:	dfc00115 	stw	ra,4(sp)
   14d40:	df000015 	stw	fp,0(sp)
   14d44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14d48:	d0a00517 	ldw	r2,-32748(gp)
   14d4c:	10000326 	beq	r2,zero,14d5c <alt_get_errno+0x24>
   14d50:	d0a00517 	ldw	r2,-32748(gp)
   14d54:	103ee83a 	callr	r2
   14d58:	00000106 	br	14d60 <alt_get_errno+0x28>
   14d5c:	d0a6bd04 	addi	r2,gp,-25868
}
   14d60:	e037883a 	mov	sp,fp
   14d64:	dfc00117 	ldw	ra,4(sp)
   14d68:	df000017 	ldw	fp,0(sp)
   14d6c:	dec00204 	addi	sp,sp,8
   14d70:	f800283a 	ret

00014d74 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   14d74:	defff904 	addi	sp,sp,-28
   14d78:	dfc00615 	stw	ra,24(sp)
   14d7c:	df000515 	stw	fp,20(sp)
   14d80:	df000504 	addi	fp,sp,20
   14d84:	e13ffd15 	stw	r4,-12(fp)
   14d88:	e17ffe15 	stw	r5,-8(fp)
   14d8c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   14d90:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14d94:	e0bffd17 	ldw	r2,-12(fp)
   14d98:	10000616 	blt	r2,zero,14db4 <lseek+0x40>
   14d9c:	e0bffd17 	ldw	r2,-12(fp)
   14da0:	10c00324 	muli	r3,r2,12
   14da4:	00800074 	movhi	r2,1
   14da8:	1098b304 	addi	r2,r2,25292
   14dac:	1885883a 	add	r2,r3,r2
   14db0:	00000106 	br	14db8 <lseek+0x44>
   14db4:	0005883a 	mov	r2,zero
   14db8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   14dbc:	e0bffc17 	ldw	r2,-16(fp)
   14dc0:	10001026 	beq	r2,zero,14e04 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   14dc4:	e0bffc17 	ldw	r2,-16(fp)
   14dc8:	10800017 	ldw	r2,0(r2)
   14dcc:	10800717 	ldw	r2,28(r2)
   14dd0:	10000926 	beq	r2,zero,14df8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   14dd4:	e0bffc17 	ldw	r2,-16(fp)
   14dd8:	10800017 	ldw	r2,0(r2)
   14ddc:	10800717 	ldw	r2,28(r2)
   14de0:	e1bfff17 	ldw	r6,-4(fp)
   14de4:	e17ffe17 	ldw	r5,-8(fp)
   14de8:	e13ffc17 	ldw	r4,-16(fp)
   14dec:	103ee83a 	callr	r2
   14df0:	e0bffb15 	stw	r2,-20(fp)
   14df4:	00000506 	br	14e0c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   14df8:	00bfde84 	movi	r2,-134
   14dfc:	e0bffb15 	stw	r2,-20(fp)
   14e00:	00000206 	br	14e0c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   14e04:	00bfebc4 	movi	r2,-81
   14e08:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   14e0c:	e0bffb17 	ldw	r2,-20(fp)
   14e10:	1000070e 	bge	r2,zero,14e30 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   14e14:	0014d380 	call	14d38 <alt_get_errno>
   14e18:	1007883a 	mov	r3,r2
   14e1c:	e0bffb17 	ldw	r2,-20(fp)
   14e20:	0085c83a 	sub	r2,zero,r2
   14e24:	18800015 	stw	r2,0(r3)
    rc = -1;
   14e28:	00bfffc4 	movi	r2,-1
   14e2c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   14e30:	e0bffb17 	ldw	r2,-20(fp)
}
   14e34:	e037883a 	mov	sp,fp
   14e38:	dfc00117 	ldw	ra,4(sp)
   14e3c:	df000017 	ldw	fp,0(sp)
   14e40:	dec00204 	addi	sp,sp,8
   14e44:	f800283a 	ret

00014e48 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   14e48:	defffe04 	addi	sp,sp,-8
   14e4c:	df000115 	stw	fp,4(sp)
   14e50:	df000104 	addi	fp,sp,4
   14e54:	e13fff15 	stw	r4,-4(fp)
}
   14e58:	0001883a 	nop
   14e5c:	e037883a 	mov	sp,fp
   14e60:	df000017 	ldw	fp,0(sp)
   14e64:	dec00104 	addi	sp,sp,4
   14e68:	f800283a 	ret

00014e6c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   14e6c:	defffe04 	addi	sp,sp,-8
   14e70:	df000115 	stw	fp,4(sp)
   14e74:	df000104 	addi	fp,sp,4
   14e78:	e13fff15 	stw	r4,-4(fp)
}
   14e7c:	0001883a 	nop
   14e80:	e037883a 	mov	sp,fp
   14e84:	df000017 	ldw	fp,0(sp)
   14e88:	dec00104 	addi	sp,sp,4
   14e8c:	f800283a 	ret

00014e90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14e90:	defffe04 	addi	sp,sp,-8
   14e94:	dfc00115 	stw	ra,4(sp)
   14e98:	df000015 	stw	fp,0(sp)
   14e9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14ea0:	d0a00517 	ldw	r2,-32748(gp)
   14ea4:	10000326 	beq	r2,zero,14eb4 <alt_get_errno+0x24>
   14ea8:	d0a00517 	ldw	r2,-32748(gp)
   14eac:	103ee83a 	callr	r2
   14eb0:	00000106 	br	14eb8 <alt_get_errno+0x28>
   14eb4:	d0a6bd04 	addi	r2,gp,-25868
}
   14eb8:	e037883a 	mov	sp,fp
   14ebc:	dfc00117 	ldw	ra,4(sp)
   14ec0:	df000017 	ldw	fp,0(sp)
   14ec4:	dec00204 	addi	sp,sp,8
   14ec8:	f800283a 	ret

00014ecc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   14ecc:	defff904 	addi	sp,sp,-28
   14ed0:	dfc00615 	stw	ra,24(sp)
   14ed4:	df000515 	stw	fp,20(sp)
   14ed8:	df000504 	addi	fp,sp,20
   14edc:	e13ffd15 	stw	r4,-12(fp)
   14ee0:	e17ffe15 	stw	r5,-8(fp)
   14ee4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14ee8:	e0bffd17 	ldw	r2,-12(fp)
   14eec:	10000616 	blt	r2,zero,14f08 <read+0x3c>
   14ef0:	e0bffd17 	ldw	r2,-12(fp)
   14ef4:	10c00324 	muli	r3,r2,12
   14ef8:	00800074 	movhi	r2,1
   14efc:	1098b304 	addi	r2,r2,25292
   14f00:	1885883a 	add	r2,r3,r2
   14f04:	00000106 	br	14f0c <read+0x40>
   14f08:	0005883a 	mov	r2,zero
   14f0c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   14f10:	e0bffb17 	ldw	r2,-20(fp)
   14f14:	10002226 	beq	r2,zero,14fa0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   14f18:	e0bffb17 	ldw	r2,-20(fp)
   14f1c:	10800217 	ldw	r2,8(r2)
   14f20:	108000cc 	andi	r2,r2,3
   14f24:	10800060 	cmpeqi	r2,r2,1
   14f28:	1000181e 	bne	r2,zero,14f8c <read+0xc0>
        (fd->dev->read))
   14f2c:	e0bffb17 	ldw	r2,-20(fp)
   14f30:	10800017 	ldw	r2,0(r2)
   14f34:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   14f38:	10001426 	beq	r2,zero,14f8c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   14f3c:	e0bffb17 	ldw	r2,-20(fp)
   14f40:	10800017 	ldw	r2,0(r2)
   14f44:	10800517 	ldw	r2,20(r2)
   14f48:	e0ffff17 	ldw	r3,-4(fp)
   14f4c:	180d883a 	mov	r6,r3
   14f50:	e17ffe17 	ldw	r5,-8(fp)
   14f54:	e13ffb17 	ldw	r4,-20(fp)
   14f58:	103ee83a 	callr	r2
   14f5c:	e0bffc15 	stw	r2,-16(fp)
   14f60:	e0bffc17 	ldw	r2,-16(fp)
   14f64:	1000070e 	bge	r2,zero,14f84 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   14f68:	0014e900 	call	14e90 <alt_get_errno>
   14f6c:	1007883a 	mov	r3,r2
   14f70:	e0bffc17 	ldw	r2,-16(fp)
   14f74:	0085c83a 	sub	r2,zero,r2
   14f78:	18800015 	stw	r2,0(r3)
          return -1;
   14f7c:	00bfffc4 	movi	r2,-1
   14f80:	00000c06 	br	14fb4 <read+0xe8>
        }
        return rval;
   14f84:	e0bffc17 	ldw	r2,-16(fp)
   14f88:	00000a06 	br	14fb4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   14f8c:	0014e900 	call	14e90 <alt_get_errno>
   14f90:	1007883a 	mov	r3,r2
   14f94:	00800344 	movi	r2,13
   14f98:	18800015 	stw	r2,0(r3)
   14f9c:	00000406 	br	14fb0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   14fa0:	0014e900 	call	14e90 <alt_get_errno>
   14fa4:	1007883a 	mov	r3,r2
   14fa8:	00801444 	movi	r2,81
   14fac:	18800015 	stw	r2,0(r3)
  }
  return -1;
   14fb0:	00bfffc4 	movi	r2,-1
}
   14fb4:	e037883a 	mov	sp,fp
   14fb8:	dfc00117 	ldw	ra,4(sp)
   14fbc:	df000017 	ldw	fp,0(sp)
   14fc0:	dec00204 	addi	sp,sp,8
   14fc4:	f800283a 	ret

00014fc8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   14fc8:	defff904 	addi	sp,sp,-28
   14fcc:	df000615 	stw	fp,24(sp)
   14fd0:	df000604 	addi	fp,sp,24
   14fd4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14fd8:	0005303a 	rdctl	r2,status
   14fdc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14fe0:	e0fffe17 	ldw	r3,-8(fp)
   14fe4:	00bfff84 	movi	r2,-2
   14fe8:	1884703a 	and	r2,r3,r2
   14fec:	1001703a 	wrctl	status,r2
  
  return context;
   14ff0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   14ff4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   14ff8:	d0a00d17 	ldw	r2,-32716(gp)
   14ffc:	10c000c4 	addi	r3,r2,3
   15000:	00bfff04 	movi	r2,-4
   15004:	1884703a 	and	r2,r3,r2
   15008:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1500c:	d0e00d17 	ldw	r3,-32716(gp)
   15010:	e0bfff17 	ldw	r2,-4(fp)
   15014:	1887883a 	add	r3,r3,r2
   15018:	008000b4 	movhi	r2,2
   1501c:	10800004 	addi	r2,r2,0
   15020:	10c0062e 	bgeu	r2,r3,1503c <sbrk+0x74>
   15024:	e0bffb17 	ldw	r2,-20(fp)
   15028:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1502c:	e0bffa17 	ldw	r2,-24(fp)
   15030:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   15034:	00bfffc4 	movi	r2,-1
   15038:	00000b06 	br	15068 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1503c:	d0a00d17 	ldw	r2,-32716(gp)
   15040:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   15044:	d0e00d17 	ldw	r3,-32716(gp)
   15048:	e0bfff17 	ldw	r2,-4(fp)
   1504c:	1885883a 	add	r2,r3,r2
   15050:	d0a00d15 	stw	r2,-32716(gp)
   15054:	e0bffb17 	ldw	r2,-20(fp)
   15058:	e0bffc15 	stw	r2,-16(fp)
   1505c:	e0bffc17 	ldw	r2,-16(fp)
   15060:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   15064:	e0bffd17 	ldw	r2,-12(fp)
} 
   15068:	e037883a 	mov	sp,fp
   1506c:	df000017 	ldw	fp,0(sp)
   15070:	dec00104 	addi	sp,sp,4
   15074:	f800283a 	ret

00015078 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15078:	defffe04 	addi	sp,sp,-8
   1507c:	dfc00115 	stw	ra,4(sp)
   15080:	df000015 	stw	fp,0(sp)
   15084:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15088:	d0a00517 	ldw	r2,-32748(gp)
   1508c:	10000326 	beq	r2,zero,1509c <alt_get_errno+0x24>
   15090:	d0a00517 	ldw	r2,-32748(gp)
   15094:	103ee83a 	callr	r2
   15098:	00000106 	br	150a0 <alt_get_errno+0x28>
   1509c:	d0a6bd04 	addi	r2,gp,-25868
}
   150a0:	e037883a 	mov	sp,fp
   150a4:	dfc00117 	ldw	ra,4(sp)
   150a8:	df000017 	ldw	fp,0(sp)
   150ac:	dec00204 	addi	sp,sp,8
   150b0:	f800283a 	ret

000150b4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   150b4:	defff904 	addi	sp,sp,-28
   150b8:	dfc00615 	stw	ra,24(sp)
   150bc:	df000515 	stw	fp,20(sp)
   150c0:	df000504 	addi	fp,sp,20
   150c4:	e13ffd15 	stw	r4,-12(fp)
   150c8:	e17ffe15 	stw	r5,-8(fp)
   150cc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   150d0:	e0bffd17 	ldw	r2,-12(fp)
   150d4:	10000616 	blt	r2,zero,150f0 <write+0x3c>
   150d8:	e0bffd17 	ldw	r2,-12(fp)
   150dc:	10c00324 	muli	r3,r2,12
   150e0:	00800074 	movhi	r2,1
   150e4:	1098b304 	addi	r2,r2,25292
   150e8:	1885883a 	add	r2,r3,r2
   150ec:	00000106 	br	150f4 <write+0x40>
   150f0:	0005883a 	mov	r2,zero
   150f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   150f8:	e0bffb17 	ldw	r2,-20(fp)
   150fc:	10002126 	beq	r2,zero,15184 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   15100:	e0bffb17 	ldw	r2,-20(fp)
   15104:	10800217 	ldw	r2,8(r2)
   15108:	108000cc 	andi	r2,r2,3
   1510c:	10001826 	beq	r2,zero,15170 <write+0xbc>
   15110:	e0bffb17 	ldw	r2,-20(fp)
   15114:	10800017 	ldw	r2,0(r2)
   15118:	10800617 	ldw	r2,24(r2)
   1511c:	10001426 	beq	r2,zero,15170 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   15120:	e0bffb17 	ldw	r2,-20(fp)
   15124:	10800017 	ldw	r2,0(r2)
   15128:	10800617 	ldw	r2,24(r2)
   1512c:	e0ffff17 	ldw	r3,-4(fp)
   15130:	180d883a 	mov	r6,r3
   15134:	e17ffe17 	ldw	r5,-8(fp)
   15138:	e13ffb17 	ldw	r4,-20(fp)
   1513c:	103ee83a 	callr	r2
   15140:	e0bffc15 	stw	r2,-16(fp)
   15144:	e0bffc17 	ldw	r2,-16(fp)
   15148:	1000070e 	bge	r2,zero,15168 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   1514c:	00150780 	call	15078 <alt_get_errno>
   15150:	1007883a 	mov	r3,r2
   15154:	e0bffc17 	ldw	r2,-16(fp)
   15158:	0085c83a 	sub	r2,zero,r2
   1515c:	18800015 	stw	r2,0(r3)
        return -1;
   15160:	00bfffc4 	movi	r2,-1
   15164:	00000c06 	br	15198 <write+0xe4>
      }
      return rval;
   15168:	e0bffc17 	ldw	r2,-16(fp)
   1516c:	00000a06 	br	15198 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   15170:	00150780 	call	15078 <alt_get_errno>
   15174:	1007883a 	mov	r3,r2
   15178:	00800344 	movi	r2,13
   1517c:	18800015 	stw	r2,0(r3)
   15180:	00000406 	br	15194 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   15184:	00150780 	call	15078 <alt_get_errno>
   15188:	1007883a 	mov	r3,r2
   1518c:	00801444 	movi	r2,81
   15190:	18800015 	stw	r2,0(r3)
  }
  return -1;
   15194:	00bfffc4 	movi	r2,-1
}
   15198:	e037883a 	mov	sp,fp
   1519c:	dfc00117 	ldw	ra,4(sp)
   151a0:	df000017 	ldw	fp,0(sp)
   151a4:	dec00204 	addi	sp,sp,8
   151a8:	f800283a 	ret
